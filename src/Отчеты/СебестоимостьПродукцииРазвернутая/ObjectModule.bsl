
Функция СведенияОВнешнейОбработке() Экспорт
	
	ПараметрыРегистрации = Новый Структура;
	МассивНазначений = Новый Массив;
	
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке("2.2.2.1");
	ПараметрыРегистрации.Вид          = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительныйОтчет();
	ПараметрыРегистрации.Наименование = Метаданные().Представление() + " (дополнительный)";
	ПараметрыРегистрации.Версия       = Метаданные().Комментарий;
	ПараметрыРегистрации.Назначение   = МассивНазначений;
	ПараметрыРегистрации.БезопасныйРежим = Истина;
	
	ДобавитьКоманду(ПараметрыРегистрации.Команды, ПараметрыРегистрации.Наименование, ПараметрыРегистрации.Наименование, ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы(), Ложь, "ПечатьMXL");
		
	Возврат ПараметрыРегистрации;	
		
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
	
	НоваяКоманда = ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление = Представление;
	НоваяКоманда.Идентификатор = Идентификатор;
	НоваяКоманда.Использование = Использование;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
	НоваяКоманда.Модификатор = Модификатор;
	
КонецПроцедуры

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДокументРезультат.Очистить();
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	
	ПараметрПериод = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
	Данные = ПолучитьДанные(ПараметрПериод.Значение, Настройки);
	
	СтруктураОтбора = Новый Структура;
	Для каждого Элемент из Настройки.Отбор.Элементы Цикл
		
		Если Элемент.Использование Тогда
			
			Если Строка(Элемент.ЛевоеЗначение) = "Продукция" Тогда
				СтруктураОтбора.Вставить("Продукция", Элемент.ПравоеЗначение);
				
			ИначеЕсли Строка(Элемент.ЛевоеЗначение) = "ХарактеристикаПродукции" Тогда
				СтруктураОтбора.Вставить("ХарактеристикаПродукции", Элемент.ПравоеЗначение);
			КонецЕсли;
		
		Конецесли;
		
	КонецЦикла;	
	
	КлючевыеПоля = "Продукция, ХарактеристикаПродукции, Месяц, Организация";
	
	ТаблицаКоличествоПродукции = ПолучитьТаблицуКоличествоПродукции(ПараметрПериод.Значение);
	ТаблицаКоличествоПродукции.Индексы.Добавить(КлючевыеПоля);
	
	ИтоговаяТаблица = РазвернутьПолуфабрикаты(Данные, СтруктураОтбора, ТаблицаКоличествоПродукции, КлючевыеПоля);
	
	ВнешниеНаборы = Новый Структура;
	ВнешниеНаборы.Вставить("Данные",              ИтоговаяТаблица);
	ВнешниеНаборы.Вставить("КоличествоПродукции", ТаблицаКоличествоПродукции);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;    
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки,, Тип("ГенераторМакетаКомпоновкиДанных"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, ВнешниеНаборы, ДанныеРасшифровки, Истина);	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);

КонецПроцедуры

Функция ПолучитьДанные(Период, Настройки)
	
	СхемаСКД = ПолучитьМакет("СКД_Данные");
	НастройкиПоУмолчанию = СхемаСКД.НастройкиПоУмолчанию;
	
	ПараметрПериод = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
	НастройкиПоУмолчанию.ПараметрыДанных.УстановитьЗначениеПараметра("Период", ПараметрПериод.Значение);
	
	РазрешенныйОтбор = Новый Соответствие;
	РазрешенныйОтбор.Вставить("Организация",       Истина);
	РазрешенныйОтбор.Вставить("СтатьяКалькуляции", Истина);
	
	Для каждого Элемент из Настройки.Отбор.Элементы Цикл
		
		Если РазрешенныйОтбор[Строка(Элемент.ЛевоеЗначение)] = Истина Тогда
			
			НовыйЭлемент = НастройкиПоУмолчанию.Отбор.Элементы.Добавить(ТипЗнч(Элемент));	
			ЗаполнитьЗначенияСвойств(НовыйЭлемент, Элемент);
			
		КонецЕсли;
		
	КонецЦикла;	
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;    
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаСКД, НастройкиПоУмолчанию,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных,,, Истина);	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	Возврат ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
КонецФункции	

Функция РазвернутьПолуфабрикаты(Данные, СтруктураОтбора, ТаблицаКоличествоПродукции, КлючевыеПоля)
	
	Данные.Колонки.Добавить("ЭтоПолуфабрикат", Новый ОписаниеТипов("Булево"));
	Данные.Колонки.Добавить("Полуфабрикат",    Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Данные.Колонки.Добавить("ХарактеристикаПолуфабриката", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	
	Данные.Индексы.Добавить(КлючевыеПоля);

	МассивТаблиц = Новый Массив;

	ТаблицаДляРазвертки =  ОтобратьДанныеПоСписку(Данные, СтруктураОтбора);
	МассивТаблиц.Добавить(ТаблицаДляРазвертки);
	
	Счетчик = 0;
	Пока Истина Цикл
		
		ТаблицаДляРазвертки = РазвернутьУровеньПолуфабрикатов(Данные, ТаблицаДляРазвертки, ТаблицаКоличествоПродукции, КлючевыеПоля);
		
		Если ТаблицаДляРазвертки.Количество() > 0 Тогда
			МассивТаблиц.Добавить(ТаблицаДляРазвертки);
		Иначе
			Прервать;
		КонецЕсли;	
		
		Счетчик = Счетчик + 1;
		Если Счетчик > 20 Тогда
			Прервать;
		Конецесли;	
		
	КонецЦикла;	
	
	ИтоговаяТаблица = Данные.СкопироватьКолонки();
	Для каждого ТаблицаДляРазвертки из МассивТаблиц Цикл
		
		Для каждого СтрокаТЗ из ТаблицаДляРазвертки Цикл
			
			НоваяСтрока = ИтоговаяТаблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
			
		КонецЦикла;	
		
	КонецЦикла;	
	
	Возврат ИтоговаяТаблица;
	
КонецФункции	

Функция ПолучитьТаблицуКоличествоПродукции(Период)
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("НачалоПериода", Период.ДатаНачала);
	Запрос.Параметры.Вставить("КонецПериода",  Период.ДатаОкончания);
	Запрос.Параметры.Вставить("СтатьяКалькуляции", Справочники.СтатьиКалькуляции.НайтиПоНаименованию("Сырье и материалы"));
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЛОЖЬ КАК ЭтоПолуфабрикат,
	|	&СтатьяКалькуляции КАК СтатьяКалькуляции,
	|	Выпуск.Период КАК Месяц,
	|	Выпуск.Организация,
	|	Выпуск.АналитикаУчетаНоменклатуры.Номенклатура КАК Продукция,
	|	Выпуск.АналитикаУчетаНоменклатуры.Характеристика КАК ХарактеристикаПродукции,
	|	Выпуск.КоличествоОборот КАК КоличествоПродукции
	|ИЗ
	|	РегистрНакопления.ВыпускПродукции.Обороты(&НачалоПериода, &КонецПериода, Месяц, ) КАК Выпуск";
	
	Таблица = Запрос.Выполнить().Выгрузить();
	Возврат Таблица;
	
КонецФункции	

Функция РазвернутьУровеньПолуфабрикатов(ИсходныеДанные, ТаблицаДляРазвертки, ТаблицаКоличествоПродукции, ПоляОтбора)
	
	ДанныеПоПолуфабрикатам = ИсходныеДанные.СкопироватьКолонки();
	
	СтруктураОтбора = Новый Структура(ПоляОтбора);
	
	Для каждого СтрокаТЗ из ТаблицаДляРазвертки Цикл
		
		Если ТипЗнч(СтрокаТЗ.Затрата) <> Тип("СправочникСсылка.Номенклатура") Тогда
			Продолжить;
		КонецЕсли;	
		
		Если _ОбщегоНазначенияДоп.Абс(СтрокаТЗ.КоличествоЗатрат) < 0.001
			И _ОбщегоНазначенияДоп.Абс(СтрокаТЗ.СтоимостьЗатрат) < 0.01 Тогда
			Продолжить;
		КонецЕсли;	
		
		СтруктураОтбора.Организация             = СтрокаТЗ.Организация;
		СтруктураОтбора.Продукция               = СтрокаТЗ.Затрата;
		СтруктураОтбора.ХарактеристикаПродукции = СтрокаТЗ.ХарактеристикаЗатраты;
		СтруктураОтбора.Месяц                   = СтрокаТЗ.Месяц;
		
		СтрокиИсходныеДанные = ИсходныеДанные.НайтиСтроки(СтруктураОтбора);
		Если СтрокиИсходныеДанные.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТЗ.ЭтоПолуфабрикат = Истина;
		КоличествоПФ = _ОбщегоНазначенияДоп.ЕстьNULL(СтрокаТЗ.КоличествоЗатрат, 0);
		
		СтрокиПродукция = ТаблицаКоличествоПродукции.НайтиСтроки(СтруктураОтбора);
		Если СтрокиПродукция.Количество() > 0 Тогда
			КоличествоПродукции = СтрокиПродукция[0].КоличествоПродукции;
		Иначе	
			КоличествоПродукции = 0;
		КонецЕсли;	
		
		Если КоличествоПродукции = 0 Тогда
			Продолжить;
		КонецЕсли;	
		
		Для каждого Строка2 из СтрокиИсходныеДанные Цикл
			
			КоличествоЗатрат    = _ОбщегоНазначенияДоп.ЕстьNULL(Строка2.КоличествоЗатрат, 0);
			СтоимостьЗатрат     = _ОбщегоНазначенияДоп.ЕстьNULL(Строка2.СтоимостьЗатрат, 0);
			
			КоличествоЗатратНовый = Окр(КоличествоПФ * (КоличествоЗатрат / КоличествоПродукции), 3);
			СтоимостьЗатратНовый  = Окр(КоличествоПФ * (СтоимостьЗатрат / КоличествоПродукции), 2);
			
			Если КоличествоЗатратНовый = 0 
				И СтоимостьЗатратНовый = 0 Тогда
				Продолжить;
			КонецЕсли;	
			
			НоваяСтрока = ДанныеПоПолуфабрикатам.Добавить();
			НоваяСтрока.Месяц                       = СтрокаТЗ.Месяц;
			НоваяСтрока.Организация                 = СтрокаТЗ.Организация;
			НоваяСтрока.Продукция                   = СтрокаТЗ.Продукция;
			НоваяСтрока.ХарактеристикаПродукции     = СтрокаТЗ.ХарактеристикаПродукции;
			
			НоваяСтрока.Полуфабрикат                = СтрокаТЗ.Затрата;
			НоваяСтрока.ХарактеристикаПолуфабриката = СтрокаТЗ.ХарактеристикаЗатраты;
			
			НоваяСтрока.СтатьяКалькуляции     = Строка2.СтатьяКалькуляции;
			НоваяСтрока.Затрата               = Строка2.Затрата;
			НоваяСтрока.ХарактеристикаЗатраты = Строка2.ХарактеристикаЗатраты;
			
			НоваяСтрока.КоличествоЗатрат = КоличествоЗатратНовый;
			НоваяСтрока.СтоимостьЗатрат  = СтоимостьЗатратНовый;
			
		КонецЦикла;	
		
	КонецЦикла;	
	
	//ДанныеПоПолуфабрикатам.Свернуть("Организация, СтатьяКалькуляции, Продукция, ХарактеристикаПродукции, Затрата, ХарактеристикаЗатраты, Полуфабрикат, ХарактеристикаПолуфабриката, ЭтоПолуфабрикат, Месяц", "КоличествоЗатрат, СтоимостьЗатрат");
	Возврат ДанныеПоПолуфабрикатам;
	
КонецФункции

Функция ОтобратьДанныеПоСписку(Таблица, СтруктураОтбора)
	
	НоваяТаблица = Таблица.СкопироватьКолонки();
	Для каждого СтрокаТЗ из Таблица Цикл
		
		Результат = Истина;
		Для каждого КлючИЗначение из СтруктураОтбора Цикл
			
			Если ТипЗнч(КлючИЗначение.Значение) = Тип("СписокЗначений") Тогда
				Результат = (КлючИЗначение.Значение.НайтиПоЗначению(СтрокаТЗ[КлючИЗначение.Ключ]) <> Неопределено)
			Иначе	
				Результат = (КлючИЗначение.Значение = СтрокаТЗ[КлючИЗначение.Ключ]);
			КонецЕсли;	
			
			Если НЕ Результат Тогда
				Прервать;
			КонецЕсли;	
			
		КонецЦикла;
		
		Если НЕ Результат Тогда
			Продолжить;
		КонецЕсли;	
		
		НоваяСтрока = НоваяТаблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
		
	КонецЦикла;	
	
	Возврат НоваяТаблица;
	
КонецФункции

