
Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДокументРезультат.Очистить();
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	
	ПараметрПериод = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
	Данные = ПолучитьДанные(ПараметрПериод.Значение);
	
	ОтборПоНоменклатуре = Новый СписокЗначений;
	Для каждого Элемент из Настройки.Отбор.Элементы Цикл
		
		Если Строка(Элемент.ЛевоеЗначение) = "Продукция" Тогда
			ОтборПоНоменклатуре = Элемент.ПравоеЗначение;
		КонецЕсли;
		
	КонецЦикла;	
	
	ИтоговаяТаблица = РазвернутьПолуфабрикаты(Данные, ОтборПоНоменклатуре);
	
	ВнешниеНаборы = Новый Структура;
	ВнешниеНаборы.Вставить("Данные", ИтоговаяТаблица);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;    
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки,, Тип("ГенераторМакетаКомпоновкиДанных"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, ВнешниеНаборы, ДанныеРасшифровки, Истина);	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);

КонецПроцедуры

Функция ПолучитьДанные(Период)
	
	СхемаСКД = ПолучитьМакет("СКД_Данные");
	Настройки = СхемаСКД.НастройкиПоУмолчанию;
	
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"), Период);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;    
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаСКД, Настройки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных,,, Истина);	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	Возврат ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
КонецФункции	

Функция РазвернутьПолуфабрикаты(Данные, ОтборПоНоменклатуре)
	
	Данные.Колонки.Добавить("ЭтоПолуфабрикат", Новый ОписаниеТипов("Булево"));
	Данные.Колонки.Добавить("Полуфабрикат",    Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Данные.Колонки.Добавить("ХарактеристикаПолуфабриката", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	
	КлючевыеПоля = "Продукция, ХарактеристикаПродукции, Организация";
	Данные.Индексы.Добавить(КлючевыеПоля);

	МассивТаблиц = Новый Массив;

	ТаблицаДляРазвертки =  ОтобратьДанныеПоСписку(Данные, "Продукция", ОтборПоНоменклатуре);
	МассивТаблиц.Добавить(ТаблицаДляРазвертки);
	
	Цепочки = Новый ТаблицаЗначений;
	Цепочки.Колонки.Добавить("Продукция",               Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Цепочки.Колонки.Добавить("ХарактеристикаПродукции", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Цепочки.Колонки.Добавить("Затрата",                 Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Цепочки.Колонки.Добавить("ХарактеристикаЗатраты",   Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Данные.Индексы.Добавить("Продукция, ХарактеристикаПродукции, Затрата, ХарактеристикаЗатраты");
	
	Счетчик = 0;
	Пока Истина Цикл
		
		ТаблицаДляРазвертки = РазвернутьУровеньПолуфабрикатов(Данные, ТаблицаДляРазвертки, КлючевыеПоля, Цепочки);
		
		Если ТаблицаДляРазвертки.Количество() > 0 Тогда
			МассивТаблиц.Добавить(ТаблицаДляРазвертки);
		Иначе
			Прервать;
		КонецЕсли;	
		
		Счетчик = Счетчик + 1;
		Если Счетчик > 15 Тогда
			Прервать;
		Конецесли;	
		
	КонецЦикла;	
	
	ИтоговаяТаблица = Данные.СкопироватьКолонки();
	Для каждого ТаблицаДляРазвертки из МассивТаблиц Цикл
		
		Для каждого СтрокаТЗ из ТаблицаДляРазвертки Цикл
			
			НоваяСтрока = ИтоговаяТаблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
			
		КонецЦикла;	
		
	КонецЦикла;	
	
	ИтоговаяТаблица.Колонки.Добавить("КоличествоЗатратНаЕдиницуПродукции", ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	ИтоговаяТаблица.Колонки.Добавить("СтоимостьЗатратНаЕдиницуПродукции", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	Для каждого СтрокаТЗ из ИтоговаяТаблица Цикл
		
		КоличествоЗатрат    = _ОбщегоНазначенияДоп.ЕстьNULL(СтрокаТЗ.КоличествоЗатрат, 0);
		СтоимостьЗатрат     = _ОбщегоНазначенияДоп.ЕстьNULL(СтрокаТЗ.СтоимостьЗатрат, 0);
		КоличествоПродукции = _ОбщегоНазначенияДоп.ЕстьNULL(СтрокаТЗ.КоличествоПродукции, 0);
		Если КоличествоПродукции <> 0 Тогда
			СтрокаТЗ.КоличествоЗатратНаЕдиницуПродукции = Окр(КоличествоЗатрат / КоличествоПродукции, 3);
			СтрокаТЗ.СтоимостьЗатратНаЕдиницуПродукции  = Окр(СтоимостьЗатрат / КоличествоПродукции, 2);
		КонецЕсли;	
		
	КонецЦикла;	
	
	Возврат ИтоговаяТаблица;
	
КонецФункции	

Функция РазвернутьУровеньПолуфабрикатов(ИсходныеДанные, ТаблицаДляРазвертки, ПоляОтбора, Цепочки)
	
	ДанныеПоПолуфабрикатам = ИсходныеДанные.СкопироватьКолонки();
	
	СтруктураОтбора = Новый Структура(ПоляОтбора);
	
	Для каждого СтрокаТЗ из ТаблицаДляРазвертки Цикл
		
		Если ТипЗнч(СтрокаТЗ.Затрата) <> Тип("СправочникСсылка.Номенклатура") Тогда
			Продолжить;
		КонецЕсли;	
		
		СтруктураОтбора.Организация             = СтрокаТЗ.Организация;
		СтруктураОтбора.Продукция               = СтрокаТЗ.Затрата;
		СтруктураОтбора.ХарактеристикаПродукции = СтрокаТЗ.ХарактеристикаЗатраты;
		
		НайденныеСтроки = ИсходныеДанные.НайтиСтроки(СтруктураОтбора);
		Если НайденныеСтроки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		СтрокаТЗ.ЭтоПолуфабрикат = Истина;
		
		ДанныеЦепочки = Новый Структура;
		ДанныеЦепочки.Вставить("Продукция",               ?(ЗначениеЗаполнено(СтрокаТЗ.Полуфабрикат), СтрокаТЗ.Полуфабрикат, СтрокаТЗ.Продукция));
		ДанныеЦепочки.Вставить("ХарактеристикаПродукции", ?(ЗначениеЗаполнено(СтрокаТЗ.ХарактеристикаПолуфабриката), СтрокаТЗ.ХарактеристикаПолуфабриката, СтрокаТЗ.ХарактеристикаПродукции));
		ДанныеЦепочки.Вставить("Затрата",                 СтрокаТЗ.Затрата);
		ДанныеЦепочки.Вставить("ХарактеристикаЗатраты",   СтрокаТЗ.ХарактеристикаЗатраты);
		Если НЕ ДобавитьЦепочку(Цепочки, ДанныеЦепочки) Тогда
			Продолжить;
		КонецЕсли;	
		                                                                                    
		Для каждого Строка2 из НайденныеСтроки Цикл
			
			НоваяСтрока = ДанныеПоПолуфабрикатам.Добавить();
			НоваяСтрока.Организация                 = СтрокаТЗ.Организация;
			НоваяСтрока.Продукция                   = СтрокаТЗ.Продукция;
			НоваяСтрока.ХарактеристикаПродукции     = СтрокаТЗ.ХарактеристикаПродукции;
			
			НоваяСтрока.Полуфабрикат                = СтрокаТЗ.Затрата;
			НоваяСтрока.ХарактеристикаПолуфабриката = СтрокаТЗ.ХарактеристикаЗатраты;
			
			НоваяСтрока.СтатьяКалькуляции     = Строка2.СтатьяКалькуляции;
			НоваяСтрока.Затрата               = Строка2.Затрата;
			НоваяСтрока.ХарактеристикаЗатраты = Строка2.ХарактеристикаЗатраты;
			
			КоличествоПФ        = _ОбщегоНазначенияДоп.ЕстьNULL(СтрокаТЗ.КоличествоЗатрат, 0);
			КоличествоЗатрат    = _ОбщегоНазначенияДоп.ЕстьNULL(Строка2.КоличествоЗатрат, 0);
			СтоимостьЗатрат     = _ОбщегоНазначенияДоп.ЕстьNULL(Строка2.СтоимостьЗатрат, 0);
			КоличествоПродукции = _ОбщегоНазначенияДоп.ЕстьNULL(Строка2.КоличествоПродукции, 0);
			
			Если КоличествоПродукции <> 0 Тогда
				НоваяСтрока.КоличествоЗатрат = Окр(КоличествоПФ * (КоличествоЗатрат / КоличествоПродукции), 6);
				НоваяСтрока.СтоимостьЗатрат  = Окр(КоличествоПФ * (СтоимостьЗатрат / КоличествоПродукции), 2);
			КонецЕсли;
			
			НоваяСтрока.КоличествоПродукции = СтрокаТЗ.КоличествоПродукции;
			
		КонецЦикла;	
		
	КонецЦикла;	
	
	Возврат ДанныеПоПолуфабрикатам;
	
КонецФункции

Функция ДобавитьЦепочку(Цепочки, Данные)
	
	Если Цепочки.НайтиСтроки(Данные).Количество() > 0 Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	НоваяЦепочка = Цепочки.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяЦепочка, Данные);
	Возврат Истина;
		
КонецФункции	

Функция ОтобратьДанныеПоСписку(Таблица, Поле, Список)
	
	НоваяТаблица = Таблица.СкопироватьКолонки();
	Для каждого СтрокаТЗ из Таблица Цикл
		
		Если Список.НайтиПоЗначению(СтрокаТЗ[Поле]) = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		
		НоваяСтрока = НоваяТаблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
		
	КонецЦикла;	
	
	Возврат НоваяТаблица;
	
КонецФункции

