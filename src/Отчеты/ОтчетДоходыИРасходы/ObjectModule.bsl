
Функция СведенияОВнешнейОбработке() Экспорт
	
	МассивНазначений = Новый Массив;
	
	ПараметрыРегистрации = ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке("2.2.2.1");
	ПараметрыРегистрации.Вид          = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительныйОтчет();
	ПараметрыРегистрации.Наименование = Метаданные().Представление() + " (дополнительный)";
	ПараметрыРегистрации.Версия       = Метаданные().Комментарий;
	ПараметрыРегистрации.Назначение   = МассивНазначений;
	ПараметрыРегистрации.БезопасныйРежим = Истина;
	
	ДобавитьКоманду(ПараметрыРегистрации.Команды, ПараметрыРегистрации.Наименование, ПараметрыРегистрации.Наименование, ДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы(), Истина, "ПечатьMXL");
		
	Возврат ПараметрыРегистрации;	
		
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
	
	НоваяКоманда = ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление = Представление;
	НоваяКоманда.Идентификатор = Идентификатор;
	НоваяКоманда.Использование = Использование;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
	НоваяКоманда.Модификатор = Модификатор;
	
КонецПроцедуры

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДокументРезультат.Очистить();
	
	ДатаПУ22 = Константы.ДатаПереходаНаПартионныйУчетВерсии22.Получить();
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ДатаПУ22", ДатаПУ22);
	
	Период = КомпоновщикНастроек.ПолучитьНастройки().ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период")).Значение;
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("Себестоимость", ПолучитьТаблицуДанных(Период));
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(), ДанныеРасшифровки);
		
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки, Истина);
		
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
		
	ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
	
КонецПроцедуры

Функция ПолучитьТаблицуДанных(Период)
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("Организация");
	ТаблицаДанных.Колонки.Добавить("ПериодМесяц");
	ТаблицаДанных.Колонки.Добавить("Раздел");
	ТаблицаДанных.Колонки.Добавить("Группа");
	ТаблицаДанных.Колонки.Добавить("Статья");
	ТаблицаДанных.Колонки.Добавить("Сумма");
	ТаблицаДанных.Колонки.Добавить("Количество");
	
	Таблица = СформироватьТаблицуСебестоимости(Период);
	
	НоменклутараОтходы = Справочники.Номенклатура.НайтиПоНаименованию("3. Отходы");
	
	Для каждого СтрокаИсточника Из Таблица Цикл
		
		Если СтрокаИсточника.ЭтоПолуфабрикат
			ИЛИ СтрокаИсточника.СтоимостьЗатрат <= 0
			ИЛИ СтрокаИсточника.Затрата.ПринадлежитЭлементу(НоменклутараОтходы) Тогда
			Продолжить;
		КонецЕсли;	
		
		НоваяСтрока = ТаблицаДанных.Добавить();
		НоваяСтрока.Раздел      = "Себестоимость " + Строка(СтрокаИсточника.Продукция);
		НоваяСтрока.Организация = СтрокаИсточника.Организация;
		НоваяСтрока.ПериодМесяц = СтрокаИсточника.Месяц;
		НоваяСтрока.Группа      = СтрокаИсточника.Затрата.Родитель;
		НоваяСтрока.Статья      = СтрокаИсточника.Затрата;
		НоваяСтрока.Сумма       = СтрокаИсточника.СтоимостьЗатрат;
		НоваяСтрока.Количество  = СтрокаИсточника.КоличествоЗатрат;
		
	КонецЦикла;
	
	Возврат ТаблицаДанных;
	
КонецФункции	

Функция СформироватьТаблицуСебестоимости(Период)
	
	Данные = ПолучитьДанныеСебестоимостиВыпуска(Период);
	
	Для каждого СтрокаТЗ из Данные Цикл
		СтрокаТЗ.КоличествоЗатрат = ЕстьNULL(СтрокаТЗ.КоличествоЗатрат, 0);
		СтрокаТЗ.СтоимостьЗатрат  = ЕстьNULL(СтрокаТЗ.СтоимостьЗатрат, 0);
	КонецЦикла;	
	
	СписокПродукции = Новый СписокЗначений;
	СписокПродукции.Добавить(Справочники.Номенклатура.НайтиПоНаименованию("ФК (FW)"));        //ЛФ
	СписокПродукции.Добавить(Справочники.Номенклатура.НайтиПоНаименованию("Латофлекс (BS)")); //ФК
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Продукция", СписокПродукции);
	
	КлючевыеПоля = "Продукция, Месяц, Организация";
	
	ТаблицаКоличествоВыпускаПродукции = ПолучитьТаблицуКоличествоПродукции(Период);
	ТаблицаКоличествоВыпускаПродукции.Индексы.Добавить(КлючевыеПоля);
	
	ИтоговаяТаблица = РазвернутьПолуфабрикаты(Данные, СтруктураОтбора, ТаблицаКоличествоВыпускаПродукции, КлючевыеПоля, Ложь);
	
	ТаблицаКоличествоПроданнойПродукции = ПолучитьТаблицуКоличествоПроданнойПродукции(Период, СписокПродукции);
	
	СтруктураОтбора = Новый Структура(КлючевыеПоля);
	Для каждого СтрокаТЗ из ИтоговаяТаблица Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаТЗ);
		
		СтрокиВыпуск     = ТаблицаКоличествоВыпускаПродукции.НайтиСтроки(СтруктураОтбора);
		СтрокиРеализация = ТаблицаКоличествоПроданнойПродукции.НайтиСтроки(СтруктураОтбора);
		
		СтрокаТЗ.КоличествоЗатрат = Окр(СтрокаТЗ.КоличествоЗатрат * СтрокиРеализация[0].КоличествоПродукции / СтрокиВыпуск[0].КоличествоПродукции, 3);
		СтрокаТЗ.СтоимостьЗатрат  = Окр(СтрокаТЗ.СтоимостьЗатрат * СтрокиРеализация[0].КоличествоПродукции / СтрокиВыпуск[0].КоличествоПродукции, 2);
		
	КонецЦикла;	
	
	Возврат ИтоговаяТаблица;
	
КонецФункции

Функция ПолучитьДанныеСебестоимостиВыпуска(Период)
	
	СхемаСКД = ПолучитьМакет("СКД_Себестоимость");
	НастройкиПоУмолчанию = СхемаСКД.ВариантыНастроек.ДанныеБезХарактеристик.Настройки;
	
	НастройкиПоУмолчанию.ПараметрыДанных.УстановитьЗначениеПараметра("Период", Период);
	
	РазрешенныйОтбор = Новый Соответствие;
	РазрешенныйОтбор.Вставить("Организация",       Истина);
	
	Для каждого Элемент из КомпоновщикНастроек.ПолучитьНастройки().Отбор.Элементы Цикл
		
		Если РазрешенныйОтбор[Строка(Элемент.ЛевоеЗначение)] = Истина Тогда
			
			НовыйЭлемент = НастройкиПоУмолчанию.Отбор.Элементы.Добавить(ТипЗнч(Элемент));	
			ЗаполнитьЗначенияСвойств(НовыйЭлемент, Элемент);
			
		КонецЕсли;
		
	КонецЦикла;	
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;    
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаСКД, НастройкиПоУмолчанию,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных,,, Истина);	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	Возврат ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
КонецФункции

Функция РазвернутьПолуфабрикаты(Данные, СтруктураОтбора, ТаблицаКоличествоПродукции, КлючевыеПоля, УчитыватьХарактеристики)
	
	Данные.Колонки.Добавить("ЭтоПолуфабрикат", Новый ОписаниеТипов("Булево"));
	Данные.Колонки.Добавить("Полуфабрикат",    Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Данные.Колонки.Добавить("ХарактеристикаПолуфабриката", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	
	Данные.Индексы.Добавить(КлючевыеПоля);

	МассивТаблиц = Новый Массив;

	ТаблицаДляРазвертки =  ОтобратьДанныеПоСписку(Данные, СтруктураОтбора);
	МассивТаблиц.Добавить(ТаблицаДляРазвертки);
	
	Счетчик = 0;
	Пока Истина Цикл
		
		ТаблицаДляРазвертки = РазвернутьУровеньПолуфабрикатов(Данные, ТаблицаДляРазвертки, ТаблицаКоличествоПродукции, КлючевыеПоля, УчитыватьХарактеристики);
		
		Если ТаблицаДляРазвертки.Количество() > 0 Тогда
			МассивТаблиц.Добавить(ТаблицаДляРазвертки);
		Иначе
			Прервать;
		КонецЕсли;	
		
		Счетчик = Счетчик + 1;
		Если Счетчик > 15 Тогда
			Прервать;
		Конецесли;	
		
	КонецЦикла;	
	
	ИтоговаяТаблица = Данные.СкопироватьКолонки();
	Для каждого ТаблицаДляРазвертки из МассивТаблиц Цикл
		ОбщегоНазначенияУТ.ДобавитьСтрокиВТаблицу(ИтоговаяТаблица, ТаблицаДляРазвертки);
	КонецЦикла;	
	
	Возврат ИтоговаяТаблица;
	
КонецФункции	

Функция РазвернутьУровеньПолуфабрикатов(ИсходныеДанные, ТаблицаДляРазвертки, ТаблицаКоличествоПродукции, ПоляОтбора, УчитыватьХарактеристики)
	
	ДанныеПоПолуфабрикатам = ИсходныеДанные.СкопироватьКолонки();
	
	СтруктураОтбора = Новый Структура(ПоляОтбора);
	
	Для каждого СтрокаТЗ из ТаблицаДляРазвертки Цикл
		
		Если ТипЗнч(СтрокаТЗ.Затрата) <> Тип("СправочникСсылка.Номенклатура") Тогда
			Продолжить;
		КонецЕсли;	
		
		Если Абс(СтрокаТЗ.КоличествоЗатрат) < 0.001
			//И Абс(СтрокаТЗ.СтоимостьЗатрат) < 0.01 
			Тогда
			Продолжить;
		КонецЕсли;	
		
		СтруктураОтбора.Организация             = СтрокаТЗ.Организация;
		СтруктураОтбора.Продукция               = СтрокаТЗ.Затрата;
		СтруктураОтбора.Месяц                   = СтрокаТЗ.Месяц;
		Если УчитыватьХарактеристики Тогда
			СтруктураОтбора.ХарактеристикаПродукции = СтрокаТЗ.ХарактеристикаЗатраты;
		КонецЕсли;	
		
		СтрокиИсходныеДанные = ИсходныеДанные.НайтиСтроки(СтруктураОтбора);
		Если СтрокиИсходныеДанные.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТЗ.ЭтоПолуфабрикат = Истина;
		КоличествоПФ = СтрокаТЗ.КоличествоЗатрат;
		
		СтрокиПродукция = ТаблицаКоличествоПродукции.НайтиСтроки(СтруктураОтбора);
		Если СтрокиПродукция.Количество() > 0 Тогда
			КоличествоПродукции = СтрокиПродукция[0].КоличествоПродукции;
		Иначе	
			КоличествоПродукции = 0;
		КонецЕсли;	
		
		Если КоличествоПродукции = 0 Тогда
			Продолжить;
		КонецЕсли;	
		
		Для каждого Строка2 из СтрокиИсходныеДанные Цикл
			
			КоличествоЗатрат    = Строка2.КоличествоЗатрат;
			СтоимостьЗатрат     = Строка2.СтоимостьЗатрат;
			
			КоличествоЗатратНовый = Окр(КоличествоПФ * (КоличествоЗатрат / КоличествоПродукции), 3);
			СтоимостьЗатратНовый  = Окр(КоличествоПФ * (СтоимостьЗатрат / КоличествоПродукции), 2);
			
			Если КоличествоЗатратНовый = 0 
				И СтоимостьЗатратНовый = 0 Тогда
				Продолжить;
			КонецЕсли;	
			
			НоваяСтрока = ДанныеПоПолуфабрикатам.Добавить();
			НоваяСтрока.Месяц                       = СтрокаТЗ.Месяц;
			НоваяСтрока.Организация                 = СтрокаТЗ.Организация;
			НоваяСтрока.Продукция                   = СтрокаТЗ.Продукция;
			
			НоваяСтрока.Полуфабрикат                = СтрокаТЗ.Затрата;
			
			НоваяСтрока.СтатьяКалькуляции     = Строка2.СтатьяКалькуляции;
			НоваяСтрока.Затрата               = Строка2.Затрата;
			
			НоваяСтрока.КоличествоЗатрат = КоличествоЗатратНовый;
			НоваяСтрока.СтоимостьЗатрат  = СтоимостьЗатратНовый;
			
			Если УчитыватьХарактеристики Тогда
				НоваяСтрока.ХарактеристикаПродукции     = СтрокаТЗ.ХарактеристикаПродукции;
				НоваяСтрока.ХарактеристикаПолуфабриката = СтрокаТЗ.ХарактеристикаЗатраты;
				НоваяСтрока.ХарактеристикаЗатраты = Строка2.ХарактеристикаЗатраты;
			КонецЕсли;	
			
		КонецЦикла;	
		
	КонецЦикла;	
	
	Возврат ДанныеПоПолуфабрикатам;
	
КонецФункции

Функция ПолучитьТаблицуКоличествоПроданнойПродукции(Период, СписокПродукции)
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Дата1",  Период.ДатаНачала);
	Запрос.Параметры.Вставить("Дата2",  Период.ДатаОкончания);
	Запрос.Параметры.Вставить("СписокПродукции",  СписокПродукции);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ДокТовары.Ссылка.Дата, МЕСЯЦ) КАК Месяц,
	|	ДокТовары.Ссылка.Организация,
	|	ДокТовары.Номенклатура КАК Продукция,
	|	СУММА(ДокТовары.Количество) КАК КоличествоПродукции
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК ДокТовары
	|ГДЕ
	|	ДокТовары.Ссылка.Дата МЕЖДУ &Дата1 И &Дата2
	|	И ДокТовары.Ссылка.Проведен
	|	И ДокТовары.Номенклатура В(&СписокПродукции)
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ДокТовары.Ссылка.Дата, МЕСЯЦ),
	|	ДокТовары.Номенклатура,
	|	ДокТовары.Ссылка.Организация";
	
	Таблица = Запрос.Выполнить().Выгрузить();
	Возврат Таблица;
	
КонецФункции

Функция ПолучитьТаблицуКоличествоПродукции(Период)
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Дата1",  Период.ДатаНачала);
	Запрос.Параметры.Вставить("Дата2",  Период.ДатаОкончания);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЛОЖЬ КАК ЭтоПолуфабрикат,
	|	Выпуск.Период КАК Месяц,
	|	Выпуск.Организация,
	|	Выпуск.АналитикаУчетаНоменклатуры.Номенклатура КАК Продукция,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК ХарактеристикаПродукции,
	|	СУММА(Выпуск.КоличествоОборот) КАК КоличествоПродукции
	|ИЗ
	|	РегистрНакопления.ВыпускПродукции.Обороты(&Дата1, &Дата2, Месяц, ) КАК Выпуск
	|
	|СГРУППИРОВАТЬ ПО
	|	Выпуск.Период,
	|	Выпуск.Организация,
	|	Выпуск.АналитикаУчетаНоменклатуры.Номенклатура";
	
	Таблица = Запрос.Выполнить().Выгрузить();
	Возврат Таблица;
	
КонецФункции	

Функция ОтобратьДанныеПоСписку(Таблица, СтруктураОтбора)
	
	НоваяТаблица = Таблица.СкопироватьКолонки();
	Для каждого СтрокаТЗ из Таблица Цикл
		
		Результат = Истина;
		Для каждого КлючИЗначение из СтруктураОтбора Цикл
			
			Если ТипЗнч(КлючИЗначение.Значение) = Тип("СписокЗначений") Тогда
				Результат = (КлючИЗначение.Значение.НайтиПоЗначению(СтрокаТЗ[КлючИЗначение.Ключ]) <> Неопределено)
			Иначе	
				Результат = (КлючИЗначение.Значение = СтрокаТЗ[КлючИЗначение.Ключ]);
			КонецЕсли;	
			
			Если НЕ Результат Тогда
				Прервать;
			КонецЕсли;	
			
		КонецЦикла;
		
		Если НЕ Результат Тогда
			Продолжить;
		КонецЕсли;	
		
		НоваяСтрока = НоваяТаблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
		
	КонецЦикла;	
	
	Возврат НоваяТаблица;
	
КонецФункции

Функция ЕстьNULL(Знач Парам, Знач ЗначениеПоУмолчанию) Экспорт
	
	Возврат ?(ЗначениеЗаполнено(Парам) , Парам, ЗначениеПоУмолчанию);
	
КонецФункции

Функция Абс(Знач Парам) Экспорт
	
	Возврат ?(Парам > 0, Парам, -Парам);
	
КонецФункции
