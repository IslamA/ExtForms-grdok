
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СписокСмен.Добавить(Справочники._Смены.НайтиПоНаименованию("Ночная"));
	СписокСмен.Добавить(Справочники._Смены.НайтиПоНаименованию("Дневная"));
	
	СписокГруппБригад.Добавить(Справочники.Бригады.НайтиПоНаименованию("Бригада №1"));
	СписокГруппБригад.Добавить(Справочники.Бригады.НайтиПоНаименованию("Бригада №2"));
	СписокГруппБригад.Добавить(Справочники.Бригады.НайтиПоНаименованию("Бригада №3"));
	СписокГруппБригад.Добавить(Справочники.Бригады.НайтиПоНаименованию("Бригада №4"));
	
	ОтображатьРазницу  = Истина;
	ПересчитыватьЛисты = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ПодразделениеПриИзмененииНаСервере();
	
	Элементы.ТаблицаДанныхКоличествоЛистовИтого.Видимость = ПланироватьВЛистах;
	Элементы.ТаблицаДанныхКоличествоЛистовОстаток.Видимость = ПланироватьВЛистах;
	Элементы.ТаблицаДанныхКоличествоЛистовРазница.Видимость = ПланироватьВЛистах;
	
	Элементы.ТаблицаДанныхГруппаРазница.Видимость = ОтображатьРазницу;
	Элементы.ПересчитыватьЛисты.Видимость = ПланироватьВЛистах;
	
КонецПроцедуры

#КонецОбласти

&НаСервереБезКонтекста
Функция ПолучитьМассивЗакзов(Подразделение)
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Подразделение", Подразделение);
	Запрос.Параметры.Вставить("Статус",        Перечисления.СтатусыЗаказовНаПроизводство.КПроизводству);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЭтапыПроизводства.Распоряжение
	|ИЗ
	|	РегистрНакопления.ЭтапыПроизводства КАК ЭтапыПроизводства
	|ГДЕ
	|	ЭтапыПроизводства.Подразделение = &Подразделение
	|	И ЭтапыПроизводства.Распоряжение.Статус = &Статус
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭтапыПроизводства.Распоряжение.Дата УБЫВ";
	
	Результат = Запрос.Выполнить();
	Возврат Результат.Выгрузить().ВыгрузитьКолонку("Распоряжение");
	
КонецФункции	

&НаСервереБезКонтекста
Функция ПолучитьБригдау(Родитель, Подразделение)
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Родитель",      Родитель);
	Запрос.Параметры.Вставить("Подразделение", Подразделение);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Бригады.Ссылка
	|ИЗ
	|	Справочник.Бригады КАК Бригады
	|ГДЕ
	|	Бригады.Родитель = &Родитель
	|	И Бригады.Подразделение = &Подразделение
	|	И НЕ Бригады.ПометкаУдаления";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Возврат Результат.Выгрузить()[0][0];
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗаданиеНаСмену(Дата, Смена, Подразделение)
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Дата",          Дата);
	Запрос.Параметры.Вставить("Смена",         Смена);
	Запрос.Параметры.Вставить("Подразделение", Подразделение);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Ссылка
	|ИЗ
	|	Документ._ЗаданиеНаСмену КАК Док
	|ГДЕ
	|	Док.ДатаСмены = &Дата
	|	И Док.Смена = &Смена
	|	И Док.Подразделение = &Подразделение
	|	И НЕ Док.ПометкаУдаления";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Возврат Результат.Выгрузить()[0][0];
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(Дата, Бригада, Подразделение)
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Дата1",         Дата);
	Запрос.Параметры.Вставить("Дата2",         КонецДня(Дата));
	Запрос.Параметры.Вставить("Бригада",       Бригада);
	Запрос.Параметры.Вставить("Подразделение", Подразделение);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Док.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.МаршрутныйЛистПроизводства.Трудозатраты КАК Док
	|ГДЕ
	|	Док.Ссылка.Проведен
	|	И Док.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполнен)
	|	И Док.Ссылка.ФактическоеОкончание МЕЖДУ &Дата1 И &Дата2
	|	И Док.Бригада = &Бригада";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;	
	
КонецФункции	

&НаСервереБезКонтекста
Функция ПолучитьСледЭлемент(Знач Значение, Знач Список)
	
	ЭлементСписка = Список.НайтиПоЗначению(Значение);
	Если ЭлементСписка = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	Индекс = Список.Индекс(ЭлементСписка);
	Индекс = (Индекс + 1) % Список.Количество();
	
	Возврат Новый Структура("Индекс, Значение", Индекс, Список[Индекс]);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИмяКолонки(Дата, Смена)
	
	Возврат "Д_" + Формат(Дата, "ДФ=yyMMdd") + "_" + Лев(Смена, 1);
	
КонецФункции	

&НаКлиенте
Процедура Заполнить(Команда)
	
	Если ТаблицаДанных.Количество() > 0 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьЗаврешение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, "Перезаполнить таблицу?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
		
	Иначе
		ЗаполнитьЗаврешение(КодВозвратаДиалога.Да, Неопределено);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаврешение(Ответ, ДополнительныеПараметры) Экспорт
	
	ЗаполнитьНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере()
	
	ЗаполнитьПериоды();
	СоздатьКолонки();
	ЗаполнитьТаблицу();
	
	Элементы.ТаблицаДанныхКоличествоПлан.ТекстПодвала    = Формат(ТаблицаДанных.Итог("КоличествоПлан"), "ЧДЦ=3");
	Элементы.ТаблицаДанныхКоличествоФакт.ТекстПодвала    = Формат(ТаблицаДанных.Итог("КоличествоФакт"), "ЧДЦ=3");
	Элементы.ТаблицаДанныхКоличествоОстаток.ТекстПодвала = Формат(ТаблицаДанных.Итог("КоличествоОстаток"), "ЧДЦ=3");
	Элементы.ТаблицаДанныхКоличествоИтого.ТекстПодвала   = Формат(ТаблицаДанных.Итог("КоличествоИтого"), "ЧДЦ=3");
	Элементы.ТаблицаДанныхКоличествоИтого.ТекстПодвала   = Формат(ТаблицаДанных.Итог("КоличествоИтого"), "ЧДЦ=3");
	Элементы.ТаблицаДанныхКоличествоРазница.ТекстПодвала = Формат(ТаблицаДанных.Итог("КоличествоРазница"), "ЧДЦ=3");
	
	Элементы.ТаблицаДанныхКоличествоЛистовОстаток.ТекстПодвала = ТаблицаДанных.Итог("КоличествоЛистовОстаток");
	Элементы.ТаблицаДанныхКоличествоЛистовИтого.ТекстПодвала   = ТаблицаДанных.Итог("КоличествоЛистовИтого");
	Элементы.ТаблицаДанныхКоличествоЛистовРазница.ТекстПодвала = ТаблицаДанных.Итог("КоличествоЛистовРазница");
	
	ЕстьНазначение = Ложь;
	Для каждого СтрокаТЗ из ТаблицаДанных Цикл
		
		Если ЗначениеЗаполнено(СтрокаТЗ.Назначение) Тогда
			ЕстьНазначение = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;	
	
	Элементы.ТаблицаДанныхНоменклатура.Видимость = ОтображатьНоменклатуру;
	Элементы.ТаблицаДанныхНазначение.Видимость   = ЕстьНазначение;
	
	Элементы.ФормаСоздатьЗаданияНаСмену.КнопкаПоУмолчанию = Истина;
	Элементы.ТаблицаДанныхДобавитьСмену.Доступность = Истина;
	Элементы.ТаблицаДанныхПересчитатьСмены.Доступность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПериоды()
	
	Периоды.Очистить();
	
	ТекДата  = Объект.Период.ДатаНачала;
	ПредБригада = Неопределено;
	
	Пока ТекДата <= Объект.Период.ДатаОкончания Цикл
		
		Для каждого Элемент из СписокСмен Цикл
			
			ЗаданиеНаСмену = ПолучитьЗаданиеНаСмену(ТекДата, Элемент.Значение, Объект.Подразделение);
			Если ЗначениеЗаполнено(ЗаданиеНаСмену) Тогда
				
				Бригада = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаданиеНаСмену, "Бригада");
				Если ЗаданиеВыполнено(ТекДата, Бригада, Объект.Подразделение) Тогда
					Продолжить;
				КонецЕсли;
				
			Иначе
				
				Если ЗначениеЗаполнено(ПредБригада) Тогда
					
					Бригада = ПолучитьБригдау(ПолучитьСледЭлемент(ПредБригада.Родитель, СписокГруппБригад).Значение, Объект.Подразделение);
					ПредБригада = Бригада;
						
				КонецЕсли;
				
			КонецЕсли;	
			
			НоваяСтрока = Периоды.Добавить();
			НоваяСтрока.Дата  = ТекДата;
			НоваяСтрока.Смена = Элемент.Значение;
			НоваяСтрока.ИмяКолонки = ПолучитьИмяКолонки(НоваяСтрока.Дата, НоваяСтрока.Смена);
			НоваяСтрока.ЗаданиеНаСмену = ЗаданиеНаСмену;
			НоваяСтрока.Бригада = Бригада;
			
		КонецЦикла;	
		
		ТекДата = ТекДата + 86400;
	
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура СоздатьКолонки()
	
	МассивРеквизитов = ЭтаФорма.ПолучитьРеквизиты("ТаблицаДанных");
	УдаляемыеРеквизиты = Новый Массив;
	Для каждого Реквизит из МассивРеквизитов Цикл
		Если СтрНачинаетсяС(Реквизит.Имя, "Д_") Тогда 
			УдаляемыеРеквизиты.Добавить("ТаблицаДанных." + Реквизит.Имя);
		КонецЕсли;	
	КонецЦикла;	
	
	ДобавляемыеРеквизиты = Новый Массив;
	
	Для каждого СтрокаТЗ из Периоды Цикл
		
		НовыйРеквизит = Новый РеквизитФормы(СтрокаТЗ.ИмяКолонки, ОбщегоНазначения.ОписаниеТипаЧисло(15, 3, ДопустимыйЗнак.Неотрицательный), "ТаблицаДанных", Лев(СтрокаТЗ.Смена, 1), Ложь);
		ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
			
		НовыйРеквизит = Новый РеквизитФормы(СтрокаТЗ.ИмяКолонки + "_Л", ОбщегоНазначения.ОписаниеТипаЧисло(15, 0, ДопустимыйЗнак.Неотрицательный), "ТаблицаДанных", Лев(СтрокаТЗ.Смена, 1) + "л", Ложь);
		ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
		
	КонецЦикла;	
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты, УдаляемыеРеквизиты);
	
	ЭлементыКУдалению = Новый Массив;
	Для каждого Элемент из Элементы Цикл
		
		Если СтрНачинаетсяС(Элемент.Имя, "Группа_Д_")
			И СтрНайти(Элемент.Имя, "РасширеннаяПодсказка") = 0 Тогда
			ЭлементыКУдалению.Добавить(Элемент);
		КонецЕсли;	
		
	КонецЦикла;	
	
	Для каждого Элемент из ЭлементыКУдалению Цикл
		Элементы.Удалить(Элемент);
	КонецЦикла;	
	
	ПредТекДата = '0001-01-01';
	Для каждого СтрокаТЗ из Периоды Цикл
		
		ТекДата = СтрокаТЗ.Дата;
		Если ТекДата <> ПредТекДата Тогда
			
			Группа = Элементы.Вставить("Группа_Д_" + Формат(ТекДата, "ДФ=MMdd"), Тип("ГруппаФормы"), Элементы.ТаблицаДанных, );
			Группа.Вид              = ВидГруппыФормы.ГруппаКолонок;
			Группа.Заголовок        = Формат(ТекДата, "ДФ=dd.MM");
			Группа.ОтображатьВШапке = Истина;
			Группа.Группировка      = ГруппировкаКолонок.Горизонтальная;
			Группа.ГоризонтальноеПоложениеВШапке   = ГоризонтальноеПоложениеЭлемента.Центр;
			
			ПредТекДата = ТекДата;
			
		КонецЕсли;	
		
		СоздатьЭлементыПоПериоду(СтрокаТЗ, Группа);
		
	КонецЦикла;	
	
КонецПроцедуры	

&НаСервере
Процедура СоздатьЭлементыПоПериоду(СтрокаТЗ, Группа)
	
	Элемент = Элементы.Вставить(СтрокаТЗ.ИмяКолонки, Тип("ПолеФормы"), Группа);
	Элемент.Вид         = ВидПоляФормы.ПолеВвода;
	Элемент.ПутьКДанным = "ТаблицаДанных." + СтрокаТЗ.ИмяКолонки;
	Элемент.ОтображатьВПодвале = Истина;
	Элемент.Ширина      = 5;
	Элемент.КнопкаВыбора = Ложь;
	Элемент.ОтображатьВПодвале = Истина;
	Элемент.УстановитьДействие("ПриИзменении", "КоличествоПриИзменении");
	Элемент.ГоризонтальноеПоложениеВШапке   = ГоризонтальноеПоложениеЭлемента.Центр;
	Элемент.ГоризонтальноеПоложениеВПодвале = ГоризонтальноеПоложениеЭлемента.Право;
	Элемент.ШрифтПодвала = Новый Шрифт(,, Истина);
	Элемент.Видимость    = ПланироватьВМ3;
	
	Элемент = Элементы.Вставить(СтрокаТЗ.ИмяКолонки + "_Л", Тип("ПолеФормы"), Группа);
	Элемент.Вид         = ВидПоляФормы.ПолеВвода;
	Элемент.ПутьКДанным = "ТаблицаДанных." + СтрокаТЗ.ИмяКолонки + "_Л";
	Элемент.ОтображатьВПодвале = Истина;
	Элемент.Ширина      = 5;
	Элемент.КнопкаВыбора = Ложь;
	Элемент.ОтображатьВПодвале = Истина;
	Элемент.УстановитьДействие("ПриИзменении", "КоличествоЛистовПриИзменении");
	Элемент.ГоризонтальноеПоложениеВШапке   = ГоризонтальноеПоложениеЭлемента.Центр;
	Элемент.ГоризонтальноеПоложениеВПодвале = ГоризонтальноеПоложениеЭлемента.Право;
	//Элемент.ШрифтПодвала = Новый Шрифт(,, Истина);
	Элемент.Видимость    = ПланироватьВЛистах;
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьТаблицу()
	
	ТаблицаЗаказа = _ЗаказНаПроизводство.НевыполненнаяПродукция(Объект.ЗаказНаПроизводство, Объект.Подразделение);
	
	ТаблицаДанных.Загрузить(ТаблицаЗаказа);
	Для каждого СтрокаТЗ из ТаблицаДанных Цикл
		
		СтрокаТЗ.КоличествоЛистовОстаток = _ОбщегоНазначенияДоп.ПолучитьКоличествоЛистов(СтрокаТЗ.Характеристика, СтрокаТЗ.КоличествоОстаток);
		
	КонецЦикла;	
	
	СтруктураОтбора = Новый Структура("Номенклатура, Характеристика, Назначение");
	
	Для каждого СтрокаТЗ из Периоды Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЗ.ЗаданиеНаСмену) Тогда
			Продолжить;
		КонецЕсли;	
		
		Для каждого СтрокаЗададание из СтрокаТЗ.ЗаданиеНаСмену.Продукция Цикл
			
			Если СтрокаЗададание.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаЗададание);
			НайденныеСтроки = ТаблицаДанных.НайтиСтроки(СтруктураОтбора);
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				СтрокаТЧДанные = НайденныеСтроки[0];
				СтрокаТЧДанные[СтрокаТЗ.ИмяКолонки] = СтрокаЗададание.Количество;
				СтрокаТЧДанные[СтрокаТЗ.ИмяКолонки + "_Л"] = СтрокаЗададание.КоличествоЛистов;
				
				СтрокаТЧДанные.КоличествоИтого = СтрокаТЧДанные.КоличествоИтого + СтрокаЗададание.Количество; 
				СтрокаТЧДанные.КоличествоЛистовИтого = СтрокаТЧДанные.КоличествоЛистовИтого + СтрокаЗададание.КоличествоЛистов; 
				
				СтрокаТЧДанные.КоличествоРазница = _ОбщегоНазначенияДоп.Абс(СтрокаТЧДанные.КоличествоОстаток - СтрокаТЧДанные.КоличествоИтого);
				СтрокаТЧДанные.КоличествоЛистовРазница = _ОбщегоНазначенияДоп.Абс(СтрокаТЧДанные.КоличествоЛистовОстаток - СтрокаТЧДанные.КоличествоЛистовИтого);
				
			КонецЕсли;	
			
		КонецЦикла;	
		
		СтрокаТЗ.Количество       = ТаблицаДанных.Итог(СтрокаТЗ.ИмяКолонки);
		СтрокаТЗ.КоличествоЛистов = ТаблицаДанных.Итог(СтрокаТЗ.ИмяКолонки + "_Л");
		
		Элементы[СтрокаТЗ.ИмяКолонки].ТекстПодвала = Формат(СтрокаТЗ.Количество, "ЧДЦ=3");
		Элементы[СтрокаТЗ.ИмяКолонки + "_Л"].ТекстПодвала = СтрокаТЗ.КоличествоЛистов;
		
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ПодразделениеПриИзмененииНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Подразделение", Объект.Подразделение);
	Запрос.Параметры.Вставить("Статус",        Перечисления.СтатусыЗаказовНаПроизводство.КПроизводству);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭтапыПроизводства.Распоряжение
	|ИЗ
	|	РегистрНакопления.ЭтапыПроизводства КАК ЭтапыПроизводства
	|ГДЕ
	|	ЭтапыПроизводства.Подразделение = &Подразделение
	|	И ЭтапыПроизводства.Распоряжение.Статус = &Статус
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭтапыПроизводства.Распоряжение.Дата УБЫВ";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		
		Объект.ЗаказНаПроизводство = Результат.Выгрузить()[0][0];
		РассчитатьПериод();
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	ПодразделениеПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаказНаПроизводствоПриИзменении(Элемент)
	
	РассчитатьПериод();
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьПериод()
	
	// Период по заказу
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Заказ", Объект.ЗаказНаПроизводство);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ДокПродукция.НачатьНеРанее) КАК Дата1,
	|	МАКСИМУМ(ДокПродукция.ДатаПотребности) КАК Дата2
	|ИЗ
	|	Документ.ЗаказНаПроизводство.Продукция КАК ДокПродукция
	|ГДЕ
	|	ДокПродукция.Ссылка = &Заказ";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		
		СтрокаТЧ = Результат.Выгрузить()[0];
		Объект.Период.ДатаНачала    = СтрокаТЧ.Дата1;
		Объект.Период.ДатаОкончания = Мин(СтрокаТЧ.Дата2, СтрокаТЧ.Дата1 + 10*86400);
		
	КонецЕсли;	
	
	// Последний введенный маршрутный лист
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МАКСИМУМ(Док.ФактическоеОкончание) КАК ФактическоеОкончание
	|ИЗ
	|	Документ.МаршрутныйЛистПроизводства КАК Док
	|ГДЕ
	|	Док.Проведен
	|	И Док.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполнен)
	|	И Док.Распоряжение = &Заказ";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		
		СтрокаТЧ = Результат.Выгрузить()[0];
		Объект.Период.ДатаНачала = СтрокаТЧ.ФактическоеОкончание;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаДанных.ТекущиеДанные;
	РассчитатьИтогиКоличество(Элемент);
	
	Если ПересчитыватьЛисты Тогда
		ИмяКолонкиЛисты = Элемент.Имя + "_Л";
		ТекущиеДанные[ИмяКолонкиЛисты] = _ОбщегоНазначенияДоп.ПолучитьКоличествоЛистов(ТекущиеДанные.Характеристика, ТекущиеДанные[Элемент.Имя]);
		РассчитатьИтогиКоличествоЛистов(Элементы[ИмяКолонкиЛисты]);
	КонецЕсли;	
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоЛистовПриИзменении(Элемент)
	
	РассчитатьИтогиКоличествоЛистов(Элемент);
	
	ТекущиеДанные = Элементы.ТаблицаДанных.ТекущиеДанные;
	
	ИмяКолонкиМ3 = Сред(Элемент.Имя, 1, СтрДлина(Элемент.Имя) - 2);
	ТекущиеДанные[ИмяКолонкиМ3] = _ОбщегоНазначенияДоп.ПолучитьКоличествоПоКоличествуЛистов(ТекущиеДанные.Характеристика, ТекущиеДанные[Элемент.Имя]);
	
	РассчитатьИтогиКоличество(Элементы[ИмяКолонкиМ3]);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьИтогиКоличество(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаДанных.ТекущиеДанные;
	СтрокаПериоды = Неопределено;
	
	КоличествоИтого = 0;
	Для каждого СтрокаТЗ из Периоды Цикл
		
		КоличествоИтого = КоличествоИтого + ТекущиеДанные[СтрокаТЗ.ИмяКолонки];
		Если СтрокаТЗ.ИмяКолонки = Элемент.Имя Тогда
			СтрокаПериоды = СтрокаТЗ;
		КонецЕсли;	
		
	КонецЦикла;	
	
	ТекущиеДанные.КоличествоИтого = КоличествоИтого;
	ТекущиеДанные.КоличествоРазница = _ОбщегоНазначенияДоп.Абс(ТекущиеДанные.КоличествоОстаток - КоличествоИтого);
	
	СтрокаПериоды.Количество = ТаблицаДанных.Итог(Элемент.Имя);
	Элемент.ТекстПодвала = СтрокаПериоды.Количество;
	
	Элементы.ТаблицаДанныхКоличествоИтого.ТекстПодвала   = ТаблицаДанных.Итог("КоличествоИтого");
	Элементы.ТаблицаДанныхКоличествоРазница.ТекстПодвала = ТаблицаДанных.Итог("КоличествоРазница");
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьИтогиКоличествоЛистов(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаДанных.ТекущиеДанные;
	СтрокаПериоды = Неопределено;
	
	КоличествоИтого = 0;
	Для каждого СтрокаТЗ из Периоды Цикл
		
		КоличествоИтого = КоличествоИтого + ТекущиеДанные[СтрокаТЗ.ИмяКолонки + "_Л"];
		Если СтрокаТЗ.ИмяКолонки + "_Л" = Элемент.Имя Тогда
			СтрокаПериоды = СтрокаТЗ;
		КонецЕсли;
		
	КонецЦикла;	
	
	ТекущиеДанные.КоличествоЛистовИтого = КоличествоИтого;
	ТекущиеДанные.КоличествоЛистовРазница = _ОбщегоНазначенияДоп.Абс(ТекущиеДанные.КоличествоЛистовОстаток - КоличествоИтого);
	
	СтрокаПериоды.КоличествоЛистов = ТаблицаДанных.Итог(Элемент.Имя);
	Элемент.ТекстПодвала = СтрокаПериоды.КоличествоЛистов;
	
	Элементы.ТаблицаДанныхКоличествоЛистовИтого.ТекстПодвала   = ТаблицаДанных.Итог("КоличествоЛистовИтого");
	Элементы.ТаблицаДанныхКоличествоЛистовРазница.ТекстПодвала = ТаблицаДанных.Итог("КоличествоЛистовРазница");
	
КонецПроцедуры


&НаКлиенте
Процедура ЗаказНаПроизводствоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МассивЗаказов = ПолучитьМассивЗакзов(Объект.Подразделение);
	ДанныеВыбора = Новый СписокЗначений;
	ДанныеВыбора.ЗагрузитьЗначения(МассивЗаказов);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказНаПроизводствоНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДанныхПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьБригаду(Команда)
	
	ТекущиеДанные = Элементы.Периоды.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Бригада) Тогда
		
		Сообщить("Не выбрана бригада");
		Возврат;
		
	КонецЕсли;	
	
	ЗаполнитьБригадуСервер(ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьБригадуСервер(ИДСтроки)
	
	СтрокаТЗ = Периоды.НайтиПоИдентификатору(ИДСтроки);
	ПерваяСтрока = Периоды.Индекс(СтрокаТЗ) + 1;
	
	Индекс = ПолучитьСледЭлемент(СтрокаТЗ.Бригада.Родитель, СписокГруппБригад).Индекс;
	
	Для Счетчик = ПерваяСтрока По Периоды.Количество() - 1 Цикл
		
		Бригада = ПолучитьБригдау(СписокГруппБригад[Индекс].Значение, Объект.Подразделение);
		
		СтрокаТЗ = Периоды[Счетчик];
		СтрокаТЗ.Бригада = Бригада;
		
		Индекс = (Индекс + 1) % 4;
		
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗаданияНаСмену(Команда)
	
	ЕстьНеуказанныеБригады = Ложь;
	Для каждого СтрокаТЗ из Периоды Цикл
		
		Если ТаблицаДанных.Итог(СтрокаТЗ.ИмяКолонки) > 0
			И НЕ ЗначениеЗаполнено(СтрокаТЗ.Бригада) Тогда
			
			Индекс = Периоды.Индекс(СтрокаТЗ);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Не указана бигада",
				,
				"Периоды[" + Формат(Индекс, "ЧГ=0") + "].Бригада");
				
			Возврат;
			
		КонецЕсли;
		
	КонецЦикла;	
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьЗаданияНаСменуЗаврешение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, "Создать/обновить задания на смену?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗаданияНаСменуЗаврешение(Ответ, ДопоплнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;	
	
	СоздатьЗаданияНаСменуНаСервере();
	Состояние("Задания сформированы");
	
КонецПроцедуры

&НаСервере
Процедура СоздатьЗаданияНаСменуНаСервере()
	
	НачатьТранзакцию();
	
	Для каждого СтрокаТЗПериод из Периоды Цикл
		
		Если ТаблицаДанных.Итог(СтрокаТЗПериод.ИмяКолонки) = 0 Тогда
			Продолжить;
		КонецЕсли;	
			
		Если ЗначениеЗаполнено(СтрокаТЗПериод.ЗаданиеНаСмену) Тогда
			ДокументОбъект = СтрокаТЗПериод.ЗаданиеНаСмену.ПолучитьОбъект();
		Иначе	
			ДокументОбъект = Документы._ЗаданиеНаСмену.СоздатьДокумент();
			ДокументОбъект.ДатаСмены     = СтрокаТЗПериод.Дата;
			ДокументОбъект.Смена         = СтрокаТЗПериод.Смена;
			ДокументОбъект.Подразделение = Объект.Подразделение;
		КонецЕсли;	
		
		ДокументОбъект.Бригада = СтрокаТЗПериод.Бригада;
		
		ДокументОбъект.Заказы.Очистить();
		НоваяСтрока = ДокументОбъект.Заказы.Добавить();
		НоваяСтрока.ЗаказНаПроизводство = Объект.ЗаказНаПроизводство;
		
		ДокументОбъект.Продукция.Очистить();
		Для каждого СтрокаТЗПродукция из ТаблицаДанных Цикл
			
			Если СтрокаТЗПродукция[СтрокаТЗПериод.ИмяКолонки] = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ДокументОбъект.Продукция.Добавить();
			НоваяСтрока.КоличествоПлан   = СтрокаТЗПродукция.КоличествоПлан;
			НоваяСтрока.Номенклатура     = СтрокаТЗПродукция.Номенклатура;
			НоваяСтрока.Характеристика   = СтрокаТЗПродукция.Характеристика;
			НоваяСтрока.Назначение       = СтрокаТЗПродукция.Назначение;
			НоваяСтрока.Количество       = СтрокаТЗПродукция[СтрокаТЗПериод.ИмяКолонки];
			НоваяСтрока.КоличествоЛистов = СтрокаТЗПродукция[СтрокаТЗПериод.ИмяКолонки + "_Л"];
			
		КонецЦикла;	
		
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		СтрокаТЗПериод.ЗаданиеНаСмену = ДокументОбъект.Ссылка;
		
	КонецЦикла;	
	
	ЗафиксироватьТранзакцию();
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланироватьВЛистахПриИзменении(Элемент)
	
	Для каждого СтрокаТЗ из Периоды Цикл
		Элементы[СтрокаТЗ.ИмяКолонки + "_Л"].Видимость = ПланироватьВЛистах;
	КонецЦикла;	
	
	Элементы.ТаблицаДанныхКоличествоЛистовИтого.Видимость = ПланироватьВЛистах;
	Элементы.ТаблицаДанныхКоличествоЛистовОстаток.Видимость = ПланироватьВЛистах;
	Элементы.ТаблицаДанныхКоличествоЛистовРазница.Видимость = ПланироватьВЛистах;
	
	Если НЕ ПланироватьВЛистах Тогда
		ПересчитыватьЛисты = Истина;
	КонецЕсли;
	
	Элементы.ПересчитыватьЛисты.Видимость = ПланироватьВЛистах;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланироватьВМ3ПриИзменении(Элемент)
	
	Для каждого СтрокаТЗ из Периоды Цикл
		Элементы[СтрокаТЗ.ИмяКолонки].Видимость = ПланироватьВМ3;
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьНоменклатуруПриИзменении(Элемент)
	
	Элементы.ТаблицаДанныхНоменклатура.Видимость = ОтображатьНоменклатуру;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ПериодыЗаданиеНаСмену" Тогда
		
		СтрокаТЧ = Периоды.НайтиПоИдентификатору(ВыбраннаяСтрока);
		ПоказатьЗначение(, СтрокаТЧ.ЗаданиеНаСмену);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСмену(Команда)
	
	ДобавитьСменуСервер();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСменуСервер()
	
	ПоследняяСтрока = Периоды[Периоды.Количество() - 1];
	
	ЭлементСписка = СписокСмен.НайтиПоЗначению(ПоследняяСтрока.Смена);
	ИндексСмены = (СписокСмен.Индекс(ЭлементСписка) + 1) % СписокСмен.Количество();
	Смена = СписокСмен[ИндексСмены].Значение;
	
	Если ЗначениеЗаполнено(ПоследняяСтрока.Бригада) Тогда
		
		ЭлементСписка = СписокГруппБригад.НайтиПоЗначению(ПоследняяСтрока.Бригада.Родитель);
		Индекс = (СписокГруппБригад.Индекс(ЭлементСписка) + 1) % СписокГруппБригад.Количество();
		Бригада = ПолучитьБригдау(СписокГруппБригад[Индекс].Значение, Объект.Подразделение);
		
	КонецЕсли;	
	
	НоваяСтрока = Периоды.Добавить();
	Если ИндексСмены = 0 Тогда
		НоваяСтрока.Дата = ПоследняяСтрока.Дата + 86400;
	Иначе	
		НоваяСтрока.Дата = ПоследняяСтрока.Дата;
	КонецЕсли;	
	
	НоваяСтрока.Смена   = Смена;
	НоваяСтрока.Бригада = Бригада;
	НоваяСтрока.ИмяКолонки = ПолучитьИмяКолонки(НоваяСтрока.Дата, НоваяСтрока.Смена);
	
	ДобавляемыеРеквизиты = Новый Массив;	
	НовыйРеквизит = Новый РеквизитФормы(НоваяСтрока.ИмяКолонки, ОбщегоНазначения.ОписаниеТипаЧисло(15, 3, ДопустимыйЗнак.Неотрицательный), "ТаблицаДанных", Лев(НоваяСтрока.Смена, 1), Ложь);
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
		
	НовыйРеквизит = Новый РеквизитФормы(НоваяСтрока.ИмяКолонки + "_Л", ОбщегоНазначения.ОписаниеТипаЧисло(15, 0, ДопустимыйЗнак.Неотрицательный), "ТаблицаДанных", Лев(НоваяСтрока.Смена, 1) + "л", Ложь);
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	Если ИндексСмены = 0 Тогда
	
		Группа = Элементы.Вставить("Группа_Д_" + Формат(НоваяСтрока.Дата, "ДФ=MMdd"), Тип("ГруппаФормы"), Элементы.ТаблицаДанных, );
		Группа.Вид              = ВидГруппыФормы.ГруппаКолонок;
		Группа.Заголовок        = Формат(НоваяСтрока.Дата, "ДФ=dd.MM");
		Группа.ОтображатьВШапке = Истина;
		Группа.Группировка      = ГруппировкаКолонок.Горизонтальная;
		Группа.ГоризонтальноеПоложениеВШапке   = ГоризонтальноеПоложениеЭлемента.Центр;
		
	Иначе	
		
		Группа = Элементы.Найти("Группа_Д_" + Формат(НоваяСтрока.Дата, "ДФ=MMdd"));
		
	КонецЕсли;	
	
	СоздатьЭлементыПоПериоду(НоваяСтрока, Группа);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьРазницуПриИзменении(Элемент)
	
	Элементы.ТаблицаДанныхГруппаРазница.Видимость = ОтображатьРазницу;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСмены(Команда)
	
	Если ТаблицаДанных.Итог("КоличествоРазница") > 0 Тогда
	
		ОписаниеОповещения = Новый ОписаниеОповещения("ПересчитатьСменыЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, "Сдвинуть и пересчитать смены?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
		
	Иначе
		
		ПоказатьПредупреждение(, "Нет необходимости пересчитывать смены");
		
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСменыЗавершение(Ответ, ДополнитеьныеПараметры) Экспорт
	
	ПересчитатьСменыСервер();
		
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСменыСервер()
	
		
КонецПроцедуры
