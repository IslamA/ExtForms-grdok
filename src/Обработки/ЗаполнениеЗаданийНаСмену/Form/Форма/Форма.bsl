
&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ПодразделениеПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	Если ТаблицаДанных.Количество() > 0 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьЗаврешение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, "Перезаполнить таблицу?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
		
	Иначе
		ЗаполнитьЗаврешение(КодВозвратаДиалога.Да, Неопределено);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаврешение(Ответ, ДополнительныеПараметры) Экспорт
	
	ЗаполнитьНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере()
	
	ЗаполнитьПериоды();
	СоздатьКолонки();
	ЗаполнитьТаблицу();
	
	Элементы.ТаблицаДанныхКоличествоПлан.ТекстПодвала    = Формат(ТаблицаДанных.Итог("КоличествоПлан"), "ЧДЦ=3");
	Элементы.ТаблицаДанныхКоличествоФакт.ТекстПодвала    = Формат(ТаблицаДанных.Итог("КоличествоФакт"), "ЧДЦ=3");
	Элементы.ТаблицаДанныхКоличествоОстаток.ТекстПодвала = Формат(ТаблицаДанных.Итог("КоличествоОстаток"), "ЧДЦ=3");
	Элементы.ТаблицаДанныхКоличествоИтого.ТекстПодвала   = Формат(ТаблицаДанных.Итог("КоличествоИтого"), "ЧДЦ=3");
	Элементы.ТаблицаДанныхКоличествоЛистовИтого.ТекстПодвала = Формат(ТаблицаДанных.Итог("КоличествоЛистовИтого"), "ЧДЦ=3");
	
	ЕстьНазначение = Ложь;
	Для каждого СтрокаТЗ из ТаблицаДанных Цикл
		
		Если ЗначениеЗаполнено(СтрокаТЗ.Назначение) Тогда
			ЕстьНазначение = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;	
	
	Элементы.ТаблицаДанныхНоменклатура.Видимость = ОтображатьНоменклатуру;
	Элементы.ТаблицаДанныхНазначение.Видимость   = ЕстьНазначение;
	
	Элементы.ФормаСоздатьЗаданияНаСмену.КнопкаПоУмолчанию = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПериоды()
	
	Периоды.Очистить();
	
	МассивСмен = Новый Массив;
	МассивСмен.Добавить(Справочники._Смены.НайтиПоНаименованию("Ночная"));
	МассивСмен.Добавить(Справочники._Смены.НайтиПоНаименованию("Дневная"));
	
	ТекДата  = Объект.Период.ДатаНачала;
	
	Пока ТекДата <= Объект.Период.ДатаОкончания Цикл
		
		Для каждого Смена из МассивСмен Цикл
			
			НоваяСтрока = Периоды.Добавить();
			НоваяСтрока.Дата  = ТекДата;
			НоваяСтрока.Смена = Смена;
			НоваяСтрока.ИмяКолонки = "Д_" + Формат(ТекДата, "ДФ=yyMMdd") + "_" + Лев(НоваяСтрока.Смена, 1);
			НоваяСтрока.ЗаданиеНаСмену = ПолучитьЗаданиеНаСмену(НоваяСтрока.Дата, НоваяСтрока.Смена, Объект.Подразделение);
			Если ЗначениеЗаполнено(НоваяСтрока.ЗаданиеНаСмену) Тогда
				НоваяСтрока.Бригада = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.ЗаданиеНаСмену, "Бригада");
			КонецЕсли;	
			
		КонецЦикла;	
		
		ТекДата = ТекДата + 86400;
	
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура СоздатьКолонки()
	
	МассивРеквизитов = ЭтаФорма.ПолучитьРеквизиты("ТаблицаДанных");
	УдаляемыеРеквизиты = Новый Массив;
	Для каждого Реквизит из МассивРеквизитов Цикл
		Если СтрНачинаетсяС(Реквизит.Имя, "Д_") Тогда 
			УдаляемыеРеквизиты.Добавить("ТаблицаДанных." + Реквизит.Имя);
		КонецЕсли;	
	КонецЦикла;	
	
	ДобавляемыеРеквизиты = Новый Массив;
	
	Для каждого СтрокаТЗ из Периоды Цикл
		
		НовыйРеквизит = Новый РеквизитФормы(СтрокаТЗ.ИмяКолонки, ОбщегоНазначения.ОписаниеТипаЧисло(15, 3, ДопустимыйЗнак.Неотрицательный), "ТаблицаДанных", Лев(СтрокаТЗ.Смена, 1), Ложь);
		ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
			
		НовыйРеквизит = Новый РеквизитФормы(СтрокаТЗ.ИмяКолонки + "_Л", ОбщегоНазначения.ОписаниеТипаЧисло(15, 0, ДопустимыйЗнак.Неотрицательный), "ТаблицаДанных", Лев(СтрокаТЗ.Смена, 1) + "л", Ложь);
		ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
		
	КонецЦикла;	
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты, УдаляемыеРеквизиты);
	
	ЭлементыКУдалению = Новый Массив;
	Для каждого Элемент из Элементы Цикл
		
		Если СтрНачинаетсяС(Элемент.Имя, "Группа_Д_")
			И СтрНайти(Элемент.Имя, "РасширеннаяПодсказка") = 0 Тогда
			ЭлементыКУдалению.Добавить(Элемент);
		КонецЕсли;	
		
	КонецЦикла;	
	
	Для каждого Элемент из ЭлементыКУдалению Цикл
		Элементы.Удалить(Элемент);
	КонецЦикла;	
	
	ПредТекДата = '0001-01-01';
	Для каждого СтрокаТЗ из Периоды Цикл
		
		ТекДата = СтрокаТЗ.Дата;
		Если ТекДата <> ПредТекДата Тогда
			
			Группа = Элементы.Вставить("Группа_Д_" + Формат(ТекДата, "ДФ=MMdd"), Тип("ГруппаФормы"), Элементы.ТаблицаДанных, );
			Группа.Вид              = ВидГруппыФормы.ГруппаКолонок;
			Группа.Заголовок        = Формат(ТекДата, "ДФ=dd.MM");
			Группа.ОтображатьВШапке = Истина;
			Группа.Группировка      = ГруппировкаКолонок.Горизонтальная;
			Группа.ГоризонтальноеПоложениеВШапке   = ГоризонтальноеПоложениеЭлемента.Центр;
			
			ПредТекДата = ТекДата;
			
		КонецЕсли;	
		
		Элемент = Элементы.Вставить(СтрокаТЗ.ИмяКолонки, Тип("ПолеФормы"), Группа);
		Элемент.Вид         = ВидПоляФормы.ПолеВвода;
		Элемент.ПутьКДанным = "ТаблицаДанных." + СтрокаТЗ.ИмяКолонки;
		Элемент.ОтображатьВПодвале = Истина;
		Элемент.Ширина      = 5;
		Элемент.КнопкаВыбора = Ложь;
		Элемент.ОтображатьВПодвале = Истина;
		Элемент.УстановитьДействие("ПриИзменении", "КоличествоПриИзменении");
		Элемент.ГоризонтальноеПоложениеВШапке   = ГоризонтальноеПоложениеЭлемента.Центр;
		Элемент.ГоризонтальноеПоложениеВПодвале = ГоризонтальноеПоложениеЭлемента.Право;
		Элемент.ШрифтПодвала = Новый Шрифт(,, Истина);
		Элемент.Видимость    = ПланироватьВМ3;
		
		Элемент = Элементы.Вставить(СтрокаТЗ.ИмяКолонки + "_Л", Тип("ПолеФормы"), Группа);
		Элемент.Вид         = ВидПоляФормы.ПолеВвода;
		Элемент.ПутьКДанным = "ТаблицаДанных." + СтрокаТЗ.ИмяКолонки + "_Л";
		Элемент.ОтображатьВПодвале = Истина;
		Элемент.Ширина      = 5;
		Элемент.КнопкаВыбора = Ложь;
		Элемент.ОтображатьВПодвале = Истина;
		Элемент.УстановитьДействие("ПриИзменении", "КоличествоЛистовПриИзменении");
		Элемент.ГоризонтальноеПоложениеВШапке   = ГоризонтальноеПоложениеЭлемента.Центр;
		Элемент.ГоризонтальноеПоложениеВПодвале = ГоризонтальноеПоложениеЭлемента.Право;
		Элемент.ШрифтПодвала = Новый Шрифт(,, Истина);
		Элемент.Видимость    = ПланироватьВЛистах;
		
	КонецЦикла;	
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьТаблицу()
	
	ТаблицаЗаказа = _ЗаказНаПроизводство.НевыполненнаяПродукция(Объект.ЗаказНаПроизводство, Объект.Подразделение);
	
	ТаблицаДанных.Загрузить(ТаблицаЗаказа);
	
КонецПроцедуры

&НаСервере
Процедура ПодразделениеПриИзмененииНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Подразделение", Объект.Подразделение);
	Запрос.Параметры.Вставить("Статус",        Перечисления.СтатусыЗаказовНаПроизводство.КПроизводству);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭтапыПроизводства.Распоряжение
	|ИЗ
	|	РегистрНакопления.ЭтапыПроизводства КАК ЭтапыПроизводства
	|ГДЕ
	|	ЭтапыПроизводства.Подразделение = &Подразделение
	|	И ЭтапыПроизводства.Распоряжение.Статус = &Статус
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭтапыПроизводства.Распоряжение.Дата УБЫВ";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		
		Объект.ЗаказНаПроизводство = Результат.Выгрузить()[0][0];
		РассчитатьПериод();
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	ПодразделениеПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаказНаПроизводствоПриИзменении(Элемент)
	
	РассчитатьПериод();
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьПериод()
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Заказ", Объект.ЗаказНаПроизводство);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(ДокПродукция.НачатьНеРанее) КАК Дата1,
	|	МАКСИМУМ(ДокПродукция.ДатаПотребности) КАК Дата2
	|ИЗ
	|	Документ.ЗаказНаПроизводство.Продукция КАК ДокПродукция
	|ГДЕ
	|	ДокПродукция.Ссылка = &Заказ";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		
		СтрокаТЧ = Результат.Выгрузить()[0];
		Объект.Период.ДатаНачала    = СтрокаТЧ.Дата1;
		Объект.Период.ДатаОкончания = Мин(СтрокаТЧ.Дата2, СтрокаТЧ.Дата1 + 10*86400);
		
	КонецЕсли;	
	
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаДанных.ТекущиеДанные;
	
	КоличествоИтого = 0;
	Для каждого СтрокаТЗ из Периоды Цикл
		
		КоличествоИтого = КоличествоИтого + ТекущиеДанные[СтрокаТЗ.ИмяКолонки];
		
	КонецЦикла;	
	
	ТекущиеДанные.КоличествоИтого = КоличествоИтого;
	ТекущиеДанные.КоличествоРазница = _ОбщегоНазначенияДоп.Абс(ТекущиеДанные.КоличествоОстаток - КоличествоИтого);
	
	Элемент.ТекстПодвала = ТаблицаДанных.Итог(Элемент.Имя);
	Элементы.ТаблицаДанныхКоличествоИтого.ТекстПодвала = ТаблицаДанных.Итог("КоличествоИтого");
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоЛистовПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаДанных.ТекущиеДанные;
	
	КоличествоИтого = 0;
	Для каждого СтрокаТЗ из Периоды Цикл
		
		КоличествоИтого = КоличествоИтого + ТекущиеДанные[СтрокаТЗ.ИмяКолонки + "_Л"];
		
	КонецЦикла;	
	
	ТекущиеДанные.КоличествоЛистовИтого = КоличествоИтого;
	ТекущиеДанные.КоличествоЛистовРазница = _ОбщегоНазначенияДоп.Абс(ТекущиеДанные.КоличествоЛистовИтого - КоличествоИтого);
	
	Элемент.ТекстПодвала = ТаблицаДанных.Итог(Элемент.Имя);
	Элементы.ТаблицаДанныхКоличествоЛистовИтого.ТекстПодвала = ТаблицаДанных.Итог("КоличествоЛистовИтого");
	
	
	ИмяКолонкиМ3 = Сред(Элемент.Имя, 1, СтрДлина(Элемент.Имя) - 2);
	ТекущиеДанные[ИмяКолонкиМ3] = _ОбщегоНазначенияДоп.ПолучитьКоличествоПоКоличествуЛистов(ТекущиеДанные.Характеристика, ТекущиеДанные[Элемент.Имя]);
	
	КоличествоПриИзменении(Элементы[ИмяКолонкиМ3]);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказНаПроизводствоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МассивЗаказов = ПолучитьМассивЗакзов(Объект.Подразделение);
	ДанныеВыбора = Новый СписокЗначений;
	ДанныеВыбора.ЗагрузитьЗначения(МассивЗаказов);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМассивЗакзов(Подразделение)
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Подразделение", Подразделение);
	Запрос.Параметры.Вставить("Статус",        Перечисления.СтатусыЗаказовНаПроизводство.КПроизводству);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЭтапыПроизводства.Распоряжение
	|ИЗ
	|	РегистрНакопления.ЭтапыПроизводства КАК ЭтапыПроизводства
	|ГДЕ
	|	ЭтапыПроизводства.Подразделение = &Подразделение
	|	И ЭтапыПроизводства.Распоряжение.Статус = &Статус
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭтапыПроизводства.Распоряжение.Дата УБЫВ";
	
	Результат = Запрос.Выполнить();
	Возврат Результат.Выгрузить().ВыгрузитьКолонку("Распоряжение");
	
КонецФункции	

&НаКлиенте
Процедура ЗаказНаПроизводствоНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДанныхПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьБригаду(Команда)
	
	ТекущиеДанные = Элементы.Периоды.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Бригада) Тогда
		
		Сообщить("Не выбрана бригада");
		Возврат;
		
	КонецЕсли;	
	
	ЗаполнитьБригадуСервер(ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьБригадуСервер(ИДСтроки)
	
	МассивБригад = Новый Массив;
	МассивБригад.Добавить(Справочники.Бригады.НайтиПоНаименованию("Бригада №1"));
	МассивБригад.Добавить(Справочники.Бригады.НайтиПоНаименованию("Бригада №2"));
	МассивБригад.Добавить(Справочники.Бригады.НайтиПоНаименованию("Бригада №3"));
	МассивБригад.Добавить(Справочники.Бригады.НайтиПоНаименованию("Бригада №4"));
	
	СтрокаТЗ = Периоды.НайтиПоИдентификатору(ИДСтроки);
	ПерваяСтрока = Периоды.Индекс(СтрокаТЗ) + 1;
	Индекс = МассивБригад.Найти(СтрокаТЗ.Бригада.Родитель);
	Если Индекс = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Для Счетчик = ПерваяСтрока По Периоды.Количество() - 1 Цикл
		
		Индекс = (Индекс + 1) % 4;
		Бригада = ПолучитьБригдау(МассивБригад[Индекс], Объект.Подразделение);
		
		СтрокаТЗ = Периоды[Счетчик];
		СтрокаТЗ.Бригада = Бригада;
		
	КонецЦикла;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьБригдау(Родитель, Подразделение)
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Родитель",      Родитель);
	Запрос.Параметры.Вставить("Подразделение", Подразделение);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Бригады.Ссылка
	|ИЗ
	|	Справочник.Бригады КАК Бригады
	|ГДЕ
	|	Бригады.Родитель = &Родитель
	|	И Бригады.Подразделение = &Подразделение
	|	И НЕ Бригады.ПометкаУдаления";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Возврат Результат.Выгрузить()[0][0];
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗаданиеНаСмену(Дата, Смена, Подразделение)
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Дата",          Дата);
	Запрос.Параметры.Вставить("Смена",         Смена);
	Запрос.Параметры.Вставить("Подразделение", Подразделение);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Ссылка
	|ИЗ
	|	Документ._ЗаданиеНаСмену КАК Док
	|ГДЕ
	|	Док.ДатаСмены = &Дата
	|	И Док.Смена = &Смена
	|	И Док.Подразделение = &Подразделение
	|	И НЕ Док.ПометкаУдаления";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Возврат Результат.Выгрузить()[0][0];
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
	
КонецФункции

&НаКлиенте
Процедура СоздатьЗаданияНаСмену(Команда)
	
	ЕстьНеуказанныеБригады = Ложь;
	Для каждого СтрокаТЗ из Периоды Цикл
		
		Если ТаблицаДанных.Итог(СтрокаТЗ.ИмяКолонки) > 0
			И НЕ ЗначениеЗаполнено(СтрокаТЗ.Бригада) Тогда
			
			Индекс = Периоды.Индекс(СтрокаТЗ);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				"Не указана бигада",
				,
				"Периоды[" + Формат(Индекс, "ЧГ=0") + "].Бригада");
				
			Возврат;
			
		КонецЕсли;
		
	КонецЦикла;	
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьЗаданияНаСменуЗаврешение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, "Создать/обновить задания на смену?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗаданияНаСменуЗаврешение(Ответ, ДопоплнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;	
	
	СоздатьЗаданияНаСменуНаСервере();
	Состояние("Задания сформированы");
	
КонецПроцедуры

&НаСервере
Процедура СоздатьЗаданияНаСменуНаСервере()
	
	НачатьТранзакцию();
	
	Для каждого СтрокаТЗПериод из Периоды Цикл
		
		Если ТаблицаДанных.Итог(СтрокаТЗПериод.ИмяКолонки) = 0 Тогда
			Продолжить;
		КонецЕсли;	
			
		Если ЗначениеЗаполнено(СтрокаТЗПериод.ЗаданиеНаСмену) Тогда
			ДокументОбъект = СтрокаТЗПериод.ЗаданиеНаСмену.ПолучитьОбъект();
		Иначе	
			ДокументОбъект = Документы._ЗаданиеНаСмену.СоздатьДокумент();
			ДокументОбъект.ДатаСмены     = СтрокаТЗПериод.Дата;
			ДокументОбъект.Смена         = СтрокаТЗПериод.Смена;
			ДокументОбъект.Подразделение = Объект.Подразделение;
		КонецЕсли;	
		
		ДокументОбъект.Бригада = СтрокаТЗПериод.Бригада;
		
		ДокументОбъект.Заказы.Очистить();
		НоваяСтрока = ДокументОбъект.Заказы.Добавить();
		НоваяСтрока.ЗаказНаПроизводство = Объект.ЗаказНаПроизводство;
		
		ДокументОбъект.Продукция.Очистить();
		Для каждого СтрокаТЗПродукция из ТаблицаДанных Цикл
			
			Если СтрокаТЗПродукция[СтрокаТЗПериод.ИмяКолонки] = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ДокументОбъект.Продукция.Добавить();
			НоваяСтрока.КоличествоПлан   = СтрокаТЗПродукция.КоличествоПлан;
			НоваяСтрока.Номенклатура     = СтрокаТЗПродукция.Номенклатура;
			НоваяСтрока.Характеристика   = СтрокаТЗПродукция.Характеристика;
			НоваяСтрока.Назначение       = СтрокаТЗПродукция.Назначение;
			НоваяСтрока.Количество       = СтрокаТЗПродукция[СтрокаТЗПериод.ИмяКолонки];
			НоваяСтрока.КоличествоЛистов = СтрокаТЗПродукция[СтрокаТЗПериод.ИмяКолонки + "_Л"];
			
		КонецЦикла;	
		
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		СтрокаТЗПериод.ЗаданиеНаСмену = ДокументОбъект.Ссылка;
		
	КонецЦикла;	
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

&НаКлиенте
Процедура ПланироватьВЛистахПриИзменении(Элемент)
	
	Для каждого СтрокаТЗ из Периоды Цикл
		Элементы[СтрокаТЗ.ИмяКолонки + "_Л"].Видимость = ПланироватьВЛистах;
	КонецЦикла;	
	
	Элементы.ТаблицаДанныхКоличествоЛистовИтого.Видимость = ПланироватьВЛистах;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланироватьВМ3ПриИзменении(Элемент)
	
	Для каждого СтрокаТЗ из Периоды Цикл
		Элементы[СтрокаТЗ.ИмяКолонки].Видимость = ПланироватьВМ3;
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьНоменклатуруПриИзменении(Элемент)
	
	Элементы.ТаблицаДанныхНоменклатура.Видимость = ОтображатьНоменклатуру;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ПериодыЗаданиеНаСмену" Тогда
		
		СтрокаТЧ = Периоды.НайтиПоИдентификатору(ВыбраннаяСтрока);
		ПоказатьЗначение(, СтрокаТЧ.ЗаданиеНаСмену);
		
	КонецЕсли;	
	
КонецПроцедуры
