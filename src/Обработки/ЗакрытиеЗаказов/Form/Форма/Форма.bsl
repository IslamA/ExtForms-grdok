
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.Период = НачалоМесяца(НачалоМесяца(ТекущаяДата()) - 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПредставлениеПериодаРегистрации = ОбщегоНазначенияУТКлиент.ПолучитьПредставлениеПериодаРегистрации(Объект.Период);
	
КонецПроцедуры

#КонецОбласти

#Область ОбщиеПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаРегистрацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Оповещение = Новый ОписаниеОповещения("ПредставлениеПериодаРегистрацииНачалоВыбораЗавершение", ЭтотОбъект);
	ОбщегоНазначенияУТКлиент.НачалоВыбораПредставленияПериодаРегистрации(Элемент,
	СтандартнаяОбработка,
	Объект.Период,
	ЭтаФорма,
	Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаРегистрацииНачалоВыбораЗавершение(ВыбранныйПериод, ДополнительныеПараметры) Экспорт 
	Если ВыбранныйПериод <> Неопределено Тогда
		Объект.Период = ВыбранныйПериод;
		ПредставлениеПериодаРегистрации = ОбщегоНазначенияУТКлиент.ПолучитьПредставлениеПериодаРегистрации(Объект.Период);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ОбщегоНазначенияУТКлиент.РегулированиеПредставленияПериодаРегистрации(Направление,
	СтандартнаяОбработка,
	Объект.Период,
	ПредставлениеПериодаРегистрации);
КонецПроцедуры

#КонецОбласти

#Область МаршрутныеЛисты

&НаКлиенте
Процедура МЛВклВсе(Команда)
	
	Для каждого СтрокаТЗ из ТаблицаМаршрутныеЛисты Цикл
		СтрокаТЗ.Пометка = Истина;
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура МЛВыклВсе(Команда)
	
	Для каждого СтрокаТЗ из ТаблицаМаршрутныеЛисты Цикл
		СтрокаТЗ.Пометка = Ложь;
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаМаршрутныеЛистыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Имя = СтрЗаменить(Поле.Имя, "ТаблицаМаршрутныеЛисты", "");
	
	СтрокаТЗ = ТаблицаМаршрутныеЛисты.НайтиПоИдентификатору(ВыбраннаяСтрока);
	ПоказатьЗначение(, СтрокаТЗ[Имя]);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьМЛ(Команда)
	ЗаполнитьМЛНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМЛНаСервере()
	
	Запрос = Новый ПостроительЗапроса;
	Запрос.Параметры.Вставить("Организация", Объект.Организация);
	Запрос.Параметры.Вставить("Дата1",       НачалоМесяца(Объект.Период));
	Запрос.Параметры.Вставить("Дата2",       КонецМесяца(Объект.Период));
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИСТИНА КАК Пометка,
	|	Док.Ссылка КАК Документ,
	|	Док.Распоряжение КАК Заказ,
	|	Док.Подразделение
	|ИЗ
	|	Документ.МаршрутныйЛистПроизводства КАК Док
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ДокВыходныеИзделия.Ссылка КАК Ссылка,
	|			СУММА(ДокВыходныеИзделия.КоличествоФакт) КАК КоличествоФакт
	|		ИЗ
	|			Документ.МаршрутныйЛистПроизводства.ВыходныеИзделия КАК ДокВыходныеИзделия
	|		ГДЕ
	|			ДокВыходныеИзделия.Ссылка.Распоряжение.Дата МЕЖДУ &Дата1 И &Дата2
	|			И ДокВыходныеИзделия.Ссылка.Проведен
	|			И ДокВыходныеИзделия.Ссылка.Организация = &Организация
	|			И ДокВыходныеИзделия.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполнен)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ДокВыходныеИзделия.Ссылка) КАК ДокВыходныеИзделия
	|		ПО (ДокВыходныеИзделия.Ссылка = Док.Ссылка)
	|ГДЕ
	|	Док.Распоряжение.Дата МЕЖДУ &Дата1 И &Дата2
	|	И Док.Проведен
	|	И Док.Организация = &Организация
	|	И Док.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыМаршрутныхЛистовПроизводства.Выполнен)
	|	И ЕСТЬNULL(ДокВыходныеИзделия.КоличествоФакт, 0) = 0
	|{ГДЕ
	|	Док.Распоряжение.Подразделение.* КАК Подразделение}
	|
	|УПОРЯДОЧИТЬ ПО
	|	Док.Распоряжение";
	
	Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
		
		ЭлементОтбора = Запрос.Отбор.Добавить("Подразделение");
		ЭлементОтбора.Значение      = Объект.Подразделение;
		ЭлементОтбора.ВидСравнения  = ВидСравнения.ВИерархии;
		ЭлементОтбора.Использование = Истина;
		
	КонецЕсли;	
	
	Запрос.Выполнить();
	
	Таблица = Запрос.Результат.Выгрузить();
	ТаблицаМаршрутныеЛисты.Загрузить(Таблица);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьМЛ(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ОтменитьМЛОтвет", ЭтотОбъект), "Отменить маршрутные листы?", РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьМЛОтвет(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Состояние("Отмена маршрутных листов");
		ОтменитьМЛСервер();
		Состояние("Маршрутные листы отменены");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьМЛСервер()
	
	Для каждого СтрокаТЗ из ТаблицаМаршрутныеЛисты Цикл
		
		Если НЕ СтрокаТЗ.Пометка Тогда
			Продолжить;
		КонецЕсли;	
		
		ДокументОбъект = СтрокаТЗ.Документ.ПолучитьОбъект();
		ДокументОбъект.Статус = Перечисления.СтатусыМаршрутныхЛистовПроизводства.Отменен;
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		ДокументОбъект.УстановитьПометкуУдаления(Истина);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаказыНаПроизводство

&НаКлиенте
Процедура ДеревоЗаказыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаТЗ = ДеревоЗаказы.НайтиПоИдентификатору(ВыбраннаяСтрока);
	ПоказатьЗначение(, СтрокаТЗ.Заказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыВклВсе(Команда)
	
	Для каждого Строка1 из ДеревоЗаказы.ПолучитьЭлементы() Цикл
		Строка1.Пометка = Истина;
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыВыклВсе(Команда)
	
	Для каждого Строка1 из ДеревоЗаказы.ПолучитьЭлементы() Цикл
		Строка1.Пометка = Ложь;
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаказы(Команда)
	
	ЗаполнитьЗаказыНаСервере();
	
	Для каждого Строка1 из ДеревоЗаказы.ПолучитьЭлементы() Цикл
		Элементы.ДеревоЗаказы.Развернуть(Строка1.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗаказыНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Организация", Объект.Организация);
	Запрос.Параметры.Вставить("Дата1",       НачалоМесяца(Объект.Период));
	Запрос.Параметры.Вставить("Дата2",       КонецМесяца(Объект.Период));
	Запрос.Параметры.Вставить("ПустойКлюч",  Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	Запрос.Параметры.Вставить("ВсеПодразделения", НЕ ЗначениеЗаполнено(Объект.Подразделение));
	Запрос.Параметры.Вставить("Подразделение",    Объект.Подразделение);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Выборка.Распоряжение КАК Заказ,
	|	Выборка.КодСтрокиПродукция КАК КодСтрокиПродукция,
	|	Выборка.ЗапланированоЗаказом КАК КоличествоПоЗаказу,
	|	Выборка.Выполнено КАК КоличествоВыполнено,
	|	ЗаказНаПроизводствоПродукция.Номенклатура,
	|	ЗаказНаПроизводствоПродукция.Характеристика,
	|	ЗаказНаПроизводствоПродукция.КлючСвязи КАК КлючСвязиПродукция,
	|	&ПустойКлюч КАК КлючСвязиПолуфабрикат
	|ИЗ
	|	(ВЫБРАТЬ
	|		Рег.Распоряжение КАК Распоряжение,
	|		Рег.КодСтрокиПродукция КАК КодСтрокиПродукция,
	|		СУММА(Рег.ЗапланированоЗаказом) КАК ЗапланированоЗаказом,
	|		СУММА(Рег.Выполнено) КАК Выполнено
	|	ИЗ
	|		РегистрНакопления.ЭтапыПроизводства КАК Рег
	|	ГДЕ
	|		Рег.Распоряжение.Организация = &Организация
	|		И Рег.Распоряжение.Дата МЕЖДУ &Дата1 И &Дата2
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Рег.Распоряжение,
	|		Рег.КодСтрокиПродукция
	|	
	|	ИМЕЮЩИЕ
	|		СУММА(Рег.ЗапланированоЗаказом) <> СУММА(Рег.Выполнено) + СУММА(Рег.Брак)) КАК Выборка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПроизводство.Продукция КАК ЗаказНаПроизводствоПродукция
	|		ПО Выборка.Распоряжение = ЗаказНаПроизводствоПродукция.Ссылка
	|			И Выборка.КодСтрокиПродукция = ЗаказНаПроизводствоПродукция.КодСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	Заказ,
	|	КодСтрокиПродукция
	|ИТОГИ ПО
	|	Заказ";
	
	Результат = Запрос.Выполнить();
	
	Дерево = Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	ДеревоЗаказы.ПолучитьЭлементы().Очистить();
	
	Для каждого Строка1 из Дерево.Строки Цикл
		
		НоваяСтрока1 = ДеревоЗаказы.ПолучитьЭлементы().Добавить();	
		ЗаполнитьЗначенияСвойств(НоваяСтрока1, Строка1);
		НоваяСтрока1.Представление = Строка(Строка1.Заказ);
		НоваяСтрока1.Уровень       = 0;
		НоваяСтрока1.Пометка       = Истина;
		
		Для каждого Строка2 из Строка1.Строки Цикл
			
			НоваяСтрока2 = НоваяСтрока1.ПолучитьЭлементы().Добавить();	
			ЗаполнитьЗначенияСвойств(НоваяСтрока2, Строка2);
			НоваяСтрока2.Уровень = 1;
			
			НоваяСтрока2.Представление = Строка(Строка2.Номенклатура);
			Если ЗначениеЗаполнено(Строка2.Характеристика) Тогда
				НоваяСтрока2.Представление = НоваяСтрока2.Представление + ", " + Строка(Строка2.Характеристика);
			КонецЕсли;	
			
		КонецЦикла;
		
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура СократитьПроизводство(Команда)
	ПоказатьВопрос(Новый ОписаниеОповещения("СократитьПроизводствоОтвет", ЭтотОбъект), "Сократить производство?", РежимДиалогаВопрос.ДаНет);
КонецПроцедуры

&НаКлиенте
Процедура СократитьПроизводствоОтвет(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Состояние("Сокращение производства");
		СократитьПроизводствоНаСервере();
		Состояние("Производство сокращено");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СократитьПроизводствоНаСервере()
	
	Для каждого Строка1 из ДеревоЗаказы.ПолучитьЭлементы() Цикл
		
		Если НЕ Строка1.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		Для каждого Строка2 из Строка1.ПолучитьЭлементы() Цикл
			
			ПараметрыОбработки = Новый Структура;
			ПараметрыОбработки.Вставить("КодСтрокиПродукция",      Строка2.КодСтрокиПродукция);
			ПараметрыОбработки.Вставить("КлючСвязиПродукция",      Строка2.КлючСвязиПродукция);
			ПараметрыОбработки.Вставить("КлючСвязиПолуфабрикат",   Строка2.КлючСвязиПолуфабрикат);
			ПараметрыОбработки.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
			
			СократитьПроизводствоПоСтрокеЗаказа(Строка1.Заказ, ПараметрыОбработки);

		КонецЦикла;
		
	КонецЦикла;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СократитьПроизводствоПоСтрокеЗаказа(Знач Заказ, Знач Параметры)
	
	СписокЗаказов = Новый СписокЗначений;
	СписокЗаказов.Добавить(Заказ);
	
	СписокКодовСтрокПродукции = Новый СписокЗначений;
	СписокКодовСтрокПродукции.Добавить(Параметры.КодСтрокиПродукция);
	
	// Получение данных для сокращения
	ПараметрыЗадания = Новый Структура;
	
	ПараметрыЗадания.Вставить("СписокЗаказов", СписокЗаказов);
	ПараметрыЗадания.Вставить("СписокКодовСтрокПродукции", СписокКодовСтрокПродукции);
	
	ПараметрыЗадания.Вставить("ТекущаяДатаСеанса", ТекущаяДатаСеанса());
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Параметры.УникальныйИдентификатор);
	Обработки.СокращениеПроизводства.СостояниеЗаказовНаПроизводство(ПараметрыЗадания, АдресХранилища);
	
	СтруктураДанных = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если СтруктураДанных.ВыходныеИзделия.Количество() > 1 Тогда
		Возврат Ложь;
	Конецесли;	
	
	СтрокаДанных = СтруктураДанных.ВыходныеИзделия[0];
	
	// Сокращение производства
	ПараметрыСокращения = Новый Структура; 
	ПараметрыСокращения.Вставить("Заказ",                 Заказ);
	ПараметрыСокращения.Вставить("КлючСвязиПродукция",    Параметры.КлючСвязиПродукция);
	ПараметрыСокращения.Вставить("КлючСвязиПолуфабрикат", Параметры.КлючСвязиПолуфабрикат);
	ПараметрыСокращения.Вставить("НовоеКоличество",       СтрокаДанных.КоличествоВыполнено);
	ПараметрыСокращения.Вставить("КоличествоТребуется",   СтрокаДанных.КоличествоВыполнено);
	ПараметрыСокращения.Вставить("БезопасноеСокращение",  СтрокаДанных.КоличествоВыполнено);
	ПараметрыСокращения.Вставить("ДоделатьНачатыеПолуфабрикаты", Истина);
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("АдресХранилища",          АдресХранилища);
	ПараметрыОбработки.Вставить("ПараметрыСокращения",     ПараметрыСокращения);
	ПараметрыОбработки.Вставить("УникальныйИдентификатор", Параметры.УникальныйИдентификатор);
	
	Обработки.СокращениеПроизводства.СократитьПроизводство(ПараметрыОбработки);
	
	//СтруктураДанных = ПолучитьИзВременногоХранилища(ПараметрыОбработки.АдресХранилища);
	
	ПараметрыОбработки2 = Новый Структура;
	ПараметрыОбработки2.Вставить("ЗаказНаПроизводство",     Заказ);
	ПараметрыОбработки2.Вставить("КодСтрокиПродукция",      Параметры.КодСтрокиПродукция);
	ПараметрыОбработки2.Вставить("КлючСвязиПродукция",      Параметры.КлючСвязиПродукция);
	ПараметрыОбработки2.Вставить("УникальныйИдентификатор", Параметры.УникальныйИдентификатор);
	ПараметрыОбработки2.Вставить("АдресХранилища",          ПараметрыОбработки.АдресХранилища);
	
	СохранитьИзмененияНаСервере(ПараметрыОбработки2);
	
	Результат = ПланированиеПроизводстваВызовСервера.РассчитатьГрафикВыпуска(Заказ);
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Процедура СохранитьИзмененияНаСервере(Параметры)
	
	КлючСвязиПродукция      = Параметры.КлючСвязиПродукция;
	АдресХранилища          = Параметры.АдресХранилища;
	УникальныйИдентификатор = Параметры.УникальныйИдентификатор;
	
	ЗаказОбъект = Параметры.ЗаказНаПроизводство.ПолучитьОбъект();
	Если Ложь Тогда
		ЗаказОбъект = Документы.ЗаказНаПроизводство.СоздатьДокумент();
	КонецЕсли;	
	
	Если ЗаказОбъект.Статус = Перечисления.СтатусыЗаказовНаПроизводство.Закрыт Тогда
		ЗаказОбъект.Статус = Перечисления.СтатусыЗаказовНаПроизводство.КПроизводству;
	КонецЕсли;	
	
	ПараметрыКоманды = Новый Структура;
	
	ПараметрыКоманды.Вставить("Заказ", Параметры.ЗаказНаПроизводство);
	ПараметрыКоманды.Вставить("КодСтрокиПродукция", Параметры.КодСтрокиПродукция);
	ПараметрыКоманды.Вставить("КлючСвязиПродукция", КлючСвязиПродукция);
	
	ПараметрыКоманды.Вставить("АдресХранилища", АдресХранилища);
	ПараметрыКоманды.Вставить("АдресСпецификация", ПланированиеПроизводства.ДанныеСпецификацииЗаказаВХранилилище(
	ЗаказОбъект, КлючСвязиПродукция, УникальныйИдентификатор));
	
	ПараметрыКоманды.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	
	ПланированиеПроизводства.УдалитьДанныеСпецификацииПоКлючу(ЗаказОбъект, КлючСвязиПродукция);
	
	РезультатРедактирования = Обработки.СокращениеПроизводства.РезультатРедактированияСтрокиСпецификацииЗаказа(ПараметрыКоманды);
	
	ЗаказОбъект.СтатусГрафикаПроизводства = Перечисления.СтатусыГрафикаПроизводстваВЗаказеНаПроизводство.ТребуетсяРассчитать;
	
	//Запись изменений в табличную часть Продукция.
	ДанныеПродукции = ЗаказОбъект.Продукция.Найти(РезультатРедактирования.СтруктураПродукции.КлючСвязи, "КлючСвязи");
	
	ЗаполнитьЗначенияСвойств(ДанныеПродукции, РезультатРедактирования.СтруктураПродукции, "Упаковка, КоличествоУпаковок, Количество, ДатаПотребности,
	|НачатьНеРанее, РазмещениеВыпуска, Склад, Назначение, ЕстьСоответствиеСтандартнойСпецификации");
	ДанныеПродукции.ГрафикРассчитан = Ложь;
	
	ПараметрыРедактированияМатериалов = Обработки.ВводКорректировкиЗаказаМатериалов.ПараметрыРедактированияМатериалов(УникальныйИдентификатор);
	
	// Запись изменений в табличную часть Этапы.
	Для Каждого Строка Из РезультатРедактирования.Этапы Цикл
		ЗаполнитьЗначенияСвойств(ЗаказОбъект.Этапы.Добавить(), Строка);
	КонецЦикла;
	
	// Запись изменений в табличную часть ВыходныеИзделия.
	Для Каждого Строка Из РезультатРедактирования.ВыходныеИзделия Цикл
		ЗаполнитьЗначенияСвойств(ЗаказОбъект.ВыходныеИзделия.Добавить(), Строка);
	КонецЦикла;
	
	// Запись изменений в табличную часть ВозвратныеОтходы.
	Для Каждого Строка Из РезультатРедактирования.ВозвратныеОтходы Цикл
		ЗаполнитьЗначенияСвойств(ЗаказОбъект.ВозвратныеОтходы.Добавить(), Строка);
	КонецЦикла;
	
	// Запись изменений в табличную часть МатериалыИУслуги.
	Для Каждого Строка Из РезультатРедактирования.МатериалыИУслуги Цикл
		ЗаполнитьЗначенияСвойств(ЗаказОбъект.МатериалыИУслуги.Добавить(), Строка);
	КонецЦикла;
	
	// Запись изменений в табличную часть Трудозатраты.
	Для Каждого Строка Из РезультатРедактирования.Трудозатраты Цикл
		ЗаполнитьЗначенияСвойств(ЗаказОбъект.Трудозатраты.Добавить(), Строка);
	КонецЦикла;
	
	// Запись изменений в табличную часть ВидыРабочихЦентров.
	Для Каждого Строка Из РезультатРедактирования.ВидыРабочихЦентров Цикл
		ЗаполнитьЗначенияСвойств(ЗаказОбъект.ВидыРабочихЦентров.Добавить(), Строка);
	КонецЦикла;
	
	// Запись изменений в табличную часть АльтернативныеВидыРабочихЦентров.
	Для Каждого Строка Из РезультатРедактирования.АльтернативныеВидыРабочихЦентров Цикл
		ЗаполнитьЗначенияСвойств(ЗаказОбъект.АльтернативныеВидыРабочихЦентров.Добавить(), Строка);
	КонецЦикла;
	
	// Запись изменений в табличную часть ЭтапыВосстановленияБрака.
	Для Каждого Строка Из РезультатРедактирования.ЭтапыВосстановленияБрака Цикл
		ЗаполнитьЗначенияСвойств(ЗаказОбъект.ЭтапыВосстановленияБрака.Добавить(), Строка);
	КонецЦикла;
	
	Попытка
		
		НачатьТранзакцию();
		
		Обработки.ВводКорректировкиЗаказаМатериалов.СохранитьКорректировкиЗаказаМатериаловПоЗаказуНаПроизводство(ЗаказОбъект, 
		ПараметрыРедактированияМатериалов, РезультатРедактирования.КорректировкиЗаказаМатериалов);
		
		ЗаказОбъект.ИнициализироватьПараметрыАктуализацииМаршрутныхЛистов(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Параметры.КодСтрокиПродукция));
		
		ЗаказОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецПопытки; 
	
КонецПроцедуры

#КонецОбласти
