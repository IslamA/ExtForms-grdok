Функция ТекстЗапросаШапки()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Док.Ссылка,
	|	Док.Номер,
	|	Док.Дата,
	|	Док.Сотрудник КАК Сотрудник,
	|	ТекущиеКадровыеДанныеСотрудников.ТекущаяДолжностьПоШтатномуРасписанию КАК СотрудникДолжность,
	|	Док.ФизическоеЛицо,
	|	Док.ФизическоеЛицо.Пол КАК ФизическоеЛицоПол,
	|	Док.Организация,
	|	ОрганизацииКИ.Город КАК ОрганизацияГород,
	|	Док.ДатаНачала,
	|	Док.ДатаОкончания,
	|	Док.Руководитель,
	|	Док.ДолжностьРуководителя
	|ИЗ
	|	Документ.ОплатаПоСреднемуЗаработку КАК Док
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации.КонтактнаяИнформация КАК ОрганизацииКИ
	|		ПО Док.Организация = ОрганизацииКИ.Ссылка
	|			И (ОрганизацииКИ.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресОрганизации))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
	|		ПО Док.Сотрудник = ТекущиеКадровыеДанныеСотрудников.Сотрудник
	|ГДЕ
	|	Док.Ссылка В(&МассивОбъектов)";	
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция СформироватьПечатнуюФорму(МассивОбъектов, ОбъектыПечати, ИмяМакета)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.АвтоМасштаб			= Истина;
	ТабДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Портрет;
	ТабДокумент.ИмяПараметровПечати	= "ПАРАМЕТРЫ_ПЕЧАТИ_" + ИмяМакета;
	
	//   НаименованиеСокращенное
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст = ТекстЗапросаШапки();
	
	Шапка = Запрос.Выполнить().Выбрать();
	//Макет = ПолучитьМакет("Допсоглашение");
	Макет = ПолучитьМакет(ИмяМакета);
	Область = Макет.ПолучитьОбласть("Документ");
	
	ПервыйДокумент = Истина;
	
	Пока Шапка.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		Параметры = Новый Структура;
		Параметры.Вставить("Организация",      Шапка.Организация.НаименованиеСокращенное);
		Параметры.Вставить("ОрганизацияГород", СтрЗаменить(Шапка.ОрганизацияГород, " г", ""));
		Параметры.Вставить("Дата",             Шапка.Дата);
		Параметры.Вставить("КолвоДней",        (Шапка.ДатаОкончания - Шапка.ДатаНачала) / 86400 + 1);
		
		Если Параметры.КолвоДней = 1 Тогда
			Параметры.Вставить("Даты",         Формат(Шапка.ДатаНачала, "ДФ=dd.MM.yyyy")); 
		ИначеЕсли Параметры.КолвоДней = 2 Тогда	
			Параметры.Вставить("Даты",     Формат(Шапка.ДатаНачала, "ДФ=dd.MM.yyyy") + " и " + Формат(Шапка.ДатаОкончания, "ДФ=dd.MM.yyyy")); 
		Иначе	
			Параметры.Вставить("Даты",    "с " + Формат(Шапка.ДатаНачала, "ДФ=dd.MM.yyyy") + " по " + Формат(Шапка.ДатаОкончания, "ДФ=dd.MM.yyyy")); 
		КонецЕсли;	
		
		Если Параметры.КолвоДней = 1 Тогда
			Параметры.Вставить("ДнейСтр", "дополнительный день");
		ИначеЕсли Параметры.КолвоДней >= 2 И Параметры.КолвоДней <= 4 Тогда	
			Параметры.Вставить("ДнейСтр", "дополнительных дня");
		Иначе	
			Параметры.Вставить("ДнейСтр", "дополнительных дней");
		КонецЕсли;	
			
		СтруктрураФИО = ФизическиеЛицаУТ.ФамилияИмяОтчество(Шапка.ФизическоеЛицо);
		Параметры.Вставить("СотрудникФИО", СтруктрураФИО.Фамилия + " " + СтруктрураФИО.Имя + " " + СтруктрураФИО.Отчество);
		
		Если Шапка.ФизическоеЛицоПол = Перечисления.ПолФизическогоЛица.Мужской Тогда
			Пол = 1;
		Иначе
			Пол = 2;
		КонецЕсли;	
			
		Параметры.Вставить("СотрудникФИОРП",     СклонениеПредставленийОбъектов.ПросклонятьФИО(Параметры.СотрудникФИО, 2,, Пол));
		Параметры.Вставить("СотрудникДолжность", Шапка.СотрудникДолжность);
		Параметры.Вставить("Справка", _ОбщегоНазначенияДоп.ПолучитьДопРеквизит(Шапка.Ссылка, "Справка"));
		
		Параметры.Вставить("Руководитель",          ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(Шапка.Руководитель, Шапка.Дата));
		Параметры.Вставить("РуководительДолжность", Шапка.ДолжностьРуководителя);
		
		Область.Параметры.Заполнить(Параметры);
		ТабДокумент.Вывести(Область);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	
	ТабДокумент.ТолькоПросмотр = Истина;
	ТабДокумент.АвтоМасштаб    = Истина;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДокумент.ОтображатьГруппировки = ложь;
	ТабДокумент.ОтображатьЗаголовки   = Ложь;
	ТабДокумент.ОтображатьСетку       = Ложь;
	
	Возврат ТабДокумент;
	
КонецФункции

// Сервисная экспортная функция. Вызывается в основной программе при регистрации обработки в информационной базе
// Возвращает структуру с параметрами регистрации
//
// Возвращаемое значение:
//		Структура с полями:
//			Вид - строка, вид обработки, один из возможных: "ДополнительнаяОбработка", "ДополнительныйОтчет", 
//					"ЗаполнениеОбъекта", "Отчет", "ПечатнаяФорма", "СозданиеСвязанныхОбъектов"
//			Назначение - Массив строк имен объектов метаданных в формате: 
//					<ИмяКлассаОбъектаМетаданного>.[ * | <ИмяОбъектаМетаданных>]. 
//					Например, "Документ.СчетЗаказ" или "Справочник.*". Параметр имеет смысл только для назначаемых обработок, для глобальных может не задаваться.
//			Наименование - строка - Наименование обработки, которым будет заполнено наименование элемента справочника по умолчанию.
//			Информация  - строка - Краткая информация или описание по обработке.
//			Версия - строка - Версия обработки в формате “<старший номер>.<младший номер>” используется при загрузке обработок в информационную базу.
//			БезопасныйРежим - булево - Принимает значение Истина или Ложь, в зависимости от того, требуется ли устанавливать или отключать безопасный режим 
//							исполнения обработок. Если истина, обработка будет запущена в безопасном режиме. 
//
//
Функция СведенияОВнешнейОбработке() Экспорт
	
	//Инициализируем структуру с параметрами регистрации
	
	//Определяем список объектов, вызывающих обработку
	ОбъектыНазначенияФормы = Новый Массив;
	ОбъектыНазначенияФормы.Добавить("Документ.ОплатаПоСреднемуЗаработку");
	
	ПараметрыРегистрации = ПолучитьПараметрыРегистрации(ОбъектыНазначенияФормы);
	ПараметрыРегистрации.Версия = Метаданные().Комментарий;
	
	//Определяем команды для печати формы
	
	ТаблицаКоманд = ПолучитьТаблицуКоманд();
	
	ДобавитьКоманду(ТаблицаКоманд,
	Метаданные().Представление() + " (Внешняя печ. форма)", // Представление команды в пользовательском интерфейсе
	Метаданные().Имя,				// Уникальный идентификатор команды
	);
	
	ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

// Формирует структуру с параметрами регистрации регистрации обработки в информационной базе
//
// Параметры:
//	ОбъектыНазначенияФормы - Массив - Массив строк имен объектов метаданных в формате: 
//					<ИмяКлассаОбъектаМетаданного>.[ * | <ИмяОбъектаМетаданных>]. 
//					или строка с именем объекта метаданных 
//	НаименованиеОбработки - строка - Наименование обработки, которым будет заполнено наименование элемента справочника по умолчанию.
//							Необязательно, по умолчанию синоним или представление объекта
//	Информация  - строка - Краткая информация или описание обработки.
//							Необязательно, по умолчанию комментарий объекта
//	Версия - строка - Версия обработки в формате “<старший номер>.<младший номер>” используется при загрузке обработок в информационную базу.
//
//
// Возвращаемое значение:
//		Структура
//
Функция ПолучитьПараметрыРегистрации(ОбъектыНазначенияФормы = Неопределено, НаименованиеОбработки = "", Информация = "", Версия = "1.0")
	
	Если ТипЗнч(ОбъектыНазначенияФормы) = Тип("Строка") Тогда
		ОбъектНазначенияФормы = ОбъектыНазначенияФормы;
		ОбъектыНазначенияФормы = Новый Массив;
		ОбъектыНазначенияФормы.Добавить(ОбъектНазначенияФормы);
	КонецЕсли; 
	
	ПараметрыРегистрации = Новый Структура;
	ПараметрыРегистрации.Вставить("Вид", "ПечатнаяФорма");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Назначение", ОбъектыНазначенияФормы);
	
	Если Не ЗначениеЗаполнено(НаименованиеОбработки) Тогда
		НаименованиеОбработки = ЭтотОбъект.Метаданные().Представление();
	КонецЕсли; 
	ПараметрыРегистрации.Вставить("Наименование", НаименованиеОбработки);
	
	Если Не ЗначениеЗаполнено(Информация) Тогда
		Информация = ЭтотОбъект.Метаданные().Комментарий;
	КонецЕсли; 
	ПараметрыРегистрации.Вставить("Информация", Информация);
	
	ПараметрыРегистрации.Вставить("Версия", Версия);
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

// Вспомогательная процедура.
//
Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование = "ВызовСерверногоМетода", ПоказыватьОповещение = Ложь, Модификатор = "ПечатьMXL")
	
	НоваяКоманда = ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление = Представление;
	НоваяКоманда.Идентификатор = Идентификатор;
	НоваяКоманда.Использование = Использование;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
	НоваяКоманда.Модификатор = Модификатор;
	
КонецПроцедуры

// Формирует таблицу значений с командами печати
//	
// Возвращаемое значение:
//		ТаблицаЗначений
//
Функция ПолучитьТаблицуКоманд()
	
	Команды = Новый ТаблицаЗначений;
	
	//Представление команды в пользовательском интерфейсе
	Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	
	//Уникальный идентификатор команды или имя макета печати
	Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	
	//Способ вызова команды: "ОткрытиеФормы", "ВызовКлиентскогоМетода", "ВызовСерверногоМетода"
	// "ОткрытиеФормы" - применяется только для отчетов и дополнительных отчетов
	// "ВызовКлиентскогоМетода" - вызов процедуры Печать(), определённой в модуле формы обработки
	// "ВызовСерверногоМетода" - вызов процедуры Печать(), определённой в модуле объекта обработки
	Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	
	//Показывать оповещение.
	//Если Истина, требуется показать оповещение при начале и при завершении работы обработки. 
	//Имеет смысл только при запуске обработки без открытия формы
	Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
	
	//Дополнительный модификатор команды. 
	//Используется для дополнительных обработок печатных форм на основе табличных макетов.
	//Для таких команд должен содержать строку ПечатьMXL
	Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
	
	Возврат Команды;
	
КонецФункции

// Экспортная процедура печати, вызываемая из основной программы
//
// Параметры:
// ВХОДЯЩИЕ:
//  МассивОбъектовНазначения - Массив - список объектов ссылочного типа для печати документа
//                 Как правило, содержит один элемент с ссылкой на вызвавший форму объект (документ, справочник)
//
// ИСХОДЯЩИЕ:
//  КоллекцияПечатныхФорм - ТаблицаЗначений - таблица сформированных табличных документов.
//                 Как правило, содержит одну строку с именем текущей печатной формы
//  ОбъектыПечати - СписокЗначений - список объектов печати. 
//  ПараметрыВывода - Структура - Параметры сформированных табличных документов. Содержит поля:
//  						ДоступнаПечатьПоКомплектно - булево - по умолчанию Ложь
//							ПолучательЭлектронногоПисьма
//							ОтправительЭлектронногоПисьма
//
Процедура Печать(МассивОбъектовНазначения, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПриказДонор") Тогда
		
		ТабличныйДокумент = СформироватьПечатнуюФорму(МассивОбъектовНазначения, ОбъектыПечати, "ПФ_MXL_Приказ");
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
		КоллекцияПечатныхФорм,
		"ПриказДонор",
		"Приказ донор",
		ТабличныйДокумент
		);
		
	КонецЕсли;
	
КонецПроцедуры

