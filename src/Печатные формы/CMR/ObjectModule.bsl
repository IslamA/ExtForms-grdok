// Функция получает данные для формирования печатной формы Транспортная накладная.
//
Функция ПолучитьДанныеДляПечатнойФормыТранспортнаяНакладнаяЛокальная(ТаблицаНакладных) 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаНакладных.ТранспортнаяНакладная КАК ТранспортнаяНакладная,
	|	ТаблицаНакладных.ПорядковыйНомер КАК ПорядковыйНомер
	|ПОМЕСТИТЬ ТаблицаТранспортныхНакладныхБезОснований
	|ИЗ
	|	&ТаблицаНакладных КАК ТаблицаНакладных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаНакладных.ТранспортнаяНакладная КАК Документ.ТранспортнаяНакладная) КАК ТранспортнаяНакладная,
	|	ТаблицаНакладных.ПорядковыйНомер КАК ПорядковыйНомер,
	|	ТранспортнаяНакладнаяДокументыОснования.ДокументОснование КАК ДокументОснование,
	|	ТранспортнаяНакладнаяДокументыОснования.НомерСтроки КАК НомерСтрокиВТранспортнойНакладной
	|ПОМЕСТИТЬ ТаблицаТранспортныхНакладных
	|ИЗ
	|	ТаблицаТранспортныхНакладныхБезОснований КАК ТаблицаНакладных
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ТранспортнаяНакладная.ДокументыОснования КАК ТранспортнаяНакладнаяДокументыОснования
	|		ПО ТаблицаНакладных.ТранспортнаяНакладная = ТранспортнаяНакладнаяДокументыОснования.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная КАК Ссылка,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.Номер КАК Номер,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.Дата КАК Дата,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.Организация КАК Организация,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.Грузополучатель КАК Грузополучатель,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.Грузоотправитель КАК Грузоотправитель,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.ЗаказчикПеревозки КАК ЗаказчикПеревозок,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.Отпустил.Наименование КАК Кладовщик,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.ОтпустилДолжность КАК ДолжностьКладовщика,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.Перевозчик КАК Перевозчик,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.Водитель КАК Водитель,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.ВидПеревозки КАК ВидПеревозки,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.АвтомобильМарка КАК МаркаАвтомобиля,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.АвтомобильГосударственныйНомер КАК ГосНомерАвтомобиля,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.ГосударственныйНомерПрицепа КАК ГосНомерПрицепа,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.АдресПогрузки КАК АдресПогрузки,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.АдресДоставки КАК АдресДоставки,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.АдресДоставкиЗначенияПолей КАК АдресДоставкиЗначенияПолей,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.СрокДоставки КАК СрокДоставки,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.АвтомобильГрузоподъемностьВТоннах КАК ГрузоподъемностьВТоннахАвтомобиля,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.АвтомобильВместимостьВКубическихМетрах КАК ВместимостьВКубическихМетрахАвтомобиля,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.АвтомобильТип КАК ТипАвтомобиля,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.МассаБрутто КАК МассаБрутто,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная.Прицеп КАК Прицеп,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная._НачалоЗагрузки КАК НачалоЗагрузки,
	|	ТаблицаТранспортныхНакладных.ТранспортнаяНакладная._ОкончаниеЗагрузки КАК ОкончаниеЗагрузки,
	|	ТаблицаТранспортныхНакладных.ПорядковыйНомер,
	|	ТаблицаТранспортныхНакладных.ДокументОснование
	|ИЗ
	|	ТаблицаТранспортныхНакладных КАК ТаблицаТранспортныхНакладных
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаТранспортныхНакладных.ПорядковыйНомер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументыОснования.ТранспортнаяНакладная КАК Ссылка,
	|	ДокументыОснования.ПорядковыйНомер КАК ПорядковыйНомер,
	|	ВЫБОР
	|		КОГДА ВидыНоменклатуры.ИспользоватьИндивидуальноеНаименованиеПриПечати
	|			ТОГДА ЕСТЬNULL(ВидыНоменклатуры.НаименованиеДляПечати, """")
	|		ИНАЧЕ &НаименованиеДляПечатиВидовНоменклатуры
	|	КОНЕЦ КАК НаименованиеВидаНоменклатуры
	|ИЗ
	|	ТаблицаТранспортныхНакладных КАК ДокументыОснования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров.Товары КАК ДокументТовары
	|		ПО ДокументыОснования.ДокументОснование = ДокументТовары.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ПО (ВидыНоменклатуры.Ссылка = ДокументТовары.Номенклатура.ВидНоменклатуры)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументыОснования.ТранспортнаяНакладная,
	|	ДокументыОснования.ПорядковыйНомер,
	|	ВЫБОР
	|		КОГДА ВидыНоменклатуры.ИспользоватьИндивидуальноеНаименованиеПриПечати
	|			ТОГДА ЕСТЬNULL(ВидыНоменклатуры.НаименованиеДляПечати, """")
	|		ИНАЧЕ &НаименованиеДляПечатиВидовНоменклатуры
	|	КОНЕЦ
	|ИЗ
	|	ТаблицаТранспортныхНакладных КАК ДокументыОснования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровПоставщику.Товары КАК ДокументТовары
	|		ПО ДокументыОснования.ДокументОснование = ДокументТовары.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ПО (ВидыНоменклатуры.Ссылка = ДокументТовары.Номенклатура.ВидНоменклатуры)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументыОснования.ТранспортнаяНакладная,
	|	ДокументыОснования.ПорядковыйНомер,
	|	ВЫБОР
	|		КОГДА ВидыНоменклатуры.ИспользоватьИндивидуальноеНаименованиеПриПечати
	|			ТОГДА ЕСТЬNULL(ВидыНоменклатуры.НаименованиеДляПечати, """")
	|		ИНАЧЕ &НаименованиеДляПечатиВидовНоменклатуры
	|	КОНЕЦ
	|ИЗ
	|	ТаблицаТранспортныхНакладных КАК ДокументыОснования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации.Товары КАК ДокументТовары
	|		ПО ДокументыОснования.ДокументОснование = ДокументТовары.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ПО (ВидыНоменклатуры.Ссылка = ДокументТовары.Номенклатура.ВидНоменклатуры)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументыОснования.ТранспортнаяНакладная,
	|	ДокументыОснования.ПорядковыйНомер,
	|	ВЫБОР
	|		КОГДА ВидыНоменклатуры.ИспользоватьИндивидуальноеНаименованиеПриПечати
	|			ТОГДА ЕСТЬNULL(ВидыНоменклатуры.НаименованиеДляПечати, """")
	|		ИНАЧЕ &НаименованиеДляПечатиВидовНоменклатуры
	|	КОНЕЦ
	|ИЗ
	|	ТаблицаТранспортныхНакладных КАК ДокументыОснования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК ДокументТовары
	|		ПО ДокументыОснования.ДокументОснование = ДокументТовары.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|		ПО (ВидыНоменклатуры.Ссылка = ДокументТовары.Номенклатура.ВидНоменклатуры)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядковыйНомер,
	|	НаименованиеВидаНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументТовары.Ссылка,
	|	ДокументТовары.Номенклатура,
	|	СУММА(ДокументТовары.СуммаСНДС) КАК СуммаСНДС,
	|	СУММА(ДокументТовары.Количество) КАК Количество,
	|	СУММА(ДокументТовары._КоличествоМест) КАК КоличествоМест
	|ИЗ
	|	ТаблицаТранспортныхНакладных КАК ДокументыОснования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК ДокументТовары
	|		ПО ДокументыОснования.ДокументОснование = ДокументТовары.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументТовары.Номенклатура,
	|	ДокументТовары.Ссылка";
	Запрос.УстановитьПараметр("ТаблицаНакладных", ТаблицаНакладных);
	Запрос.УстановитьПараметр("НаименованиеДляПечатиВидовНоменклатуры", Константы.НаименованиеДляПечатиВидовНоменклатуры.Получить());
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("ТаблицаРезультата", РезультатЗапроса[2].Выгрузить());
	СтруктураРезультата.Вставить("РезультатИменаТоваров", РезультатЗапроса[3]);
	СтруктураРезультата.Вставить("ТаблицаТоваров", РезультатЗапроса[4].Выгрузить());
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат СтруктураРезультата
	
КонецФункции

Функция СформироватьПечатнуюФормуТранспортнойНакладной(МассивОбъектов, ОбъектыПечати, КомплектыПечати = Неопределено) 
	
	Если ТипЗнч(МассивОбъектов[0]) = Тип("ДокументСсылка.ТранспортнаяНакладная") Тогда
		МассивОбъектовНакладная = МассивОбъектов;
		
	ИначеЕсли  ТипЗнч(МассивОбъектов[0]) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Док.Ссылка
		|ИЗ
		|	Документ.ТранспортнаяНакладная.ДокументыОснования КАК Док
		|ГДЕ
		|	Док.ДокументОснование В(&МассивОбъектов)
		|	И Док.Ссылка.ПометкаУдаления";
		
		МассивОбъектовНакладная = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ИначеЕсли ТипЗнч(МассивОбъектов[0]) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Док.Ссылка
		|ИЗ
		|	Документ.ТранспортнаяНакладная.ДокументыОснования КАК Док
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|		ПО Док.ДокументОснование = РеализацияТоваровУслугТовары.Ссылка
		|ГДЕ
		|	РеализацияТоваровУслугТовары.ЗаказКлиента В(&МассивОбъектов)
		|	И Док.Ссылка.ПометкаУдаления";
	
		МассивОбъектовНакладная = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	КонецЕсли;	
	
	Если МассивОбъектовНакладная.Количество() = 0 Тогда
		
		Стр = "Не введен документ ""Транспортная накладная""
		|
		|Цепочка документов:
		|
		|Реализация товаров и услуг
		|	Транспортная накладная";
		
		ВызватьИсключение Стр;
		
	КонецЕсли;	
	
	
	ТаблицаНакладныхНаПечать = Новый ТаблицаЗначений;
	ОписаниеТипаТранспортнаяНакладная = Новый ОписаниеТипов("ДокументСсылка.ТранспортнаяНакладная");
	ОписаниеТипаЧисло = Новый ОписаниеТипов("Число");
	ТаблицаНакладныхНаПечать.Колонки.Добавить("ТранспортнаяНакладная", ОписаниеТипаТранспортнаяНакладная);
	ТаблицаНакладныхНаПечать.Колонки.Добавить("ПорядковыйНомер", ОписаниеТипаЧисло);
	
	ПорядковыйНомер = 0;
	Для Каждого Накладная Из МассивОбъектовНакладная Цикл 
		СтрокаТаблицы = ТаблицаНакладныхНаПечать.Добавить();	
		СтрокаТаблицы.ТранспортнаяНакладная = Накладная;
		СтрокаТаблицы.ПорядковыйНомер = ПорядковыйНомер;
		ПорядковыйНомер = ПорядковыйНомер  + 1;
	КонецЦикла;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ТРАНСПОРТНАЯ_НАКЛАДНАЯ";
		
	УстановитьПривилегированныйРежим(Истина);
	
	//МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени("Документ.ТранспортнаяНакладная");
	ДанныеДляПечати = ПолучитьДанныеДляПечатнойФормыТранспортнаяНакладнаяЛокальная(ТаблицаНакладныхНаПечать);
		
	ЗаполнитьТабличныйДокументТН(
			ТабличныйДокумент,
			ДанныеДляПечати,
			ОбъектыПечати,
			КомплектыПечати);

	Возврат ТабличныйДокумент;
	
КонецФункции

Процедура ЗаполнитьТабличныйДокументТН(ТабличныйДокумент, СтруктураДанных, ОбъектыПечати, КомплектыПечати)
	
	Макет = ПолучитьМакет("МТТН");
	
	ТаблицаДанныхДляПечати = СтруктураДанных.ТаблицаРезультата;
	ДанныеСсылкиДокументов = СтруктураДанных.РезультатИменаТоваров.Выбрать();
	ДанныеДляКоличестваМест= СтруктураДанных.ТаблицаТоваров;
	
	ПервыйДокумент = Истина;
	
	Для Каждого ДанныеПечати Из ТаблицаДанныхДляПечати Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
			
		ПервыйДокумент    = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Для печати комплектов
		Если КомплектыПечати <> Неопределено И КомплектыПечати.Колонки.Найти("Ссылка") <> Неопределено Тогда
			КомплектПечатиПоСсылке = КомплектыПечати.Найти(ДанныеПечати.Ссылка,"Ссылка");
			Если КомплектПечатиПоСсылке = Неопределено Тогда
				КомплектПечатиПоСсылке = КомплектыПечати[0];
			КонецЕсли;
			Если КомплектПечатиПоСсылке.Экземпляров = 0 Тогда
				Продолжить
			КонецЕсли;
		КонецЕсли;
		
		// Если ТТН с доставкой и нашли связанные с доставкой ошибки - перейдем к следующему документу
		СтруктураЗаданиеНаПеревозку = Новый Структура("НеНайденоЗаданиеНаПеревозку,
													  |БолееОдногоВхожденияВЗаданияНаПеревозку,
													  |РаспоряжениеНеПроведено",
													  Ложь,Ложь,Ложь);
		ЕстьОшибкиДоставки = Ложь;
		ЗаполнитьЗначенияСвойств(СтруктураЗаданиеНаПеревозку,ДанныеПечати);
		
		Если СтруктураЗаданиеНаПеревозку.НеНайденоЗаданиеНаПеревозку Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для документа %1 не найдено задание на перевозку. 
					|Печать формы 1-Т для документов с доставкой возможна после включения документа в задание на перевозку.'"),
				ДанныеПечати.Ссылка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДанныеПечати.Ссылка);
			ЕстьОшибкиДоставки = Истина;
		КонецЕсли;
		
		Если СтруктураЗаданиеНаПеревозку.БолееОдногоВхожденияВЗаданияНаПеревозку Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Невозможно напечатать форму 1-Т для %1, т.к. найдено более одного задания на перевозку, 
					|в которые включен этот документ.'"),
				ДанныеПечати.Ссылка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДанныеПечати.Ссылка);
			ЕстьОшибкиДоставки = Истина;
		КонецЕсли;
		
		Если СтруктураЗаданиеНаПеревозку.РаспоряжениеНеПроведено Тогда
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Документ %1 не проведен. Печать товарно - транспортной накладной не будет выполнена.'"),
				ДанныеПечати.Ссылка);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				ДанныеПечати.Ссылка);
			ЕстьОшибкиДоставки = Истина;
		КонецЕсли;
		
		Если ЕстьОшибкиДоставки Тогда
			Продолжить;
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		//ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьМакета, ДанныеПечати.Ссылка);
		
		
		СведенияОГрузополучателе  = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Грузополучатель,  ДанныеПечати.Дата);
		СведенияОГрузоотправитель = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Грузоотправитель, ДанныеПечати.Дата);
		СведенияОПеревозчике      = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Перевозчик, ДанныеПечати.Дата);
		СведенияОВодителе         = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеПечати.Водитель, ДанныеПечати.Дата);
		
		ПредставлениеГрузоотправителя = "";
		ПредставлениеПеревозчика      = "";
		Перевозчик                    = "";
		Грузоотправитель              = "";
		ЕдиницаИзмеренияВеса = "кг";
		
		ОрганизацияКИ = _ОбщегоНазначенияДоп.ПолучитьКИ(ДанныеПечати.Организация);
		
		ОбластьМакета.Параметры.ОрганизацияEN      = _ОбщегоНазначенияДоп.ПолучитьДопРеквизит(ДанныеПечати.Организация, "Наименование ENG");
		ОбластьМакета.Параметры.ОрганизацияАдресEN = ОрганизацияКИ["Адрес ENG"];
		ОбластьМакета.Параметры.ОрганизацияИНН     = ДанныеПечати.Организация.ИНН;
		ОбластьМакета.Параметры.ОрганизацияКПП     = ДанныеПечати.Организация.КПП;
		
		//ОбластьМакета.Параметры.СведенияОГрузоотправитель=ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправитель,"ПолноеНаименование");;
		//ОбластьМакета.Параметры.ГрузоотрпавительАдрес=ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправитель,"ФактическийАдрес");
		
		ОбластьМакета.Параметры.СведенияОГрузополучателе=ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе,"ПолноеНаименование");
		ОбластьМакета.Параметры.ГрузополучательАдрес=ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе,"ФактическийАдрес");
		Если ЗначениеЗаполнено(ДанныеПечати.АдресПогрузки) Тогда
			ОбластьМакета.Параметры.АдресПогрузки = ДанныеПечати.АдресПогрузки;
		Иначе	
			ОбластьМакета.Параметры.АдресПогрузки = ОрганизацияКИ["Адрес ENG"];
		КонецЕсли;
		//ОбластьМакета.Параметры.ПечОрганизацияАдресПогрузкиСтрана="Россия";
		//ОбластьМакета.Параметры.НомерДокумента=ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ДанныеПечати.ДокументОснование.Номер)+" от "+Формат(ДанныеПечати.ДокументОснование.Дата,"ДФ=dd.MM.yyyy");
		//ОбластьМакета.Параметры.НомерCMR=ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ДанныеПечати.ДокументОснование.Номер,Истина,Истина);
		//ОбластьМакета.Параметры.НомерСЧФ=ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ДанныеПечати.СчетФактура.Номер)+" от "+Формат(ДанныеПечати.СчетФактура.Дата,"ДФ=dd.MM.yyyy");
		//ОбластьМакета.Параметры.Договор="Договор № "+ДанныеПечати.ДокументОснование.Договор.Номер+" от "+Формат(ДанныеПечати.ДокументОснование.Договор.Дата,"ДФ=dd.MM.yyyy");

		ОбластьМакета.Параметры.ДатаДокумента = Формат(ДанныеПечати.ДокументОснование.Дата, "ДФ=dd.MM.yyyy");
		ОбластьМакета.Параметры.ДоговорНомер  = ДанныеПечати.ДокументОснование.Договор.Номер;
		ОбластьМакета.Параметры.ДоговорДата   = Формат(ДанныеПечати.ДокументОснование.Договор.Дата, "ДФ=dd.MM.yyyy");
		ОбластьМакета.Параметры.ЗаказНомер = ДанныеПечати.ДокументОснование.ЗаказКлиента.Номер;
		ОбластьМакета.Параметры.ЗаказДата  = Формат(ДанныеПечати.ДокументОснование.ЗаказКлиента.Дата, "ДФ=dd.MM.yyyy");
		
		ОбластьМакета.Параметры.АдресДоставки       = ДанныеПечати.АдресДоставки;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ИтогоКоличествоМест=0;
		ИтогоСуммаОтгрузки=0;
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		Для Каждого Стр Из ДанныеДляКоличестваМест Цикл
			Если Стр.Ссылка<>ДанныеПечати.ДокументОснование Тогда Продолжить; КонецЕсли;
			ИтогоСуммаОтгрузки=ИтогоСуммаОтгрузки+Стр.СуммаСНДС;
			ОбластьМакета.Параметры.КолвоМест = Стр.КоличествоМест;
			ОбластьМакета.Параметры.Вес   = ДанныеПечати.МассаБрутто;
			ОбластьМакета.Параметры.Объем = Стр.Количество;
			ОбластьМакета.Параметры.Товар = _ОбщегоНазначенияДоп.ПолучитьДопРеквизит(Стр.Номенклатура, "Описание товара ENG");
			ОбластьМакета.Параметры.КодТНВЭД = Стр.Номенклатура.Артикул;
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЦикла;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		
		ОбластьМакета.Параметры.ДатаДокумента=Формат(ДанныеПечати.ДокументОснование.Дата,"ДФ=dd.MM.yyyy");
		ОбластьМакета.Параметры.Водитель = ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ДанныеПечати.Водитель);
		ОбластьМакета.Параметры.РегНомер=ДанныеПечати.ГосНомерАвтомобиля;
		ОбластьМакета.Параметры.РегНомерПрицеп=ДанныеПечати.ГосНомерПрицепа;
		ОбластьМакета.Параметры.СтоимостьГруза=ИтогоСуммаОтгрузки;
		ОбластьМакета.Параметры.Валюта=ДанныеПечати.ДокументОснование.Валюта.Наименование;
		
		ОбластьМакета.Параметры.Франко = _ОбщегоНазначенияДоп.ПолучитьДопРеквизит(ДанныеПечати.ДокументОснование.ЗаказКлиента, "Условие доставки Инкотермс");
		ОбластьМакета.Параметры.ДатаЗагрузки = Формат(ДанныеПечати.НачалоЗагрузки, "ДФ=dd.MM.yyyy");
		ОбластьМакета.Параметры.ДатаОкончанияЗагрузки = Формат(ДанныеПечати.ОкончаниеЗагрузки, "ДФ=dd.MM.yyyy");
		
		ОбластьМакета.Параметры.ВремяНачалаЗагрузки = Формат(ДанныеПечати.НачалоЗагрузки, "ДФ='HH ''час'' mm ''мин'''");
		ОбластьМакета.Параметры.ВремяОкончанияЗагрузки = Формат(ДанныеПечати.ОкончаниеЗагрузки, "ДФ='HH ''час'' mm ''мин'''");
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ГрузоподъемностьВТоннахАвтомобиля      = Формат(ДанныеПечати.ГрузоподъемностьВТоннахАвтомобиля,"");
		ВместимостьВКубическихМетрахАвтомобиля = Формат(ДанныеПечати.ВместимостьВКубическихМетрахАвтомобиля,"");
		
		ИнформацияОбАвтомобиле = ""
			+ ?(ПустаяСтрока(ДанныеПечати.ТипАвтомобиля),"",Строка(ДанныеПечати.ТипАвтомобиля) + ", ")
			+ ?(ПустаяСтрока(ДанныеПечати.МаркаАвтомобиля),"",ДанныеПечати.МаркаАвтомобиля  + ", ")
			+ ?(ПустаяСтрока(ДанныеПечати.ГосНомерАвтомобиля),"",ДанныеПечати.ГосНомерАвтомобиля  + ", ")
			+ ?(ПустаяСтрока(ГрузоподъемностьВТоннахАвтомобиля),"",ГрузоподъемностьВТоннахАвтомобиля + " " + НСтр("ru = 'т'")  + ", ")
			+ ?(ПустаяСтрока(ВместимостьВКубическихМетрахАвтомобиля),"",ВместимостьВКубическихМетрахАвтомобиля + " " + НСтр("ru = 'куб. м'"))
			+ ?(ПустаяСтрока(ДанныеПечати.Прицеп),"","/"+ДанныеПечати.Прицеп)
			+ ?(ПустаяСтрока(ДанныеПечати.ГосНомерПрицепа),"",", "+ДанныеПечати.ГосНомерПрицепа);
		ИнформацияОбАвтомобиле = СокрЛП(ИнформацияОбАвтомобиле);
		
		Пока Прав(ИнформацияОбАвтомобиле,1) = "," Цикл
			ИнформацияОбАвтомобиле = Лев(ИнформацияОбАвтомобиле, СтрДлина(ИнформацияОбАвтомобиле)-1)
		КонецЦикла;
		
		МассаБруттоСтрока = НСтр("ru = '%МассаБрутто% кг'");
		МассаБруттоСтрока = СтрЗаменить(МассаБруттоСтрока, "%МассаБрутто%", ДанныеПечати.МассаБрутто);
		
		
		// Выведем нужное количество экземпляров (при печати комплектов)
		Если КомплектыПечати <> Неопределено
		 И КомплектыПечати.Колонки.Найти("Ссылка") <> Неопределено 
		 И КомплектПечатиПоСсылке.Экземпляров > 1 Тогда
			ОбластьКопирования = ТабличныйДокумент.ПолучитьОбласть(НомерСтрокиНачало,,ТабличныйДокумент.ВысотаТаблицы);
			Для Итератор = 2 По КомплектПечатиПоСсылке.Экземпляров Цикл
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабличныйДокумент.Вывести(ОбластьКопирования);
			КонецЦикла;
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура Печать(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт 
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "МеждународнаяТоварноТранспортнаяНакладная") Тогда
		
		ТабличныйДокумент = СформироватьПечатнуюФормуТранспортнойНакладной(МассивОбъектов, ОбъектыПечати);
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
						КоллекцияПечатныхФорм,
						"МеждународнаяТоварноТранспортнаяНакладная", "Международная товарно-транспортная накладная(CMR)",
						ТабличныйДокумент);
	КонецЕсли;
	
	ФормированиеПечатныхФорм.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм);
	
КонецПроцедуры
	
//
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ РЕГИСТРАЦИИ ОБРАБОТКИ
//

// Сервисная экспортная функция. Вызывается в основной программе при регистрации обработки в информационной базе
// Возвращает структуру с параметрами регистрации
//
// Возвращаемое значение:
//		Структура с полями:
//			Вид - строка, вид обработки, один из возможных: "ДополнительнаяОбработка", "ДополнительныйОтчет", 
//					"ЗаполнениеОбъекта", "Отчет", "ПечатнаяФорма", "СозданиеСвязанныхОбъектов"
//			Назначение - Массив строк имен объектов метаданных в формате: 
//					<ИмяКлассаОбъектаМетаданного>.[ * | <ИмяОбъектаМетаданных>]. 
//					Например, "Документ.СчетЗаказ" или "Справочник.*". Параметр имеет смысл только для назначаемых обработок, для глобальных может не задаваться.
//			Наименование - строка - Наименование обработки, которым будет заполнено наименование элемента справочника по умолчанию.
//			Информация  - строка - Краткая информация или описание по обработке.
//			Версия - строка - Версия обработки в формате “<старший номер>.<младший номер>” используется при загрузке обработок в информационную базу.
//			БезопасныйРежим - булево - Принимает значение Истина или Ложь, в зависимости от того, требуется ли устанавливать или отключать безопасный режим 
//							исполнения обработок. Если истина, обработка будет запущена в безопасном режиме. 
//
//
Функция СведенияОВнешнейОбработке() Экспорт
	
	//Инициализируем структуру с параметрами регистрации
	
	//Определяем список объектов, вызывающих обработку
	ОбъектыНазначенияФормы = Новый Массив;
	ОбъектыНазначенияФормы.Добавить("Документ.ЗаказКлиента");
	ОбъектыНазначенияФормы.Добавить("Документ.ТранспортнаяНакладная");
	ОбъектыНазначенияФормы.Добавить("Документ.РеализацияТоваровУслуг");
	
	ПараметрыРегистрации = ПолучитьПараметрыРегистрации(ОбъектыНазначенияФормы);
	ПараметрыРегистрации.Версия = ЭтотОбъект.Метаданные().Комментарий;

	//Определяем команды для печати формы
	
	ТаблицаКоманд = ПолучитьТаблицуКоманд();

	ДобавитьКоманду(ТаблицаКоманд,
		"Международная товарно-транспортная накладная(CMR)", // Представление команды в пользовательском интерфейсе
		"МеждународнаяТоварноТранспортнаяНакладная",		 // Уникальный идентификатор команды
	);

	ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);

	Возврат ПараметрыРегистрации;

КонецФункции

//
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ РЕГИСТРАЦИИ ОБРАБОТКИ
//
// Формирует структуру с параметрами регистрации регистрации обработки в информационной базе
//
// Параметры:
//	ОбъектыНазначенияФормы - Массив - Массив строк имен объектов метаданных в формате: 
//					<ИмяКлассаОбъектаМетаданного>.[ * | <ИмяОбъектаМетаданных>]. 
//					или строка с именем объекта метаданных 
//	НаименованиеОбработки - строка - Наименование обработки, которым будет заполнено наименование элемента справочника по умолчанию.
//							Необязательно, по умолчанию синоним или представление объекта
//	Информация  - строка - Краткая информация или описание обработки.
//							Необязательно, по умолчанию комментарий объекта
//	Версия - строка - Версия обработки в формате “<старший номер>.<младший номер>” используется при загрузке обработок в информационную базу.
//
//
// Возвращаемое значение:
//		Структура
//
Функция ПолучитьПараметрыРегистрации(ОбъектыНазначенияФормы = Неопределено, НаименованиеОбработки = "", Информация = "", Версия = "1.0")

	Если ТипЗнч(ОбъектыНазначенияФормы) = Тип("Строка") Тогда
		ОбъектНазначенияФормы = ОбъектыНазначенияФормы;
		ОбъектыНазначенияФормы = Новый Массив;
		ОбъектыНазначенияФормы.Добавить(ОбъектНазначенияФормы);
	КонецЕсли; 
	
	ПараметрыРегистрации = Новый Структура;
	ПараметрыРегистрации.Вставить("Вид", "ПечатнаяФорма");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Назначение", ОбъектыНазначенияФормы);
	
	Если Не ЗначениеЗаполнено(НаименованиеОбработки) Тогда
		НаименованиеОбработки = ЭтотОбъект.Метаданные().Представление();
	КонецЕсли; 
	ПараметрыРегистрации.Вставить("Наименование", НаименованиеОбработки);
	
	Если Не ЗначениеЗаполнено(Информация) Тогда
		Информация = ЭтотОбъект.Метаданные().Комментарий;
	КонецЕсли; 
	ПараметрыРегистрации.Вставить("Информация", Информация);
	
	ПараметрыРегистрации.Вставить("Версия", Версия);

	Возврат ПараметрыРегистрации;

КонецФункции

// Формирует таблицу значений с командами печати
//	
// Возвращаемое значение:
//		ТаблицаЗначений
//
Функция ПолучитьТаблицуКоманд()

	Команды = Новый ТаблицаЗначений;
	
	//Представление команды в пользовательском интерфейсе
	Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	
	//Уникальный идентификатор команды или имя макета печати
	Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	
	//Способ вызова команды: "ОткрытиеФормы", "ВызовКлиентскогоМетода", "ВызовСерверногоМетода"
	// "ОткрытиеФормы" - применяется только для отчетов и дополнительных отчетов
	// "ВызовКлиентскогоМетода" - вызов процедуры Печать(), определённой в модуле формы обработки
	// "ВызовСерверногоМетода" - вызов процедуры Печать(), определённой в модуле объекта обработки
	Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	
	//Показывать оповещение.
	//Если Истина, требуется показать оповещение при начале и при завершении работы обработки. 
	//Имеет смысл только при запуске обработки без открытия формы
	Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
	
	//Дополнительный модификатор команды. 
	//Используется для дополнительных обработок печатных форм на основе табличных макетов.
	//Для таких команд должен содержать строку ПечатьMXL
	Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));

	Возврат Команды;

КонецФункции

// Вспомогательная процедура.
//
Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование = "ВызовСерверногоМетода", ПоказыватьОповещение = Ложь, Модификатор = "ПечатьMXL")

	НоваяКоманда = ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление = Представление;
	НоваяКоманда.Идентификатор = Идентификатор;
	НоваяКоманда.Использование = Использование;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
	НоваяКоманда.Модификатор = Модификатор;

КонецПроцедуры

