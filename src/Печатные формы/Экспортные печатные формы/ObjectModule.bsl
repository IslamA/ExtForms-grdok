
Функция СведенияОВнешнейОбработке() Экспорт
	
	ПараметрыРегистрации = Новый Структура;
	МассивНазначений = Новый Массив;
	МассивНазначений.Добавить("Документ.ЗаказКлиента"); //Указываем документ к которому делаем внешнюю печ. форму
	
	ПараметрыРегистрации.Вставить("Вид",             "ПечатнаяФорма"); //может быть – ПечатнаяФорма, ЗаполнениеОбъекта, ДополнительныйОтчет, СозданиеСвязанныхОбъектов…
	ПараметрыРегистрации.Вставить("Назначение",      МассивНазначений);
	ПараметрыРегистрации.Вставить("Наименование",    Метаданные().Представление()); //имя под которым обработка будет зарегестрирована в справочнике внешних обработок
	ПараметрыРегистрации.Вставить("БезопасныйРежим", ЛОЖЬ);
	ПараметрыРегистрации.Вставить("Версия",          Метаданные().Комментарий);
	ПараметрыРегистрации.Вставить("Информация",      "Внешние печатные формы для экспорта (комплект)");
	
	ТаблицаКоманд = ПолучитьТаблицуКоманд();
	//ДобавитьКоманду(ТаблицаКоманд, "Invoice (ENG)",                 "Invoice_ENG",               "ВызовСерверногоМетода", Истина, "ПечатьMXL");
	//ДобавитьКоманду(ТаблицаКоманд, "Invoice (RUS)",                 "Invoice_RUS",               "ВызовСерверногоМетода", Истина, "ПечатьMXL");
	ДобавитьКоманду(ТаблицаКоманд, "Packing list to invoice (ENG)", "PackingListToInvoice_ENG",  "ВызовСерверногоМетода", Истина, "ПечатьMXL");
	ДобавитьКоманду(ТаблицаКоманд, "Packing list to invoice (RUS)", "PackingListToInvoice_RUS",  "ВызовСерверногоМетода", Истина, "ПечатьMXL");
	ДобавитьКоманду(ТаблицаКоманд, "Заявка / Order-note (ENG)",     "Заявка / Order-note (ENG)", "ВызовСерверногоМетода", Истина, "ПечатьMXL");
	ДобавитьКоманду(ТаблицаКоманд, "Заявка",                        "Заявка",                    "ВызовСерверногоМетода", Истина, "ПечатьMXL");
	//ДобавитьКоманду(ТаблицаКоманд, "Расчет себестоимости латофлекса", "PackingListToInvoice_RUS", "ВызовСерверногоМетода", Истина, "ПечатьMXL");
	
	ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
		
	Возврат ПараметрыРегистрации;	
		
КонецФункции

Функция ПолучитьТаблицуКоманд()
	
	Команды = Новый ТаблицаЗначений;
	Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));//как будет выглядеть описание печ.формы для пользователя
	Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка")); //имя макета печ.формы
	Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка")); //ВызовСерверногоМетода
	Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
	Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
	Возврат Команды;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
	
	НоваяКоманда = ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление = Представление;
	НоваяКоманда.Идентификатор = Идентификатор;
	НоваяКоманда.Использование = Использование;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
	НоваяКоманда.Модификатор = Модификатор;
	
КонецПроцедуры

Процедура Печать(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт

	// Проверяем, нужно ли для макета СчетЗаказ формировать табличный документ.
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Invoice_ENG") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
		"Invoice_ENG", "Invoice (ENG)", СформироватьПечатнуюФорму_Invoice_ENG(МассивОбъектов, ОбъектыПечати));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Invoice_RUS") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
		"Invoice_RUS", "Invoice (RUS)", СформироватьПечатнуюФорму_Invoice_RUS(МассивОбъектов, ОбъектыПечати));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "PackingListToInvoice_ENG") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
		"PackingListToInvoice_ENG", "Packing list to invoice (ENG)", СформироватьПечатнуюФорму_PackingListToInvoice_ENG(МассивОбъектов, ОбъектыПечати));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "PackingListToInvoice_RUS") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
		"PackingListToInvoice_RUS", "Packing list to invoice (RUS)", СформироватьПечатнуюФорму_PackingListToInvoice_RUS(МассивОбъектов, ОбъектыПечати));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Заявка") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
		"Заявка", "Заявка", СформироватьПечатнуюФорму_Заявка(МассивОбъектов, ОбъектыПечати));
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Заявка / Order-note (ENG)") Тогда
		// Формируем табличный документ и добавляем его в коллекцию печатных форм.
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
		"Заявка / Order-note (ENG)", "Заявка / Order-note (ENG)", СформироватьПечатнуюФорму_ЗаявкаENG(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;

КонецПроцедуры

Функция СформироватьПечатнуюФорму_Invoice_ENG(МассивОбъектов, ОбъектыПечати, КомплектыПечати = Неопределено) Экспорт 
	
	// Создаем табличный документ и устанавливаем имя параметров печати.
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ИмяПараметровПечати = "ПараметрыПечати_Invoice_ENG";
	
	НомерТипаДокумента = 0;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого ЭлементМассива Из МассивОбъектов Цикл
		
		НомерТипаДокумента = НомерТипаДокумента + 1;
		Если НомерТипаДокумента > 1 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ДанныеДляПечати = ПолучитьДанныеЗаказКлиента(ЭлементМассива);
		
		ИмяПФ = "ПФ_MXL_Инвойс_ENG";
		ЗаполнитьТабличныйДокумент(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, КомплектыПечати, ИмяПФ);
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ТабличныйДокумент;
	
КонецФункции	

Функция СформироватьПечатнуюФорму_Invoice_RUS(МассивОбъектов, ОбъектыПечати, КомплектыПечати = Неопределено) Экспорт 
	
	// Создаем табличный документ и устанавливаем имя параметров печати.
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ИмяПараметровПечати = "ПараметрыПечати_Invoice_RUS";
	
	НомерТипаДокумента = 0;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого ЭлементМассива Из МассивОбъектов Цикл
		
		НомерТипаДокумента = НомерТипаДокумента + 1;
		Если НомерТипаДокумента > 1 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ДанныеДляПечати = ПолучитьДанныеЗаказКлиента(ЭлементМассива);
		
		ИмяПФ = "ПФ_MXL_Инвойс_RUS";
		ЗаполнитьТабличныйДокумент(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, КомплектыПечати, ИмяПФ);
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ТабличныйДокумент;
	
КонецФункции	

Функция СформироватьПечатнуюФорму_PackingListToInvoice_ENG(МассивОбъектов, ОбъектыПечати, КомплектыПечати = Неопределено) Экспорт 
	
	// Создаем табличный документ и устанавливаем имя параметров печати.
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ИмяПараметровПечати = "ПараметрыПечати_PackingListToInvoice_ENG";
	
	НомерТипаДокумента = 0;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого ЭлементМассива Из МассивОбъектов Цикл
		
		НомерТипаДокумента = НомерТипаДокумента + 1;
		Если НомерТипаДокумента > 1 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ДанныеДляПечати = ПолучитьДанныеЗаказКлиента(ЭлементМассива);
		
		ИмяПФ = "ПФ_MXL_PackingListToInvoice_ENG";
		ЗаполнитьТабличныйДокумент(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, КомплектыПечати, ИмяПФ);
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ТабличныйДокумент;
	
КонецФункции	

Функция СформироватьПечатнуюФорму_PackingListToInvoice_RUS(МассивОбъектов, ОбъектыПечати, КомплектыПечати = Неопределено) Экспорт 
	
	// Создаем табличный документ и устанавливаем имя параметров печати.
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ИмяПараметровПечати = "ПараметрыПечати_PackingListToInvoice_RUS";
	
	НомерТипаДокумента = 0;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого ЭлементМассива Из МассивОбъектов Цикл
		
		НомерТипаДокумента = НомерТипаДокумента + 1;
		Если НомерТипаДокумента > 1 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ДанныеДляПечати = ПолучитьДанныеЗаказКлиента(ЭлементМассива);
		
		ИмяПФ = "ПФ_MXL_PackingListToInvoice_RUS";
		ЗаполнитьТабличныйДокумент(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, КомплектыПечати, ИмяПФ);
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ТабличныйДокумент;
	
КонецФункции	

Функция СформироватьПечатнуюФорму_Заявка(МассивОбъектов, ОбъектыПечати, КомплектыПечати = Неопределено) Экспорт 
	
	// Создаем табличный документ и устанавливаем имя параметров печати.
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ИмяПараметровПечати = "ПараметрыПечати_Заявка";
	
	НомерТипаДокумента = 0;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого ЭлементМассива Из МассивОбъектов Цикл
		
		НомерТипаДокумента = НомерТипаДокумента + 1;
		Если НомерТипаДокумента > 1 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ДанныеДляПечати = ПолучитьДанныеЗаказКлиента(ЭлементМассива);
		
		ИмяПФ = "ПФ_MXL_Заявка";
		ЗаполнитьТабличныйДокумент(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, КомплектыПечати, ИмяПФ, Истина);
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ТабличныйДокумент;
	
КонецФункции	

Функция СформироватьПечатнуюФорму_ЗаявкаENG(МассивОбъектов, ОбъектыПечати, КомплектыПечати = Неопределено) Экспорт 
	
	// Создаем табличный документ и устанавливаем имя параметров печати.
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ИмяПараметровПечати = "ПараметрыПечати_Заявка";
	
	НомерТипаДокумента = 0;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого ЭлементМассива Из МассивОбъектов Цикл
		
		НомерТипаДокумента = НомерТипаДокумента + 1;
		Если НомерТипаДокумента > 1 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ДанныеДляПечати = ПолучитьДанныеЗаказКлиента(ЭлементМассива);
		
		ИмяПФ = "ПФ_MXL_ЗаявкаEN";
		ЗаполнитьТабличныйДокумент(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, КомплектыПечати, ИмяПФ, Истина);
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПолучитьДанныеЗаказКлиента(МассивОбъектов)
	
	//Если ПараметрыПечати <> Неопределено И ПараметрыПечати.Свойство("ОтображатьСкидки") Тогда
	//	ОтображатьСкидки = ПараметрыПечати.ОтображатьСкидки;
	//Иначе
		ОтображатьСкидки = (Константы.ОтображениеСкидокВПечатныхФормахДокументовПродажи.Получить()
			<> Перечисления.ВариантыВыводаСкидокВПечатныхФормах.НеВыводитьСкидки);
	//КонецЕсли; 
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ОтветственныеЛицаСервер.СформироватьВременнуюТаблицуОтветственныхЛицДокументов(МассивОбъектов, МенеджерВременныхТаблиц);	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Документы.Ссылка КАК Ссылка,
	|	Документы.Номер КАК Номер,
	|	Документы.Дата КАК Дата,
	|	НЕОПРЕДЕЛЕНО КАК ДокументОснование,
	|	ЕСТЬNULL(Документы.БанковскийСчет.Владелец, Документы.Организация) КАК Организация,
	|	Документы.Организация КАК ОрганизацияПоставщик,
	|	ТаблицаОтветственныеЛица.РуководительНаименование КАК Руководитель,
	|	ТаблицаОтветственныеЛица.РуководительДолжность КАК ДолжностьРуководителя,
	|	ТаблицаОтветственныеЛица.ГлавныйБухгалтерНаименование КАК ГлавныйБухгалтер,
	|	ВЫБОР
	|		КОГДА Документы.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС)
	|				ИЛИ Документы.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК УчитыватьНДС,
	|	Документы.Контрагент КАК Контрагент,
	|	Документы.Контрагент.ЮрФизЛицо КАК КонтрагентЮрФизЛицо,
	|	Документы.БанковскийСчет КАК БанковскийСчет,
	|	Документы.БанковскийСчет.НомерСчета КАК НомерБанковскогоСчета,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчет.РучноеИзменениеРеквизитовБанка
	|			ТОГДА Документы.БанковскийСчет.БИКБанка
	|		ИНАЧЕ КлассификаторБанковРФ.Код
	|	КОНЕЦ КАК БИКБанк,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчет.РучноеИзменениеРеквизитовБанка
	|			ТОГДА Документы.БанковскийСчет.НаименованиеБанка
	|		ИНАЧЕ КлассификаторБанковРФ.Наименование
	|	КОНЕЦ КАК НаименованиеБанка,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчет.РучноеИзменениеРеквизитовБанка
	|			ТОГДА Документы.БанковскийСчет.КоррСчетБанка
	|		ИНАЧЕ КлассификаторБанковРФ.КоррСчет
	|	КОНЕЦ КАК КоррСчетБанка,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчет.РучноеИзменениеРеквизитовБанка
	|			ТОГДА Документы.БанковскийСчет.ГородБанка
	|		ИНАЧЕ КлассификаторБанковРФ.Город
	|	КОНЕЦ КАК ГородБанка,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчет.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА Документы.БанковскийСчет.БИКБанкаДляРасчетов
	|		ИНАЧЕ КлассификаторБанковКорреспондентовРФ.Код
	|	КОНЕЦ КАК БИКБанкаДляРасчетов,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчет.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА Документы.БанковскийСчет.НаименованиеБанкаДляРасчетов
	|		ИНАЧЕ КлассификаторБанковКорреспондентовРФ.Наименование
	|	КОНЕЦ КАК НаименованиеБанкаДляРасчетов,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчет.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА Документы.БанковскийСчет.КоррСчетБанкаДляРасчетов
	|		ИНАЧЕ КлассификаторБанковКорреспондентовРФ.КоррСчет
	|	КОНЕЦ КАК КоррСчетБанкаДляРасчетов,
	|	ВЫБОР
	|		КОГДА Документы.БанковскийСчет.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА Документы.БанковскийСчет.ГородБанкаДляРасчетов
	|		ИНАЧЕ КлассификаторБанковКорреспондентовРФ.Город
	|	КОНЕЦ КАК ГородБанкаДляРасчетов,
	|	Документы.БанковскийСчет.ТекстКорреспондента КАК БанковскийСчетТекстКорреспондента,
	|	Документы.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	Документы.Валюта КАК Валюта,
	|	Документы.Менеджер.ФизическоеЛицо.Наименование КАК Менеджер,
	|	Документы.ДополнительнаяИнформация КАК ДополнительнаяИнформация,
	|	Документы.СуммаДокумента КАК СуммаКВозврату,
	|	ЛОЖЬ КАК ЧастичнаяОплата,
	|	Документы.НазначениеПлатежа КАК НазначениеПлатежа,
	|	100 КАК ПроцентОплаты,
	|	Документы.СуммаДокумента КАК СуммаДокумента,
	|	Документы.Грузоотправитель КАК Грузоотправитель,
	|	Документы.Грузополучатель КАК Грузополучатель,
	|	Документы.ИдентификаторПлатежа КАК ИдентификаторПлатежа,
	|	ЛОЖЬ КАК СчетКВозврату,
	|	Документы.БанковскийСчетКонтрагента
	|ИЗ
	|	Документ.ЗаказКлиента КАК Документы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОтветственныеЛица КАК ТаблицаОтветственныеЛица
	|		ПО Документы.Ссылка = ТаблицаОтветственныеЛица.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанковРФ КАК КлассификаторБанковРФ
	|		ПО Документы.БанковскийСчет.Банк = КлассификаторБанковРФ.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанковРФ КАК КлассификаторБанковКорреспондентовРФ
	|		ПО Документы.БанковскийСчет.БанкДляРасчетов = КлассификаторБанковКорреспондентовРФ.Ссылка
	|ГДЕ
	|	Документы.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Документы.МоментВремени
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	1 КАК Порядок,
	|	ЭтапыГрафикаОплаты.Ссылка КАК Ссылка,
	|	ЭтапыГрафикаОплаты.НомерСтроки КАК НомерСтроки,
	|	ЭтапыГрафикаОплаты.ДатаПлатежа КАК ДатаПлатежа,
	|	ЭтапыГрафикаОплаты.ПроцентПлатежа КАК ПроцентПлатежа,
	|	ЭтапыГрафикаОплаты.СуммаПлатежа КАК СуммаПлатежа,
	|	ЛОЖЬ КАК ЭтоЗалогЗаТару
	|ИЗ
	|	Документ.ЗаказКлиента.ЭтапыГрафикаОплаты КАК ЭтапыГрафикаОплаты
	|ГДЕ
	|	ЭтапыГрафикаОплаты.Ссылка В(&МассивОбъектов)
	|	И ЭтапыГрафикаОплаты.СуммаПлатежа <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2,
	|	ЭтапыГрафикаОплаты.Ссылка,
	|	ЭтапыГрафикаОплаты.НомерСтроки,
	|	ЭтапыГрафикаОплаты.ДатаПлатежа,
	|	ЭтапыГрафикаОплаты.ПроцентЗалогаЗаТару,
	|	ЭтапыГрафикаОплаты.СуммаЗалогаЗаТару,
	|	ИСТИНА
	|ИЗ
	|	Документ.ЗаказКлиента.ЭтапыГрафикаОплаты КАК ЭтапыГрафикаОплаты
	|ГДЕ
	|	ЭтапыГрафикаОплаты.Ссылка В(&МассивОбъектов)
	|	И ЭтапыГрафикаОплаты.Ссылка.ТребуетсяЗалогЗаТару
	|	И ЭтапыГрафикаОплаты.СуммаЗалогаЗаТару <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	Порядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка,
	|	ВариантыКомплектацииНоменклатуры.Ссылка КАК ВариантКомплектацииНоменклатуры,
	|	ВариантыКомплектацииНоменклатуры.ВариантПредставленияНабораВПечатныхФормах КАК ВариантПредставленияНабораВПечатныхФормах,
	|	ВариантыКомплектацииНоменклатуры.ВариантРасчетаЦеныНабора КАК ВариантРасчетаЦеныНабора,
	|	Таблица.НоменклатураНабора КАК НоменклатураНабора,
	|	Таблица.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	Таблица.НомерСтроки КАК НомерСтроки,
	|	Таблица.Номенклатура КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика,
	|	Таблица.Упаковка КАК Упаковка,
	|	Таблица.Количество КАК Количество,
	|	Таблица.КоличествоУпаковок КАК КоличествоУпаковок,
	|	ВЫБОР
	|		КОГДА &ОтображатьСкидки
	|			ТОГДА Таблица.Цена
	|		ИНАЧЕ Таблица.Сумма / Таблица.КоличествоУпаковок
	|	КОНЕЦ КАК Цена,
	|	Таблица.Сумма КАК Сумма,
	|	Таблица.СтавкаНДС КАК СтавкаНДС,
	|	Таблица.СуммаНДС КАК СуммаНДС,
	|	Таблица.ДатаОтгрузки КАК ДатаОтгрузки,
	|	ВЫБОР
	|		КОГДА Таблица.Ссылка.ВернутьМногооборотнуюТару
	|				И Таблица.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоВозвратнаяТара,
	|	ВЫБОР
	|		КОГДА &ОтображатьСкидки
	|			ТОГДА Таблица.СуммаРучнойСкидки + Таблица.СуммаАвтоматическойСкидки
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаСкидки,
	|	Таблица.Сумма + Таблица.СуммаРучнойСкидки + Таблица.СуммаАвтоматическойСкидки КАК СуммаБезСкидки,
	|	Таблица.Содержание КАК Содержание,
	|	Таблица._КоличествоМест КАК _КоличествоМест,
	|	Таблица._КоличествоМест * ЕСТЬNULL(Таблица._ЕдиницаМест.Вес, 0) КАК _ЕдиницаМестВес
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыКомплектацииНоменклатуры КАК ВариантыКомплектацииНоменклатуры
	|		ПО (ВариантыКомплектацииНоменклатуры.Владелец = Таблица.НоменклатураНабора)
	|			И (ВариантыКомплектацииНоменклатуры.Характеристика = Таблица.ХарактеристикаНабора)
	|			И (ВариантыКомплектацииНоменклатуры.Основной)
	|ГДЕ
	|	Таблица.Ссылка В(&МассивОбъектов)
	|	И Таблица.Отменено = ЛОЖЬ
	|	И (Таблица.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|			ИЛИ Таблица.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|				И (НЕ Таблица.Ссылка.ВернутьМногооборотнуюТару
	|					ИЛИ Таблица.Ссылка.ТребуетсяЗалогЗаТару))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Ссылка КАК Ссылка,
	|	Таблица.НоменклатураНабора КАК НоменклатураНабора,
	|	Таблица.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	МИНИМУМ(Таблица.НомерСтроки) КАК НомерСтроки,
	|	СУММА(Таблица.Сумма) КАК Сумма,
	|	СУММА(Таблица.СуммаНДС) КАК СуммаНДС,
	|	МАКСИМУМ(Таблица.ДатаОтгрузки) КАК ДатаОтгрузки,
	|	СУММА(Таблица.СуммаСкидки) КАК СуммаСкидки,
	|	СУММА(Таблица.СуммаБезСкидки) КАК СуммаБезСкидки
	|ПОМЕСТИТЬ ВременнаяТаблицаНаборыПодготовка
	|ИЗ
	|	Товары КАК Таблица
	|ГДЕ
	|	Таблица.НоменклатураНабора <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.Ссылка,
	|	Таблица.НоменклатураНабора,
	|	Таблица.ХарактеристикаНабора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Ссылка КАК Ссылка,
	|	Товары.ВариантКомплектацииНоменклатуры КАК ВариантКомплектацииНоменклатуры,
	|	Товары.ВариантПредставленияНабораВПечатныхФормах КАК ВариантПредставленияНабораВПечатныхФормах,
	|	Товары.ВариантРасчетаЦеныНабора КАК ВариантРасчетаЦеныНабора,
	|	Товары.НоменклатураНабора,
	|	Товары.ХарактеристикаНабора,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	ВЫБОР
	|		КОГДА Товары.ВариантКомплектацииНоменклатуры.НоменклатураОсновногоКомпонента = Товары.Номенклатура
	|				И Товары.ВариантКомплектацииНоменклатуры.ХарактеристикаОсновногоКомпонента = Товары.Характеристика
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОсновнаяКомплектующая,
	|	0 КАК КоличествоПоУмолчанию,
	|	Товары.Количество КАК Количество
	|ПОМЕСТИТЬ ВременнаяТаблицаНаборыДополнительноЧастьПервая
	|ИЗ
	|	Товары КАК Товары
	|ГДЕ
	|	Товары.НоменклатураНабора <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Т.Ссылка,
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка,
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка.ВариантПредставленияНабораВПечатныхФормах,
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка.ВариантРасчетаЦеныНабора,
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка.Владелец,
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка.Характеристика,
	|	ВариантыКомплектацииНоменклатурыТовары.Номенклатура,
	|	ВариантыКомплектацииНоменклатурыТовары.Характеристика,
	|	ЛОЖЬ,
	|	СУММА(ВариантыКомплектацииНоменклатурыТовары.Количество),
	|	0
	|ИЗ
	|	Справочник.ВариантыКомплектацииНоменклатуры.Товары КАК ВариантыКомплектацииНоменклатурыТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			Т.Ссылка КАК Ссылка
	|		ИЗ
	|			Товары КАК Т) КАК Т
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				Т.ВариантКомплектацииНоменклатуры
	|			ИЗ
	|				Товары КАК Т)
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.Ссылка,
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка,
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка.Владелец,
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка.Характеристика,
	|	ВариантыКомплектацииНоменклатурыТовары.Номенклатура,
	|	ВариантыКомплектацииНоменклатурыТовары.Характеристика,
	|	ВариантыКомплектацииНоменклатурыТовары.Упаковка,
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка.ВариантПредставленияНабораВПечатныхФормах,
	|	ВариантыКомплектацииНоменклатурыТовары.Ссылка.ВариантРасчетаЦеныНабора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Ссылка,
	|	Таблица.ВариантКомплектацииНоменклатуры,
	|	Таблица.ВариантРасчетаЦеныНабора,
	|	Таблица.ВариантПредставленияНабораВПечатныхФормах,
	|	Таблица.НоменклатураНабора,
	|	Таблица.ХарактеристикаНабора,
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика,
	|	МАКСИМУМ(Таблица.ОсновнаяКомплектующая) КАК ОсновнаяКомплектующая,
	|	СУММА(Таблица.КоличествоПоУмолчанию) КАК КоличествоПоУмолчанию,
	|	СУММА(Таблица.Количество) КАК Количество
	|ПОМЕСТИТЬ ВременнаяТаблицаНаборыДополнительноЧастьВторая
	|ИЗ
	|	ВременнаяТаблицаНаборыДополнительноЧастьПервая КАК Таблица
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.Ссылка,
	|	Таблица.ВариантКомплектацииНоменклатуры,
	|	Таблица.ВариантРасчетаЦеныНабора,
	|	Таблица.ВариантПредставленияНабораВПечатныхФормах,
	|	Таблица.НоменклатураНабора,
	|	Таблица.ХарактеристикаНабора,
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Результат.Ссылка,
	|	Результат.ВариантКомплектацииНоменклатуры,
	|	Результат.ВариантРасчетаЦеныНабора,
	|	Результат.ВариантПредставленияНабораВПечатныхФормах,
	|	Результат.НоменклатураНабора,
	|	Результат.ХарактеристикаНабора,
	|	(ВЫРАЗИТЬ(МИНИМУМ(ВЫБОР
	|				КОГДА Результат.КоличествоПоУмолчанию <> 0
	|						И Результат.ОсновнаяКомплектующая
	|					ТОГДА Результат.Количество / Результат.КоличествоПоУмолчанию
	|				ИНАЧЕ NULL
	|			КОНЕЦ) + 0.5 КАК ЧИСЛО(10, 0))) - 1 КАК Количество
	|ПОМЕСТИТЬ ВременнаяТаблицаНаборыДополнительно
	|ИЗ
	|	ВременнаяТаблицаНаборыДополнительноЧастьВторая КАК Результат
	|
	|СГРУППИРОВАТЬ ПО
	|	Результат.Ссылка,
	|	Результат.ВариантКомплектацииНоменклатуры,
	|	Результат.ВариантРасчетаЦеныНабора,
	|	Результат.ВариантПредставленияНабораВПечатныхФормах,
	|	Результат.НоменклатураНабора,
	|	Результат.ХарактеристикаНабора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаНаборыДополнительно.ВариантКомплектацииНоменклатуры,
	|	ВЫБОР
	|		КОГДА Таблица.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию)
	|			ТОГДА ВЫБОР
	|					КОГДА ВременнаяТаблицаНаборыДополнительно.ВариантПредставленияНабораВПечатныхФормах = ЗНАЧЕНИЕ(Перечисление.ВариантыПредставленияНаборовВПечатныхФормах.ТолькоНабор)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыПредставленияНаборовВПечатныхФормах.НаборИКомплектующие)
	|					ИНАЧЕ ВременнаяТаблицаНаборыДополнительно.ВариантПредставленияНабораВПечатныхФормах
	|				КОНЕЦ
	|		ИНАЧЕ ВременнаяТаблицаНаборыДополнительно.ВариантПредставленияНабораВПечатныхФормах
	|	КОНЕЦ КАК ВариантПредставленияНабораВПечатныхФормах,
	|	ВЫБОР
	|		КОГДА Таблица.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию)
	|			ТОГДА ВЫБОР
	|					КОГДА ВЫБОР
	|								КОГДА ВременнаяТаблицаНаборыДополнительно.ВариантПредставленияНабораВПечатныхФормах = ЗНАЧЕНИЕ(Перечисление.ВариантыПредставленияНаборовВПечатныхФормах.ТолькоНабор)
	|									ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыПредставленияНаборовВПечатныхФормах.НаборИКомплектующие)
	|								ИНАЧЕ ВременнаяТаблицаНаборыДополнительно.ВариантПредставленияНабораВПечатныхФормах
	|							КОНЕЦ = ЗНАЧЕНИЕ(Перечисление.ВариантыПредставленияНаборовВПечатныхФормах.НаборИКомплектующие)
	|							И ВременнаяТаблицаНаборыДополнительно.ВариантРасчетаЦеныНабора В (ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоЦенам), ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаЦенНаборов.ЦенаЗадаетсяЗаНаборРаспределяетсяПоДолям))
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаЦенНаборов.РассчитываетсяИзЦенКомплектующих)
	|					ИНАЧЕ ВременнаяТаблицаНаборыДополнительно.ВариантРасчетаЦеныНабора
	|				КОНЕЦ
	|		ИНАЧЕ ВременнаяТаблицаНаборыДополнительно.ВариантРасчетаЦеныНабора
	|	КОНЕЦ КАК ВариантРасчетаЦеныНабора,
	|	Таблица.Ссылка КАК Ссылка,
	|	Таблица.НоменклатураНабора КАК НоменклатураНабора,
	|	Таблица.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	Таблица.НомерСтроки КАК НомерСтроки,
	|	ЕСТЬNULL(ВременнаяТаблицаНаборыДополнительно.Количество, 1) КАК КоличествоУпаковок,
	|	ЕСТЬNULL(ВременнаяТаблицаНаборыДополнительно.Количество, 1) КАК Количество,
	|	Таблица.Сумма КАК Сумма,
	|	Таблица.СуммаНДС КАК СуммаНДС,
	|	Таблица.ДатаОтгрузки КАК ДатаОтгрузки,
	|	Таблица.СуммаСкидки КАК СуммаСкидки,
	|	Таблица.СуммаБезСкидки КАК СуммаБезСкидки
	|ПОМЕСТИТЬ ВременнаяТаблицаНаборы
	|ИЗ
	|	ВременнаяТаблицаНаборыПодготовка КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаНаборыДополнительно КАК ВременнаяТаблицаНаборыДополнительно
	|		ПО Таблица.НоменклатураНабора = ВременнаяТаблицаНаборыДополнительно.НоменклатураНабора
	|			И Таблица.ХарактеристикаНабора = ВременнаяТаблицаНаборыДополнительно.ХарактеристикаНабора
	|			И Таблица.Ссылка = ВременнаяТаблицаНаборыДополнительно.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Ссылка КАК Ссылка,
	|	Товары.ВариантПредставленияНабораВПечатныхФормах КАК ВариантПредставленияНабораВПечатныхФормах,
	|	Товары.ВариантРасчетаЦеныНабора КАК ВариантРасчетаЦеныНабора,
	|	Товары.НоменклатураНабора КАК НоменклатураНабора,
	|	Товары.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	Товары.ЭтоНабор КАК ЭтоНабор,
	|	Товары.ЭтоКомплектующие КАК ЭтоКомплектующие,
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Номенклатура.Код КАК Код,
	|	Товары.Номенклатура.Артикул КАК Артикул,
	|	Товары.Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(Товары.Номенклатура.ЕдиницаИзмерения)
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(Товары.Упаковка.ЕдиницаИзмерения)
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	Товары.Цена КАК Цена,
	|	Товары.Сумма КАК Сумма,
	|	Товары.СтавкаНДС КАК СтавкаНДС,
	|	Товары.СуммаНДС КАК СуммаНДС,
	|	НЕОПРЕДЕЛЕНО КАК ВидЦеныИсполнителя,
	|	Товары.ДатаОтгрузки КАК ДатаОтгрузки,
	|	ЕСТЬNULL(Товары.Характеристика.НаименованиеПолное, """") КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(Товары.Упаковка.Числитель, 1) / ЕСТЬNULL(Товары.Упаковка.Знаменатель, 1) = 1
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ Товары.Упаковка.Наименование
	|	КОНЕЦ КАК Упаковка,
	|	Товары.СуммаСкидки КАК СуммаСкидки,
	|	Товары.СуммаБезСкидки КАК СуммаБезСкидки,
	|	Товары.Содержание КАК Содержание,
	|	Товары.ЭтоВозвратнаяТара КАК ЭтоВозвратнаяТара,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА Товары.Номенклатура
	|		ИНАЧЕ Товары.Упаковка
	|	КОНЕЦ КАК УпаковкаСсылка,
	|	Товары.Количество КАК Количество,
	|	Товары.Характеристика КАК ХарактеристикаСсылка,
	|	Товары._КоличествоМест КАК _КоличествоМест,
	|	Товары._ЕдиницаМестВес КАК _ЕдиницаМестВес
	|ИЗ
	|	(ВЫБРАТЬ
	|		Таблица.Ссылка КАК Ссылка,
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(ВременнаяТаблицаНаборы.НомерСтроки, 0) <> 0
	|				ТОГДА ВременнаяТаблицаНаборы.ВариантПредставленияНабораВПечатныхФормах
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВариантыПредставленияНаборовВПечатныхФормах.ПустаяСсылка)
	|		КОНЕЦ КАК ВариантПредставленияНабораВПечатныхФормах,
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(ВременнаяТаблицаНаборы.НомерСтроки, 0) <> 0
	|				ТОГДА ВременнаяТаблицаНаборы.ВариантРасчетаЦеныНабора
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВариантыРасчетаЦенНаборов.ПустаяСсылка)
	|		КОНЕЦ КАК ВариантРасчетаЦеныНабора,
	|		Таблица.НоменклатураНабора КАК НоменклатураНабора,
	|		Таблица.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(ВременнаяТаблицаНаборы.НомерСтроки, 0) <> 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ЭтоКомплектующие,
	|		ЛОЖЬ КАК ЭтоНабор,
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(ВременнаяТаблицаНаборы.НомерСтроки, 0) <> 0
	|				ТОГДА ВременнаяТаблицаНаборы.НомерСтроки
	|			ИНАЧЕ Таблица.НомерСтроки
	|		КОНЕЦ КАК НомерСтроки,
	|		Таблица.Номенклатура КАК Номенклатура,
	|		Таблица.Количество КАК Количество,
	|		Таблица.КоличествоУпаковок КАК КоличествоУпаковок,
	|		Таблица.Цена КАК Цена,
	|		Таблица.Сумма КАК Сумма,
	|		Таблица.СтавкаНДС КАК СтавкаНДС,
	|		Таблица.СуммаНДС КАК СуммаНДС,
	|		Таблица.ДатаОтгрузки КАК ДатаОтгрузки,
	|		Таблица.Характеристика КАК Характеристика,
	|		Таблица.Упаковка КАК Упаковка,
	|		Таблица.СуммаСкидки КАК СуммаСкидки,
	|		Таблица.СуммаБезСкидки КАК СуммаБезСкидки,
	|		Таблица.Содержание КАК Содержание,
	|		Таблица.ЭтоВозвратнаяТара КАК ЭтоВозвратнаяТара,
	|		Таблица._КоличествоМест КАК _КоличествоМест,
	|		Таблица._ЕдиницаМестВес КАК _ЕдиницаМестВес
	|	ИЗ
	|		Товары КАК Таблица
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаНаборы КАК ВременнаяТаблицаНаборы
	|			ПО (ВременнаяТаблицаНаборы.НоменклатураНабора = Таблица.НоменклатураНабора)
	|				И (ВременнаяТаблицаНаборы.ХарактеристикаНабора = Таблица.ХарактеристикаНабора)
	|				И (ВременнаяТаблицаНаборы.Ссылка = Таблица.Ссылка)
	|	ГДЕ
	|		(Таблица.НоменклатураНабора = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|				ИЛИ Таблица.НоменклатураНабора <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|					И ВременнаяТаблицаНаборы.ВариантПредставленияНабораВПечатныхФормах В (ЗНАЧЕНИЕ(Перечисление.ВариантыПредставленияНаборовВПечатныхФормах.ТолькоКомплектующие), ЗНАЧЕНИЕ(Перечисление.ВариантыПредставленияНаборовВПечатныхФормах.НаборИКомплектующие)))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВременнаяТаблицаНаборы.Ссылка,
	|		ВременнаяТаблицаНаборы.ВариантПредставленияНабораВПечатныхФормах,
	|		ВременнаяТаблицаНаборы.ВариантРасчетаЦеныНабора,
	|		ВременнаяТаблицаНаборы.НоменклатураНабора,
	|		ВременнаяТаблицаНаборы.ХарактеристикаНабора,
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		ВременнаяТаблицаНаборы.НомерСтроки,
	|		ВременнаяТаблицаНаборы.НоменклатураНабора,
	|		ВременнаяТаблицаНаборы.Количество,
	|		ВременнаяТаблицаНаборы.КоличествоУпаковок,
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(ВременнаяТаблицаНаборы.КоличествоУпаковок, 1) <> 0
	|				ТОГДА ВременнаяТаблицаНаборы.СуммаБезСкидки / ЕСТЬNULL(ВременнаяТаблицаНаборы.КоличествоУпаковок, 1)
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВременнаяТаблицаНаборы.Сумма,
	|		ВременнаяТаблицаНаборы.НоменклатураНабора.СтавкаНДС,
	|		ВременнаяТаблицаНаборы.СуммаНДС,
	|		ВременнаяТаблицаНаборы.ДатаОтгрузки,
	|		ВременнаяТаблицаНаборы.ХарактеристикаНабора,
	|		ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка),
	|		ВременнаяТаблицаНаборы.СуммаСкидки,
	|		ВременнаяТаблицаНаборы.СуммаБезСкидки,
	|		"""",
	|		ЛОЖЬ,
	|		ВременнаяТаблицаНаборы.КоличествоУпаковок,
	|		0
	|	ИЗ
	|		ВременнаяТаблицаНаборы КАК ВременнаяТаблицаНаборы
	|	ГДЕ
	|		ВременнаяТаблицаНаборы.ВариантПредставленияНабораВПечатныхФормах В (ЗНАЧЕНИЕ(Перечисление.ВариантыПредставленияНаборовВПечатныхФормах.ТолькоНабор), ЗНАЧЕНИЕ(Перечисление.ВариантыПредставленияНаборовВПечатныхФормах.НаборИКомплектующие))) КАК Товары
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки,
	|	ЭтоНабор УБЫВ";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ОтображатьСкидки", ОтображатьСкидки);
	
	ПакетРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	СтруктураДанныхДляПечати = Новый Структура;
	СтруктураДанныхДляПечати.Вставить("РезультатПоШапке", ПакетРезультатовЗапроса[0]);
	СтруктураДанныхДляПечати.Вставить("РезультатПоЭтапамОплаты", ПакетРезультатовЗапроса[1]);
	СтруктураДанныхДляПечати.Вставить("РезультатПоТабличнойЧасти", ПакетРезультатовЗапроса[ПакетРезультатовЗапроса.Количество() - 1]);
	
	Возврат СтруктураДанныхДляПечати;
	
КонецФункции

Процедура ЗаполнитьТабличныйДокумент(ТабличныйДокумент, ДанныеДляПечати, ОбъектыПечати, КомплектыПечати, ИмяПФ, ОтдельнаяСтрокаНаименование = Ложь)
	
	Перем КомплектПечатиПоСсылке;
	
	//ШаблоныОшибок = Новый Структура;
	//ШаблоныОшибок.Вставить("Товары", НСтр("ru = 'В документе %1 отсутствуют товары. Печать счета на оплату не требуется'"));
	//ШаблоныОшибок.Вставить("ЗаменяющиеТовары", НСтр("ru = 'В документе %1 отсутствуют заменяющие товары. Печать счета на оплату не требуется'"));
	//ШаблоныОшибок.Вставить("Этапы", НСтр("ru = 'В документе %1 отсутствуют этапы оплаты. Печать счета на оплату не требуется'"));
	
	Шапка       = ДанныеДляПечати.РезультатПоШапке.Выбрать();
	ЭтапыОплаты = ДанныеДляПечати.РезультатПоЭтапамОплаты.Выгрузить();
	Товары = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выгрузить();
	
	Свойства = ПолучитьСтруктуруСвойств();
	
	ПервыйДокумент = Истина;
	
	Пока Шапка.Следующий() Цикл
		
		Отказ = Ложь;
		
		//ПодготовкаДляПечатиКомплектов(ДанныеПечати, КомплектыПечати, КомплектПечатиПоСсылке, Отказ);
		//Если Отказ Тогда
		//	Продолжить;
		//КонецЕсли;
		
		СтруктураПоиска = Новый Структура("Ссылка", Шапка.Ссылка);
		ТаблицаТовары = Товары.НайтиСтроки(СтруктураПоиска);
		
		Если ПервыйДокумент Тогда
			ПервыйДокумент = Ложь;
		Иначе
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		//ЗаголовокСкидки = ФормированиеПечатныхФорм.НужноВыводитьСкидки(ТаблицаТовары, ИспользоватьРучныеСкидки Или ИспользоватьАвтоматическиеСкидки);
		//ЕстьСкидки = ЗаголовокСкидки.ЕстьСкидки;
		
		//СуффиксОбласти = ?(ДанныеПечати.УчитыватьНДС И НЕ ТолькоЗалогЗаТару И ПоказыватьНДС, "СНДС", "") + ?(ЕстьСкидки, "СоСкидкой", "");
		
		Макет = Новый ТабличныйДокумент;
		//ЗаполнитьРеквизитыШапкиСчетаНаОплату(ДанныеПечати, Макет, ТабличныйДокумент, ТаблицаЭтапыОплаты, ТаблицаТовары);
		
		Макет = ПолучитьМакет(ИмяПФ);

		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		
		ВидКИ = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
		ИностранныйАдрес = ПолучитьДанныеКонтактнойИнформации(Шапка.Контрагент, ВидКИ.Тип, ВидКИ, Шапка.Дата);
		
		ВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
		КонтрагентТелефон = ПолучитьДанныеКонтактнойИнформации(Шапка.Контрагент, ВидКИ.Тип, ВидКИ, Шапка.Дата);
		
		ВидКИ = Справочники.ВидыКонтактнойИнформации.ФаксКонтрагенты;
		КонтрагентФакс = ПолучитьДанныеКонтактнойИнформации(Шапка.Контрагент, ВидКИ.Тип, ВидКИ, Шапка.Дата);
		
		
		СчетКонтрагента = Шапка.БанковскийСчетКонтрагента;
		
		Если ЗначениеЗаполнено(Шапка.Ссылка.Договор) Тогда
			ДоговорКонтрагентаНомер = Шапка.Ссылка.Договор.Номер;
			ДоговорКонтрагентаДата = Шапка.Ссылка.Договор.Дата;
		ИначеЕсли ЗначениеЗаполнено(Шапка.Ссылка.Соглашение) Тогда
			ДоговорКонтрагентаНомер = Шапка.Ссылка.Соглашение.Номер;
			ДоговорКонтрагентаДата = Шапка.Ссылка.Соглашение.Дата;
		Иначе
			ДоговорКонтрагентаНомер = "";
			ДоговорКонтрагентаДата = "";
		КонецЕсли; 
		
		СтруктураДанныхШапки = Новый Структура;
		СтруктураДанныхШапки.Вставить("Номер", 							Шапка.Номер);
		СтруктураДанныхШапки.Вставить("Дата", 							Шапка.Дата);
		СтруктураДанныхШапки.Вставить("ДатаОтгрузки", 					Шапка.Ссылка.ДатаОтгрузки);
		СтруктураДанныхШапки.Вставить("ДоговорКонтрагентаНомер", 		ДоговорКонтрагентаНомер);
		СтруктураДанныхШапки.Вставить("ДоговорКонтрагентаДата", 		Формат(ДоговорКонтрагентаДата,"ДФ=dd.MM.yyyy"));
		СтруктураДанныхШапки.Вставить("КонтрагентКод", 					Шапка.Контрагент.Партнер.Код);
		СтруктураДанныхШапки.Вставить("ВалютаДокумента", 				Шапка.Валюта.Наименование);
		СтруктураДанныхШапки.Вставить("КонтрагентНаименованиеПолное", 	Шапка.Контрагент.НаименованиеПолное);
		СтруктураДанныхШапки.Вставить("ИностранныйАдрес", 				ИностранныйАдрес);
		СтруктураДанныхШапки.Вставить("КонтрагентТелефон", 				КонтрагентТелефон);
		СтруктураДанныхШапки.Вставить("КонтрагентФакс", 				КонтрагентФакс);
		СтруктураДанныхШапки.Вставить("КонтрагентБанк", 				СчетКонтрагента.НаименованиеБанка);
		СтруктураДанныхШапки.Вставить("КонтрагентСчет", 				СчетКонтрагента.НомерСчета);
		СтруктураДанныхШапки.Вставить("Идентификатор", 					ПолучитьДопСведение(СчетКонтрагента, Свойства.Идентификатор));
		СтруктураДанныхШапки.Вставить("ДатаЗаявки",						Формат(Шапка.Дата,"Л=ru; ДФ='dd ММММ yyyy'") + "/" + Формат(Шапка.Дата,"Л=en_GB; ДФ='dd ММММ yyyy'"));
		СтруктураДанныхШапки.Вставить("ДатаЗаявкиENG",	 			    Формат(Шапка.Дата,"Л=en_GB; ДФ='dd ММММ yyyy'"));
		СтруктураДанныхШапки.Вставить("ДоговорКонтрагентаДатаРус",		Формат(ДоговорКонтрагентаДата,"Л=ru; ДФ='dd ММММ yyyy'")) ;
		СтруктураДанныхШапки.Вставить("ДоговорКонтрагентаДатаАнг",		Формат(ДоговорКонтрагентаДата,"Л=en_GB; ДФ='dd ММММ yyyy'")) ;
		СтруктураДанныхШапки.Вставить("ГрузополучательНаименованиеПолное", Шапка.Грузополучатель.НаименованиеПолное);
		
		СчетОрганизации = Шапка.БанковскийСчет;
		СтруктураДанныхШапки.Вставить("ОрганизацияENG",                 ПолучитьДопРеквизит(Шапка.Организация, Свойства.ОрганизацияENG));
		СтруктураДанныхШапки.Вставить("СчетSWIFT",                      СокрЛП(СчетОрганизации.СВИФТБанка));
		СтруктураДанныхШапки.Вставить("AccountWithCorrespondentBank",   СчетОрганизации.СчетВБанкеДляРасчетов);
		СтруктураДанныхШапки.Вставить("СчетБанкENG",                    СчетОрганизации.НаименованиеБанка);
		СтруктураДанныхШапки.Вставить("СчетБанкAddress",                СчетОрганизации.АдресБанка);
		СтруктураДанныхШапки.Вставить("СчетКорБанкSWIFT",               СокрЛП(СчетОрганизации.СВИФТБанкаДляРасчетов));
		СтруктураДанныхШапки.Вставить("СчетКорБанк",                    СчетОрганизации.НаименованиеБанкаДляРасчетов);
		СтруктураДанныхШапки.Вставить("СчетКорБанкАдрес",               СчетОрганизации.АдресБанкаДляРасчетов);
		СтруктураДанныхШапки.Вставить("СчетBeneficiarysAccount",        ПолучитьДопРеквизит(СчетОрганизации, Свойства.BeneficiarysAccount));
		СтруктураДанныхШапки.Вставить("СчетНомер",                      СчетОрганизации.НомерСчета);
		
		//СтруктураДанныхШапки.Вставить("", );
		
		ОбластьМакета.Параметры.Заполнить(СтруктураДанныхШапки);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		
		// Таблица "Товары"
		ОбластьШапкаТаблицы          	= Макет.ПолучитьОбласть("Шапка");
		ОбластьСтрокаТаблицы		 	= Макет.ПолучитьОбласть("Строка");
		ОбластьПодвал        			= Макет.ПолучитьОбласть("Подвал");
		
		Если ОтдельнаяСтрокаНаименование Тогда
			ОбластьМакетаНоменклатура = Макет.ПолучитьОбласть("СтрокаНаименование");
		КонецЕсли; 
		
		ОписаниеENG = "FORMPRESSED BED SLATS (BS L*W*H*R)";
		Если ТаблицаТовары.Количество() Тогда
			ОписаниеENG = ПолучитьДопРеквизит(ТаблицаТовары[0].Номенклатура, Свойства.ОписаниеENG);
		КонецЕсли; 
		
		ОписаниеRUS = "Латофлекс (BS L*W*H*R)";
		Если ТаблицаТовары.Количество() Тогда
			ОписаниеRUS = ПолучитьДопРеквизит(ТаблицаТовары[0].Номенклатура, Свойства.ОписаниеRUS);
		КонецЕсли; 

		
		СтруктураДанныхШапкиТаблицы = Новый Структура;
		Если Шапка.Валюта.Код = "643" Тогда
			СтруктураДанныхШапкиТаблицы.Вставить("val", "rub");
		Иначе
			СтруктураДанныхШапкиТаблицы.Вставить("val", Шапка.Валюта.Наименование);
		КонецЕсли;	
		СтруктураДанныхШапкиТаблицы.Вставить("Вал", Шапка.Валюта.НаименованиеПолное);
		СтруктураДанныхШапкиТаблицы.Вставить("ОписаниеENG", ОписаниеENG);
		СтруктураДанныхШапкиТаблицы.Вставить("ОписаниеRUS", ОписаниеRUS);
		ОбластьШапкаТаблицы.Параметры.Заполнить(СтруктураДанныхШапкиТаблицы);
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		
		ВыводШапки = 0;
		
		ТекНоменклатура = "";

		//МассивПроверкиВывода = Новый Массив;
			
		ИтогоМест			= 0;
		ИтогоОбъем		    = 0;
		ИтогоНетто			= 0;
		ИтогоУпаковка		= 0;
		ИтогоБрутто			= 0;
		ИтогоСумма			= 0;
		ИтогоШт				= 0;
		
		НомерСтроки = 0;

		Для Каждого СтрокаТовары Из ТаблицаТовары Цикл
			
			НомерСтроки = НомерСтроки + 1;
			НомерСтрокиПечать = НомерСтроки;

			Если НомерСтроки = 0 И ВыводШапки <> 2 Тогда
				ВыводШапки = 1;
			КонецЕсли;
			
			Товар = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
				СтрокаТовары.НаименованиеПолное,
				СтрокаТовары.Характеристика,
				,
				, // Серия
				, //Содержание
				СтрокаТовары.ЭтоВозвратнаяТара);

			Длина="";
			Ширина="";
			Толщина="";
			Покрытие="";

			Если ЗначениеЗаполнено(СтрокаТовары.ХарактеристикаСсылка) Тогда
				
				Длина = ПолучитьДопРеквизит(СтрокаТовары.ХарактеристикаСсылка,    Свойства.ДлинаЧислом);
				Длина = ?(Длина="",0,Длина);
				
				Ширина = ПолучитьДопРеквизит(СтрокаТовары.ХарактеристикаСсылка,   Свойства.ШиринаЧислом);
				Ширина = ?(Ширина="",0,Ширина);

				Толщина = ПолучитьДопРеквизит(СтрокаТовары.ХарактеристикаСсылка,  Свойства.ТолщинаЧислом);
				Толщина = ?(Толщина="",0,Толщина);

				Покрытие = ПолучитьДопРеквизит(СтрокаТовары.ХарактеристикаСсылка, Свойства.Покрытие);
				Покрытие = ?(Покрытие="","нет",Покрытие);

				Радиус = ПолучитьДопРеквизит(СтрокаТовары.ХарактеристикаСсылка,   Свойства.РадиусЧислом);
				Радиус = ?(Радиус="","-",Радиус);
				Попытка
					Объем1Шт = Длина*Ширина*Толщина/1000000000;
					Если Объем1Шт = 0 Тогда
						КоличествоШт = 0;		
					Иначе
						КоличествоШт = Окр(СтрокаТовары.Количество/Объем1Шт,0);
					КонецЕсли; 
				Исключение
					КоличествоШт = 0;		
				КонецПопытки; 
			Иначе
				КоличествоШт = 0;		
			КонецЕсли; 
				
				
			СтруктураДанныхСтроки = Новый Структура;
			СтруктураДанныхСтроки.Вставить("НомерСтроки", 		НомерСтрокиПечать);
			СтруктураДанныхСтроки.Вставить("Артикул", 			СтрокаТовары.Артикул);
			СтруктураДанныхСтроки.Вставить("Товар", 			Товар);
			СтруктураДанныхСтроки.Вставить("Характеристика", 	СтрокаТовары.Характеристика);
			СтруктураДанныхСтроки.Вставить("ЕдИзмМ3", 			СтрокаТовары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение);
			СтруктураДанныхСтроки.Вставить("КоличествоМ3", 		СтрокаТовары.Количество);
			СтруктураДанныхСтроки.Вставить("Цена", 				?(СтрокаТовары.Количество <>0,СтрокаТовары.Сумма/СтрокаТовары.Количество,0));
			СтруктураДанныхСтроки.Вставить("Сумма", 			СтрокаТовары.Сумма);
			
			СтруктураДанныхСтроки.Вставить("ОписаниеRUS",       ПолучитьДопРеквизит(СтрокаТовары.Номенклатура, Свойства.ОписаниеRUS));
			СтруктураДанныхСтроки.Вставить("ОписаниеENG",       ПолучитьДопРеквизит(СтрокаТовары.Номенклатура, Свойства.ОписаниеENG));
			
			Вес = ?(СтрокаТовары.Номенклатура.ВесЗнаменатель = 0,0,СтрокаТовары.Номенклатура.ВесЧислитель/СтрокаТовары.Номенклатура.ВесЗнаменатель);
			СтруктураДанныхСтроки.Вставить("Нетто", 			Вес*СтрокаТовары.Количество);
			СтруктураДанныхСтроки.Вставить("Брутто", 			Вес*СтрокаТовары.КоличествоУпаковок + СтрокаТовары._ЕдиницаМестВес);
			СтруктураДанныхСтроки.Вставить("КоличествоМест",	СтрокаТовары._КоличествоМест);
			СтруктураДанныхСтроки.Вставить("КоличествоШт",		КоличествоШт);
			СтруктураДанныхСтроки.Вставить("Длина",				Длина);
			СтруктураДанныхСтроки.Вставить("Ширина",			Ширина);
			СтруктураДанныхСтроки.Вставить("Толщина",			Толщина);
			СтруктураДанныхСтроки.Вставить("Радиус",			Радиус);
			СтруктураДанныхСтроки.Вставить("Покрытие",			Покрытие);
			СтруктураДанныхСтроки.Вставить("Упаковка",			СтруктураДанныхСтроки.Брутто - СтруктураДанныхСтроки.Нетто);
			ОбластьСтрокаТаблицы.Параметры.Заполнить(СтруктураДанныхСтроки);
			
			ИтогоМест			= ИтогоМест + СтруктураДанныхСтроки.КоличествоМест;
			ИтогоОбъем		    = ИтогоОбъем + СтруктураДанныхСтроки.КоличествоМ3;
			ИтогоНетто			= ИтогоНетто + СтруктураДанныхСтроки.Нетто;
			ИтогоУпаковка		= ИтогоУпаковка + СтруктураДанныхСтроки.Брутто - СтруктураДанныхСтроки.Нетто;
			ИтогоШт				= ИтогоШт + КоличествоШт;
			ИтогоБрутто			= ИтогоБрутто + СтруктураДанныхСтроки.Брутто;
			ИтогоСумма			= ИтогоСумма + СтруктураДанныхСтроки.Сумма;
			
			Если ОтдельнаяСтрокаНаименование Тогда
				Если ТекНоменклатура <> СтрокаТовары.Номенклатура Тогда
					ОбластьМакетаНоменклатура.Параметры.Заполнить(СтруктураДанныхСтроки);
					ТабличныйДокумент.Вывести(ОбластьМакетаНоменклатура);
					ТекНоменклатура = СтрокаТовары.Номенклатура;
				КонецЕсли;
			КонецЕсли; 
			
			ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицы);
			
		КонецЦикла;
			
		ОбластьПодвал.Параметры.Заполнить(СтруктураДанныхШапки);
		
		СтруктураДанныхПодвал = Новый Структура;
		СтруктураДанныхПодвал.Вставить("ИтогоОбъем", 	ИтогоОбъем);
		СтруктураДанныхПодвал.Вставить("Цена", 			?(ИтогоОбъем <>0,ИтогоСумма/ИтогоОбъем,0));
		СтруктураДанныхПодвал.Вставить("ИтогоСумма", 	ИтогоСумма);
		СтруктураДанныхПодвал.Вставить("ИтогоНетто", 	ИтогоНетто);
		СтруктураДанныхПодвал.Вставить("ИтогоБрутто", 	ИтогоБрутто);
		СтруктураДанныхПодвал.Вставить("ИтогоМест", 	ИтогоМест);
		СтруктураДанныхПодвал.Вставить("ИтогоУпаковка", ИтогоУпаковка);
		СтруктураДанныхПодвал.Вставить("ИтогоКоличествоШт", ИтогоШт);
		ОбластьПодвал.Параметры.Заполнить(СтруктураДанныхПодвал);
		ТабличныйДокумент.Вывести(ОбластьПодвал);
			
		//ЗавершениеДляПечатиКомплектов(КомплектыПечати, КомплектПечатиПоСсылке, ТабличныйДокумент, НомерСтрокиНачало);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры // ()

//Возвращает таблицу значений с данными о контактной информации по заданным параметрам
//
Функция ПолучитьДанныеКонтактнойИнформации(Объект, ТипИнформации = Неопределено, ВидИнформации = Неопределено, ДатаСреза)

	Запрос = Новый Запрос;
	
	СтрокаВиртуальныхПараметров = "КонтактнаяИнформация.Ссылка = &Объект";
	
	Если ТипИнформации <> Неопределено Тогда
		СтрокаВиртуальныхПараметров = СтрокаВиртуальныхПараметров + " И КонтактнаяИнформация.Тип = &Тип";
		Запрос.УстановитьПараметр("Тип", ТипИнформации);
	КонецЕсли; 
	Если ВидИнформации <> Неопределено Тогда
		СтрокаВиртуальныхПараметров = СтрокаВиртуальныхПараметров + " И КонтактнаяИнформация.Вид = &Вид";
		Запрос.УстановитьПараметр("Вид", ВидИнформации);
	КонецЕсли; 
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтактнаяИнформация.Ссылка        КАК Объект,
	|	КонтактнаяИнформация.Вид           КАК Вид,
	|	КонтактнаяИнформация.Тип           КАК Тип,
	|	КонтактнаяИнформация.Представление КАК Представление
	|ИЗ
	|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтактнаяИнформация
	|
	|ГДЕ
	|	" + СтрокаВиртуальныхПараметров + "
	|";
	
	Запрос.УстановитьПараметр("ДатаСреза", ДатаСреза);
	Запрос.УстановитьПараметр("Объект"   , Объект);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество()<>0 Тогда
		Возврат Результат[0].Представление; 
	Иначе
		Возврат "";
	КонецЕсли; 
	
КонецФункции // ПолучитьДанныеКонтактнойИнформации()

Функция ПолучитьДопРеквизит(Объект, Знач Свойство)

	Если НЕ (ЗначениеЗаполнено(Объект)
			И ЗначениеЗаполнено(Свойство)) Тогда
		Возврат "";
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДопРеквизит.Значение
	|ИЗ
	|	Справочник.Партнеры.ДополнительныеРеквизиты КАК ДопРеквизит
	|ГДЕ
	|	ДопРеквизит.Ссылка = &Объект
	|	И ДопРеквизит.Свойство В(&Свойство)";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Справочник.Партнеры", Объект.Метаданные().ПолноеИмя());
	
	Запрос.УстановитьПараметр("Свойство", Свойство);
	Запрос.УстановитьПараметр("Объект",   Объект);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	Если Таблица.Количество() = 0 Тогда
		Возврат "";
	Иначе
		Возврат Таблица[0].Значение;
	КонецЕсли; 
	
КонецФункции // ПолучитьДанныеКонтактнойИнформации()

Функция ПолучитьДопСведение(Объект, Знач Свойство)

	Если НЕ (ЗначениеЗаполнено(Объект)
			И ЗначениеЗаполнено(Свойство)) Тогда
		Возврат "";
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДопРеквизит.Значение
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ДопРеквизит
	|ГДЕ
	|	ДопРеквизит.Объект = &Объект
	|	И ДопРеквизит.Свойство В(&Свойство)";
	
	Запрос.УстановитьПараметр("Свойство", Свойство);
	Запрос.УстановитьПараметр("Объект",   Объект);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	Если Таблица.Количество() = 0 Тогда
		Возврат "";
	Иначе
		Возврат Таблица[0].Значение;
	КонецЕсли; 
	
КонецФункции // ПолучитьДанныеКонтактнойИнформации()

Функция ПолучитьСтруктуруСвойств()
	
	Структура = Новый Структура;
	
	Структура.Вставить("Идентификатор",    ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Идентификатор счета (Банковские счета)",         Истина));
	
	Структура.Вставить("ДлинаЧислом",	   ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("1 Длина числом (Характеристики номенклатуры)",   Истина));
	Структура.Вставить("ШиринаЧислом",	   ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("2 Ширина числом (Характеристики номенклатуры)",  Истина));
	Структура.Вставить("ТолщинаЧислом",	   ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("3 Толщина числом (Характеристики номенклатуры)", Истина));
	Структура.Вставить("РадиусЧислом",	   ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("4 Радиус числом (Характеристики номенклатуры)",  Истина));
	Структура.Вставить("Покрытие",		   ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("5 Покрытие (Характеристики номенклатуры)",       Истина));
	Структура.Вставить("КоличествоЛистов", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Количество листов (Характеристики номенклатуры)", Истина));
	
	Структура.Вставить("ОписаниеENG",      ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Описание товара ENG (Номенклатура)",             Истина));
	Структура.Вставить("ОписаниеRUS",      ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Описание товара RUS (Номенклатура)",             Истина));
	
	Структура.Вставить("ОрганизацияENG",   ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Наименование ENG (Организации)",                 Истина));
	
	Структура.Вставить("BeneficiarysAccount", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Beneficiary’s account (Банковские счета)",    Истина));
	
	Возврат Структура;
	
КонецФункции
