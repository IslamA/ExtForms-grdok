//* Copyright (c) 2007-2008, Анатолий Бурнашев, Антон Гаврилов 
//*
//* Разрешается повторное распространение и использование как в виде исходника так и в
//* двоичной форме, с изменениями или без, при соблюдении следующих условий:
//*
//* При повторном распространении исходного кода должно оставаться указанное выше
//* уведомление об авторском праве, этот список условий и последующий отказ от гарантий.
//* При повторном распространении двоичного кода должно сохраняться указанная выше
//* информация об авторском праве, этот список условий и последующий отказ от гарантий в
//* документации и/или в других материалах, поставляемых при распространении. 
//*
//* ЭТА ПРОГРАММА ПРЕДОСТАВЛЕНА БЕСПЛАТНО ВЛАДЕЛЬЦАМИ АВТОРСКИХ ПРАВ И/ИЛИ ДРУГИМИ СТОРОНАМИ
//* "КАК ОНА ЕСТЬ" БЕЗ КАКОГО-ЛИБО ВИДА ГАРАНТИЙ, ВЫРАЖЕННЫХ ЯВНО ИЛИ ПОДРАЗУМЕВАЕМЫХ,
//* ВКЛЮЧАЯ, НО НЕ ОГРАНИЧИВАЯСЬ ИМИ, ПОДРАЗУМЕВАЕМЫЕ ГАРАНТИИ КОММЕРЧЕСКОЙ ЦЕННОСТИ И
//* ПРИГОДНОСТИ ДЛЯ КОНКРЕТНОЙ ЦЕЛИ. НИ В КОЕМ СЛУЧАЕ, ЕСЛИ НЕ ТРЕБУЕТСЯ СООТВЕТСТВУЮЩИМ
//* ЗАКОНОМ, ИЛИ НЕ УСТАНОВЛЕНО В УСТНОЙ ФОРМЕ, НИ ОДИН ВЛАДЕЛЕЦ АВТОРСКИХ ПРАВ И НИ ОДНО
//* ДРУГОЕ ЛИЦО, КОТОРОЕ МОЖЕТ ИЗМЕНЯТЬ И/ИЛИ ПОВТОРНО РАСПРОСТРАНЯТЬ ПРОГРАММУ, КАК БЫЛО
//* СКАЗАНО ВЫШЕ, НЕ НЕСЁТ ОТВЕТСТВЕННОСТИ, ВКЛЮЧАЯ ЛЮБЫЕ ОБЩИЕ, СЛУЧАЙНЫЕ,
//* СПЕЦИАЛЬНЫЕ ИЛИ ПОСЛЕДОВАВШИЕ УБЫТКИ, В СЛЕДСТВИИ ИСПОЛЬЗОВАНИЯ ИЛИ НЕВОЗМОЖНОСТИ
//* ИСПОЛЬЗОВАНИЯ ПРОГРАММЫ (ВКЛЮЧАЯ, НО НЕ ОГРАНИЧИВАЯСЬ ПОТЕРЕЙ ДАННЫХ, ИЛИ ДАННЫМИ,
//* СТАВШИМИ НЕПРАВИЛЬНЫМИ, ИЛИ ПОТЕРЯМИ ПРИНЕСЕННЫМИ ИЗ-ЗА ВАС ИЛИ ТРЕТЬИХ ЛИЦ, ИЛИ ОТКАЗОМ
//* ПРОГРАММЫ РАБОТАТЬ СОВМЕСТНО С ДРУГИМИ ПРОГРАММАМИ), ДАЖЕ ЕСЛИ ТАКОЙ ВЛАДЕЛЕЦ ИЛИ
//* ДРУГОЕ ЛИЦО БЫЛИ ИЗВЕЩЕНЫ О ВОЗМОЖНОСТИ ТАКИХ УБЫТКОВ.



Перем ПредыдущаяСтрока; // Нужна для обработки ожидания при генерации контекстного меню

Перем КоличествоСтатическихКнопокКоманднойПанели;



///////////////////////////////////////////////////////////////////////////////
// ~~~~ СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ~~~~
///////////////////////////////////////////////////////////////////////////////

// Открывает универсальный отчет по данному регистру
//
// Параметры
//  ИмяРегистра - строковый идентификатор регистра
//
// Возвращаемое значение:
//   Форма универсального отчета, заполненная настройками и готовая к формированию
//
Функция УниверсальныйОтчетПоРегиструНакопления(ИмяРегистра)
	Если НЕ ЕстьУниверсальныйОтчет Тогда
		Возврат РегистрыНакопления[ИмяРегистра].ПолучитьФормуСписка();
	КонецЕсли;
	УниверсальныйОтчет = Отчеты.УниверсальныйОтчет.Создать();
	ФормаОтчета = УниверсальныйОтчет.ПолучитьФорму();
	УниверсальныйОтчет.ИмяРегистра = ИмяРегистра;
	УниверсальныйОтчет.ПереУстановитьНачальныеНастройки(УниверсальныйОтчет, УниверсальныйОтчет, ФормаОтчета);
	ДоступныеПоля = УниверсальныйОтчет.ПостроительОтчета.ДоступныеПоля;
	Для каждого Поле Из ДоступныеПоля Цикл
		Если Поле.Измерение Тогда
			УниверсальныйОтчет.ДобавитьИзмерениеСтроки(Поле.ПутьКДанным);
		КонецЕсли;
		Если Поле.Отбор Тогда
			УниверсальныйОтчет.ДобавитьОтбор(Поле.ПутьКДанным);
		КонецЕсли;
	КонецЦикла;
	Возврат ФормаОтчета;
КонецФункции // УниверсальныйОтчетПоРегиструНакопления()

// Открывает заданный отчет с заданной настройкой
//
// Параметры
//  ИмяОтчета
//  ИмяНастройки
//
// Возвращаемое значение:
//   Форма отчета, готовая к выполнению
//
Функция ОткрытьНастройкуОтчета(ИмяОтчета, ИмяНастройки)
	Отчет = Отчеты[ИмяОтчета].Создать();
	Объект = ?(ИмяОтчета = "УниверсальныйОтчет", Отчет, Отчет.УниверсальныйОтчет);
	ФормаОтчета = Отчет.ПолучитьФорму();
	
	Если ЗначениеЗаполнено(глЗначениеПеременной("глТекущийПользователь")) И Не ЗначениеЗаполнено(Объект.ДатаНач) Тогда
		
		Объект.ДатаНач = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяДатаНачалаОтчетов");
		
	КонецЕсли;
	
	СтруктураНастройки = Новый Структура;
	СтруктураНастройки.Вставить("Пользователь", глЗначениеПеременной("глТекущийПользователь"));
	СтруктураНастройки.Вставить("ИмяОбъекта", "ОтчетОбъект."+ИмяОтчета);
	СтруктураНастройки.Вставить("НаименованиеНастройки", ИмяНастройки);
	
	Если УниверсальныеМеханизмы.ПолучитьНастройку(СтруктураНастройки) Тогда
		
		Объект.мТекущаяНастройка = СтруктураНастройки;
		Отчет.ВосстановитьНастройкиИзСтруктуры(СтруктураНастройки.СохраненнаяНастройка);
		Объект.ВосстановитьПараметрыПечати(Объект, Отчет, ФормаОтчета, СтруктураНастройки.СохраненнаяНастройка);
		
	КонецЕсли;
	
	Объект.ВосстановитьДополнительныеНастройки(Объект, Отчет, ИмяОтчета);
	
	
	//Объект.ВосстановитьНастройки(Объект, Отчет, ФормаОтчета, ИмяОтчета);
	Объект.мВосстанавливатьНастройкиПриОткрытии = Ложь;
	
	Возврат ФормаОтчета;
КонецФункции // ОткрытьНастройкуОтчета()

// Открывает консоль отчетов (из конфигурации или из макета) и открывает переданную настройку
//
// Параметры
//  ИмяФайлаНастроек - полное имя файла с настройками
//
// Возвращаемое значение:
//   Форма консоли отчетов
//
Функция ОткрытьНастройкуКонсолиОтчетовИлиЗапросов(ИмяФайлаНастроек)
	Расширение = ВРЕГ(Прав(ИмяФайлаНастроек,3));
	Если Расширение = "RCF" Тогда
		ИмяОбъекта = "КонсольОтчетов";
		ИмяОбъекта1 = "ирКонсольПостроителейОтчетов";
	ИначеЕсли Расширение = "SEL" Тогда
		ИмяОбъекта = "КонсольЗапросов";
		ИмяОбъекта1 = "ирКонсольЗапросов";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	Если Метаданные.Обработки.Найти(ИмяОбъекта) <> Неопределено Тогда
		Форма = Обработки[ИмяОбъекта].ПолучитьФорму();
	ИначеЕсли Метаданные.Обработки.Найти(ИмяОбъекта1) <> Неопределено Тогда
		Форма = Обработки[ИмяОбъекта1].ПолучитьФорму();
	Иначе
		Попытка
			ИмяФайла = ПолучитьИмяВременногоФайла();
			ДвоичныеДанные = ПолучитьМакет(ИмяОбъекта);
			ДвоичныеДанные.Записать(ИмяФайла);
			Форма = ВнешниеОбработки.ПолучитьФорму(ИмяФайла);
			Если Форма = Неопределено Тогда
				ВнешняяОбработка = ВнешниеОбработки.Создать(ИмяФайла);
			КонецЕсли;
			УдалитьФайлы(ИмяФайла);
		Исключение
			Предупреждение("Не удалось создать обработку для открытия данной настройки");
			Сообщить(ОписаниеОшибки());
			Возврат Неопределено;
		КонецПопытки; 
	КонецЕсли;
	Если СтрДлина(ИмяФайлаНастроек)>4 Тогда
		Файл = Новый Файл(ИмяФайлаНастроек);
		Если Файл.Существует() Тогда
			СохранитьЗначение(ИмяОбъекта+"_ИмяФайла", ИмяФайлаНастроек);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Форма;
КонецФункции // ОткрытьНастройкуКонсолиОтчетов()

// Возвращает форму обработки, из элемента справочника внешних обработок, найденного по переданному коду
//
// Параметры
//  Код
// Возвращаемое значение:
//   Форма обработки, содержащейся в указанном элементе справочника
//
Функция ОткрытьОбработкуИзСправочникаВнешнихОбработок(Код)
	ВыбраннаяОбработка=Справочники.ВнешниеОбработки.НайтиПоКоду(Код);
	ИмяФайла=ПолучитьИмяВременногоФайла();
	ДвоичныеДанные=ВыбраннаяОбработка.ХранилищеВнешнейОбработки.Получить();
	ДвоичныеДанные.Записать(ИмяФайла);
	Форма=ВнешниеОбработки.ПолучитьФорму(ИмяФайла);
	Если ТипЗнч(Форма)<>Тип("Форма") Тогда
		Форма=ВнешниеОтчеты.ПолучитьФорму(ИмяФайла);
	КонецЕсли;
	УдалитьФайлы(ИмяФайла);
	Возврат Форма;
КонецФункции // ОткрытьОбработкуИзСправочникаВнешнихОбработок()


// Добавляет кнопку действия на командную панель
//
// Параметры
// КП - кнопки командной панели
// Имя - имя кнопки
// Синоним - синоним объекта. текст кнопки
// Команда - команда, выполняемая кнопкой. Хранится в тексте подсказки
// Действие - обработчик кнопки. Для простоты будет один. Команда выполняется по содержимому подсказки
//
Процедура ДобавитьКнопку(КП, Имя, Синоним = "", Команда, Действие)
	Кнопка = КП.Добавить(Имя, ТипКнопкиКоманднойПанели.Действие, ?(Синоним="",Имя,Синоним), Действие);
	Кнопка.Подсказка = Команда;
	
	Если КП.Количество()=КоличествоСтатическихКнопокКоманднойПанели+1 Тогда
		Кнопка.КнопкаПоУмолчанию = Истина;
	КонецЕсли;
КонецПроцедуры // ДобавитьКнопку()

// В зависимости от выбранного объекта, генерирует команды контекстного меню
Процедура СгенерироватьКомандыКонтекстногоМеню()
	ТекущаяСтрока = ЭлементыФормы.ДеревоИнтерфейса.ТекущаяСтрока;
	Если ТекущаяСтрока = ПредыдущаяСтрока Тогда
		Возврат;
	КонецЕсли;
	ПредыдущаяСтрока = ТекущаяСтрока; 
		
	// Очистить динамические кнопки командной панели
	КнопкиКоманднойПанели = ЭлементыФормы.КоманднаяПанельДереваИнтерфейса.Кнопки;
	КоличествоКнопок = КнопкиКоманднойПанели.Количество();
	Для Сч = 1 По КоличествоКнопок - КоличествоСтатическихКнопокКоманднойПанели Цикл
		КнопкиКоманднойПанели.Удалить(КоличествоКнопок - Сч);
	КонецЦикла;
	
	Если ТекущаяСтрока.Вид = "" ИЛИ ТекущаяСтрока.Имя = "" Тогда
		Возврат;	
	КонецЕсли;
		
	ВидОбъекта = ТекущаяСтрока.Вид;
	ИмяОбъекта = ТекущаяСтрока.Имя;
	ДействиеОткрытиеФормы = Новый Действие("ОткрытиеФормы");
	Если ВидОбъекта = "ОбщиеФормы" Тогда
		ДобавитьКнопку(КнопкиКоманднойПанели, "Открыть", , "ПолучитьОбщуюФорму("""+ИмяОбъекта+""")", ДействиеОткрытиеФормы);
	ИначеЕсли ВидОбъекта = "Интерфейсы" Тогда
		ДобавитьКнопку(КнопкиКоманднойПанели, "Переключить", , "Неопределено; ГлавныйИнтерфейс.ПереключитьИнтерфейс("""+ИмяОбъекта+""")", ДействиеОткрытиеФормы);
	ИначеЕсли ВидОбъекта = "Внешние обработки" Тогда
		ДобавитьКнопку(КнопкиКоманднойПанели, "Открыть", , "ВнешниеОбработки.Создать("""+ИмяОбъекта+""").ПолучитьФорму()", ДействиеОткрытиеФормы);
	ИначеЕсли ВерсияПлатфомы >= "8.1" И ВидОбъекта = "Внешние отчеты" Тогда
		ДобавитьКнопку(КнопкиКоманднойПанели, "Открыть", , "ВнешниеОтчеты.Создать("""+ИмяОбъекта+""").ПолучитьФорму()", ДействиеОткрытиеФормы);
	ИначеЕсли ВидОбъекта = "Табличные документы" Тогда
		ДобавитьКнопку(КнопкиКоманднойПанели, "Открыть", , " ПолучитьФорму(""ФормаПросмотра""); НоваяФорма.ЭлементыФормы.ТабДок.Прочитать("""+ИмяОбъекта+"""); НоваяФорма.ЭлементыФормы.ТабДок.Видимость = Истина; НоваяФорма.Заголовок = """+ИмяОбъекта+"", ДействиеОткрытиеФормы);
	ИначеЕсли ВидОбъекта = "Текстовые документы" Тогда
		ДобавитьКнопку(КнопкиКоманднойПанели, "Открыть", , " ПолучитьФорму(""ФормаПросмотра""); НоваяФорма.ЭлементыФормы.ТекстДок.Прочитать("""+ИмяОбъекта+"""); НоваяФорма.ЭлементыФормы.ТекстДок.Видимость = Истина; НоваяФорма.Заголовок = """+ИмяОбъекта+"", ДействиеОткрытиеФормы);
	ИначеЕсли Найти(ВидОбъекта, "Настройки консоли") > 0 Тогда
		ДобавитьКнопку(КнопкиКоманднойПанели, "Открыть", , " ОткрытьНастройкуКонсолиОтчетовИлиЗапросов("""+ИмяОбъекта+""")", ДействиеОткрытиеФормы);
	ИначеЕсли ЕстьУниверсальныйОтчет И Есть_РС_СохраненныеНастройки И Лев(ТекущаяСтрока.Вид,11) = "ОтчетОбъект" И (Метаданные.Отчеты.Найти(Сред(ТекущаяСтрока.Вид, Найти(ТекущаяСтрока.Вид, ".")+1)) <> Неопределено) Тогда
		// Восстановление сохраненной настройки
		ДобавитьКнопку(КнопкиКоманднойПанели, "УниверсальныйОтчетПоРегиструНакопления", "Открыть", "ОткрытьНастройкуОтчета("""+ВидОбъекта+""","""+ИмяОбъекта+""")", ДействиеОткрытиеФормы);
	ИначеЕсли ЕстьСправочникВнешнихОбработок И ВидОбъекта = "СправочникВнешниеОбработки" Тогда
		ДобавитьКнопку(КнопкиКоманднойПанели, "Открыть", "Открыть", "ОткрытьОбработкуИзСправочникаВнешнихОбработок("""+ИмяОбъекта+""")", ДействиеОткрытиеФормы);
		ДобавитьКнопку(КнопкиКоманднойПанели, "НайтиВСправочникеВнешнихОбработок", "Найти в справочнике внешних обработок", " ПолучитьСсылкуПоУИД(""Справочник.ВнешниеОбработки"",Справочники.ВнешниеОбработки.НайтиПоКоду("""+ИмяОбъекта+""").УникальныйИдентификатор()).ПолучитьФорму()", ДействиеОткрытиеФормы);
	ИначеЕсли ЭтоУникальныйИдентификатор(ИмяОбъекта) Тогда	
		// Полнотекстовый поиск
		СсылкаОбъекта = ПолучитьСсылкуПоУИД(ВидОбъекта, ИмяОбъекта);
		Если СсылкаОбъекта <> Неопределено Тогда
			МДФормы = СсылкаОбъекта.Метаданные().Формы;
			Для каждого МДФорма Из МДФормы Цикл
				Попытка
					ДобавитьКнопку(КнопкиКоманднойПанели, МДФорма.Имя, МДФорма.Синоним, " ПолучитьСсылкуПоУИД("""+ВидОбъекта+""","""+ИмяОбъекта+""")"+".ПолучитьФорму("""+МДФорма.Имя+""")", ДействиеОткрытиеФормы);
				Исключение
					Продолжить;
				КонецПопытки;
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(ВидОбъекта) И ЗначениеЗаполнено(ИмяОбъекта) Тогда
		// Объект ИБ или метаданные
		
		Если ЕстьУниверсальныйОтчет И ВидОбъекта = "РегистрыНакопления" Тогда
			ДобавитьКнопку(КнопкиКоманднойПанели, "УниверсальныйОтчетПоРегиструНакопления", "Универсальный отчет", "УниверсальныйОтчетПоРегиструНакопления("""+ИмяОбъекта+""")", ДействиеОткрытиеФормы);
		КонецЕсли;
		МД = ?(Найти(ВидОбъекта,".")>0, Метаданные.НайтиПоПолномуИмени(ВидОбъекта), Метаданные[ВидОбъекта]);
		МДОбъект = МД[ИмяОбъекта];
		МДФормы = МДОбъект.Формы;
		Если стНастройки.ПриАвтозапускеОткрыватьФормуСписка Тогда
			Попытка
				ИмяФормы = ?(МДОбъект.ОсновнаяФормаСписка=Неопределено, "ФормаСписка", МДОбъект.ОсновнаяФормаСписка.Имя);
				ДобавитьКнопку(КнопкиКоманднойПанели, ИмяФормы, "Форма списка", ВидОбъекта+"."+ИмяОбъекта+".ПолучитьФорму("""+ИмяФормы+""")", ДействиеОткрытиеФормы);
			Исключение
			КонецПопытки;
		КонецЕсли;
		Для каждого МДФорма Из МДФормы Цикл
			Если стНастройки.ПриАвтозапускеОткрыватьФормуСписка И МДФорма = МДОбъект.ОсновнаяФормаСписка Тогда
				// Повторно добавлять не нужно
				Продолжить;
			КонецЕсли;
				
			Попытка
				ДобавитьКнопку(КнопкиКоманднойПанели, МДФорма.Имя, МДФорма.Синоним, ВидОбъекта+"."+ИмяОбъекта+".ПолучитьФорму("""+МДФорма.Имя+""")", ДействиеОткрытиеФормы);
			Исключение
					Возврат;
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры // СгенерироватьКомандыКонтекстногоМеню()


///////////////////////////////////////////////////////////////////////////////
// ~~~~ ОБЩИЕ СОБЫТИЯ ФОРМЫ ~~~~
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	Если стНастройки.Свойство("флИскатьОтладочнуюВерсию") и стНастройки.флИскатьОтладочнуюВерсию Тогда
		СтандартнаяОбработка = Ложь;
		Отказ = Истина;
		Переоткрыть(Истина);
	Иначе
		стНастройки.Вставить("флИскатьОтладочнуюВерсию", Ложь);
	КонецЕсли;

	ЗаполнитьДеревоПодсистем(ЭтаФорма);
	ЗаполнитьДеревоВсехОбъектов();
КонецПроцедуры // ПередОткрытием

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	//Отказ = Истина;
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
Процедура ПриОткрытии()
	Если (ЭлементыФормы.ФильтрПодсистем.СписокВыбора.НайтиПоЗначению(стНастройки.ФильтрПодсистем) <> Неопределено) тогда
		ФильтрПодсистем = стНастройки.ФильтрПодсистем;
	Иначе
		ФильтрПодсистем = ЭлементыФормы.ФильтрПодсистем.СписокВыбора[0].Значение;
	КонецЕсли;

	спФильтр = ЭлементыФормы.ФильтрИмен.СписокВыбора;
	Для каждого Фильтр из стНастройки.ИсторияФильтраИмен цикл
		спФильтр.Добавить(Фильтр);
	КонецЦикла;
	
	ФильтрИмен = стНастройки.ФильтрИмен;
	
	ЗаполнитьДеревоИнтерфейса(ЭтаФорма);

	// ВосстановитьРазвернутыеВетви(стНастройки.РазвернутыеСтроки);

	////ВосстановитьВыбраннуюСтроку(стНастройки.ВыбраннаяСтрока);
	
	//ПодключитьОбработчикОжидания("ОчисткаСтрокиФильтра",60);
	
	Автозапуск();

КонецПроцедуры // ПриОткрытии

///////////////////////////////////////////////////////////////////////////////
Процедура ПриЗакрытии()

	СохранитьНастройки(ЭтаФорма);
	
КонецПроцедуры // ПриЗакрытии

// Вызывается регулярно для очистки фильра
//
//
Процедура ОчисткаСтрокиФильтра()
	ФильтрИмен = "";
	ФильтрИмен_ПриИзменении();
	ЗаполнитьДеревоИнтерфейса(ЭтаФорма);
	ЭлементыФормы.ДеревоИнтерфейса.ТекущаяСтрока = ДеревоИнтерфейса.Строки[0];
КонецПроцедуры // ОчисткаСтрокиФильтра()


Процедура ОсновныеДействияФормыОткрытьСтраницуОбработки(Кнопка)
	ЗапуститьПриложение("http://www.infostart.ru/public/15324/");
КонецПроцедуры

Процедура КоманднаяПанельПроверитьВерсию(Кнопка)
	
	Сообщить("Запрос номеров версий...", СтатусСообщения.Информация);
	
	Попытка
		IE = Новый COMОбъект("InternetExplorer.Application");
	Исключение
	    Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки; 
	
	IE.Visible = 0;
	IE.Silent = -1;
	IE.Navigate("http://www.infostart.ru/public/15324/blog/");
	ПроверитьВерсию(IE);
	
КонецПроцедуры // КоманднаяПанельПроверитьВерсию()

Процедура ПроверитьВерсию(IE=Неопределено)
	
	Если IE = Неопределено Тогда
		IE = Новый COMОбъект("InternetExplorer.Application");
	КонецЕсли;
	Если IE.readyState < 4 Тогда
		ПодключитьОбработчикОжидания("ПроверитьВерсию", 0.1, Истина);
		Возврат;
	КонецЕсли;
	
	Описание = IE.Document.title;
	IE.Quit();
	IE = Неопределено;
	
	Описание = Сред(Описание, Найти(Описание, "(") + 1);
	Описание = Лев(Описание, Найти(Описание, ")") - 1);
	Сообщить("Текущая версия:   " + Метаданные().Комментарий);
	Сообщить("Последняя версия: " + Описание);
	
КонецПроцедуры // КоманднаяПанельПроверитьВерсию()


///////////////////////////////////////////////////////////////////////////////
// ~~~~ СОБЫТИЯ ФИЛЬТРА ПОДСИСТЕМ ~~~~
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
Процедура ПриИзмененииФильтраПодсистем()

	ЗаполнитьДеревоИнтерфейса(ЭтаФорма);
	
КонецПроцедуры // ПриИзмененииФильтраПодсистем

///////////////////////////////////////////////////////////////////////////////
Процедура ФильтрПодсистем_НачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыбранноеЗначение = дзВсеПодсистемы.ВыбратьСтроку("Выберите подсистему");
	Если ВыбранноеЗначение <> Неопределено тогда
		ЭлементыФормы.ФильтрПодсистем.Значение = ВыбранноеЗначение.Имя;
		ПриИзмененииФильтраПодсистем();
	КонецЕсли;
	
КонецПроцедуры // ФильтрПодсистем_НачалоВыбораИзСписка

///////////////////////////////////////////////////////////////////////////////
Процедура ФильтрПодсистем_Очистка(Элемент, СтандартнаяОбработка)

	ФильтрПодсистем_ПриИзменении(Элемент);
	
КонецПроцедуры // ФильтрПодсистем_Очистка

///////////////////////////////////////////////////////////////////////////////
Процедура ФильтрПодсистем_ПриИзменении(Элемент)

	Если ПустаяСтрока(ФильтрПодсистем) тогда
		ФильтрПодсистем = ЭлементыФормы.ФильтрПодсистем.СписокВыбора[0].Значение;
	КонецЕсли;

	ПриИзмененииФильтраПодсистем();
	
КонецПроцедуры // ФильтрПодсистем_ПриИзменении


///////////////////////////////////////////////////////////////////////////////
// ~~~~ СОБЫТИЯ ФИЛЬТРА ИМЕН ~~~~
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
Процедура ПриИзмененииФильтраИмен()

	Если НЕ ПустаяСтрока(ФильтрИмен) тогда
	
		ФильтрИмен = СокрЛП(ФильтрИмен);

		спФильтр = ЭлементыФормы.ФильтрИмен.СписокВыбора;
		спФильтр.Вставить(0, ФильтрИмен);
		
		// Удалим записи, аналогичные текущему значению фильтра
		ПоискФильтра = НРег(ФильтрИмен);
		н = спФильтр.Количество() - 1;
		Пока н > 0 цикл
			Если НРег(спФильтр[н].Значение) = ПоискФильтра тогда
				спФильтр.Удалить(н);
			КонецЕсли;
			
			н = н - 1;
		КонецЦикла;
		
		// Удалим старые записи из истории, если история > ИсторияКоманд записей
		Если спФильтр.Количество() > стНастройки.ИсторияКоманд тогда
			н = спФильтр.Количество() - 1;
			Пока н >= стНастройки.ИсторияКоманд цикл
				спФильтр.Удалить(н);
				н = н - 1;
			КонецЦикла;
		КонецЕсли;
		
		ОбновитьФильтрУмногоПоиска(Истина);
		
	КонецЕсли;

	ЗаполнитьДеревоИнтерфейса(ЭтаФорма);
	
	//Если НЕ ПустаяСтрока(ФильтрИмен) тогда
	//	Для каждого СтрокаДерева из ДеревоИнтерфейса.Строки цикл
	//		//ЭлементыФормы.ДеревоИнтерфейса.Развернуть(СтрокаДерева, Истина);
	//	КонецЦикла;
	//КонецЕсли;
	
КонецПроцедуры // ПриИзмененииФильтраИмен

///////////////////////////////////////////////////////////////////////////////
Процедура ФильтрИмен_ПриИзменении(Элемент="")

	ПриИзмененииФильтраИмен();
	
КонецПроцедуры // ФильтрИмен_ПриИзменении

Процедура ФильтрИменОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПриИзмененииФильтраИмен();
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
//Процедура ФильтрИмен_Очистка(Элемент, СтандартнаяОбработка)

//	ПриИзмененииФильтраИмен();
//	
//КонецПроцедуры // ФильтрИмен_Очистка

///////////////////////////////////////////////////////////////////////////////
Процедура ФильтрИмен_АвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	ПоискФильтра = СокрЛП(Нрег(Текст));
	ДлинаФильтра = СтрДлина(ПоискФильтра);
	
	спФильтр = ЭлементыФормы.ФильтрИмен.СписокВыбора;
	Для каждого зн из спФильтр цикл
		Если НРег(Лев(зн.Значение, ДлинаФильтра)) = ПоискФильтра тогда
			ТекстАвтоПодбора = Текст + Сред(зн.Значение, ДлинаФильтра + 1);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	
КонецПроцедуры // ФильтрИмен_АвтоПодборТекста

///////////////////////////////////////////////////////////////////////////////
// ~~~~ СОБЫТИЯ ДЕРЕВА ИНТЕРФЕЙСА ~~~~
///////////////////////////////////////////////////////////////////////////////

// Предлагает выбор формы и открывает ее для текущей строки дерева
//
// Параметры
//  Команда - строка команды. Если указана, то выбор формы не предлагается, а сразу открывается форма по умолчанию
//
Процедура ОткрытиеФормы(Команда = "")
	Если ТипЗнч(Команда) = Тип("КнопкаКоманднойПанели") Тогда
		Команда = Команда.Подсказка;
	ИначеЕсли Команда = "" Тогда
		// Вызов первой из доступных команд
		СгенерироватьКомандыКонтекстногоМеню();
		КнопкиКоманднойПанели = ЭлементыФормы.КоманднаяПанельДереваИнтерфейса.Кнопки;
		Если КнопкиКоманднойПанели.Количество()>КоличествоСтатическихКнопокКоманднойПанели Тогда
			Команда = КнопкиКоманднойПанели[КоличествоСтатическихКнопокКоманднойПанели].Подсказка;
		Иначе 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	НоваяФорма = Неопределено;
	Попытка
		Выполнить("НоваяФорма = "+Команда);
	Исключение
		Возврат;
	КонецПопытки;
	Если НоваяФорма = Неопределено тогда
		Возврат;
	ИначеЕсли НоваяФорма.Открыта() тогда
		НоваяФорма.Активизировать();
	Иначе
		НоваяФорма.Открыть();
	КонецЕсли;
	
	ОбновитьСтатистикуИспользования(ЭлементыФормы.ДеревоИнтерфейса.ТекущаяСтрока, ЭтаФорма);
	
КонецПроцедуры // ОткрытиеФормы()


///////////////////////////////////////////////////////////////////////////////
Процедура ДеревоИнтерфейса_Выбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	Если (ВыбраннаяСтрока = Неопределено) или (ПустаяСтрока(ВыбраннаяСтрока.Имя)) тогда
		Возврат;
	КонецЕсли;
	
	ВидОбъекта = ВыбраннаяСтрока.Вид;
	ИмяОбъекта = ВыбраннаяСтрока.Имя;
			
	Если ВидОбъекта = "Справочники" ИЛИ
		ВидОбъекта = "Документы" ИЛИ
		ВидОбъекта = "ПланыВидовХарактеристик" ИЛИ 
		ВидОбъекта = "РегистрыСведений" ИЛИ 
		ВидОбъекта = "РегистрыНакопления" ИЛИ 
		ВидОбъекта = "ПланыСчетов" ИЛИ 
		ВидОбъекта = "ПланыВидовРасчета" ИЛИ 
		ВидОбъекта = "РегистрыБухгалтерии" ИЛИ 
		ВидОбъекта = "РегистрыРасчета"  ИЛИ 
		ВидОбъекта = "БизнесПроцессы"  ИЛИ 
		ВидОбъекта = "Задачи"  ИЛИ 
		ВидОбъекта = "ПланыОбмена"
	Тогда
		ОткрытиеФормы(ВидОбъекта+"."+ИмяОбъекта+".ПолучитьФормуСписка()");
	ИначеЕсли ВидОбъекта = "ЖурналыДокументов" ИЛИ ВидОбъекта = "Обработки" ИЛИ ВидОбъекта = "Отчеты" тогда
		ОткрытиеФормы(ВидОбъекта+"."+ИмяОбъекта+".ПолучитьФорму()");
	Иначе
		ОткрытиеФормы();
		//ВызватьИсключение "ДеревоИнтерфейса_Выбор: неподдерживаемое значение вида объекта (""" + ВидОбъекта + """)";
	КонецЕсли;
			
КонецПроцедуры // ДеревоИнтерфейса_Выбор

///////////////////////////////////////////////////////////////////////////////
Процедура ДеревоИнтерфейса_ПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	////Если (ДанныеСтроки = стрЧастоИспользуемые)
	////	или (ДанныеСтроки = стрПоследниеИспользованные)
	////	или (ДанныеСтроки.Родитель = стрЧастоИспользуемые)
	////	или (ДанныеСтроки.Родитель = стрПоследниеИспользованные) 
	////тогда
	////	ОформлениеСтроки.Шрифт = ЖирныйШрифт;
	////КонецЕсли;
	
КонецПроцедуры // ДеревоИнтерфейса_ПриВыводеСтроки


Процедура ДеревоИнтерфейсаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель)
	Отказ = Истина;
КонецПроцедуры

Процедура ДеревоИнтерфейсаПриАктивизацииСтроки(Элемент)
	СтрокаКорня = Элемент.ТекущаяСтрока.Родитель;
	Если СтрокаКорня = Неопределено ИЛИ СтрокаКорня.Имя = "Избранное" Тогда
		ЭлементыФормы.КоманднаяПанельДереваИнтерфейса.Кнопки.ДобавитьВИзбранное.Доступность = Ложь;
	Иначе
		ЭлементыФормы.КоманднаяПанельДереваИнтерфейса.Кнопки.ДобавитьВИзбранное.Доступность = Истина;
	КонецЕсли;
	
	СгенерироватьКомандыКонтекстногоМеню();
	
КонецПроцедуры

Процедура ДеревоИнтерфейсаПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

Процедура ДеревоИнтерфейсаПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	СтрокаДляУдаления = ЭлементыФормы.ДеревоИнтерфейса.ТекущаяСтрока;
	СтрокаКорня = СтрокаДляУдаления.Родитель;
	Если НЕ СтатическиеВетки[СтрокаКорня] = Неопределено Тогда
		// Сброс статистик
		СтрокаСтатистики = стНастройки.СтатистикаИспользования.НайтиСтроки(Новый Структура("Вид,Имя",СтрокаДляУдаления.Вид,СтрокаДляУдаления.Имя));
		Если СтрокаСтатистики.Количество()>0 Тогда
			стНастройки.СтатистикаИспользования.Удалить(СтрокаСтатистики[0]);
		КонецЕсли;
		СтрокаКорня.Строки.Удалить(СтрокаДляУдаления);
	КонецЕсли;
	
	// Удаление подкаталога
	ПутьКаталога = (СтрокаДляУдаления.Представление);
	Файл = Новый Файл(ПутьКаталога);
	СтрокаКорня = ?(СтрокаДляУдаления.Родитель = Неопределено, ДеревоИнтерфейса, СтрокаДляУдаления.Родитель);;
	Если Файл.Существует() Тогда
		СтрокаКорня.Строки.Удалить(СтрокаДляУдаления);
		стНастройки.Каталоги.Удалить(ПутьКаталога);
	КонецЕсли;
КонецПроцедуры

Процедура ДеревоИнтерфейсаНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип ("СтрокаДереваЗначений") И  ПараметрыПеретаскивания.Значение.Родитель = Неопределено Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

Процедура ДеревоИнтерфейсаПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	СтандартнаяОбработка = Ложь;
	ДобавитьСтрокуВСтатическуюВетку(ПараметрыПеретаскивания.Значение, ?(Строка.Родитель = Неопределено, Строка.Имя, Строка.Родитель.Имя));
	ЗаполнитьСтатическиеВеткиДереваИнтерфейса(ЭтаФорма);
КонецПроцедуры

Процедура ДеревоИнтерфейсаПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	СтандартнаяОбработка = Ложь;
	ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	Если Строка = Неопределено Тогда
		// Выход за область ячеек табличного поля
		Возврат;
	КонецЕсли;
	СтруктураСтатическойВетки = ?(Строка.Родитель = Неопределено, СтатическиеВетки[Строка], СтатическиеВетки[Строка.Родитель]);
	Если СтруктураСтатическойВетки = Неопределено ИЛИ НЕ СтруктураСтатическойВетки.РазрешитьПеретаскивание Тогда
		Возврат;	
	КонецЕсли;
	тзСтатистикаИспользования = стНастройки.СтатистикаИспользования;
	КлючПоиска = Новый Структура(?(Строка.Родитель = Неопределено, Строка.Имя, Строка.Родитель.Имя)+", Вид, Имя", 1);
	ЗаполнитьЗначенияСвойств(КлючПоиска, ПараметрыПеретаскивания.Значение);
	НайденныеСтроки = тзСтатистикаИспользования.НайтиСтроки(КлючПоиска);
	Если НайденныеСтроки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Копирование;
КонецПроцедуры



///////////////////////////////////////////////////////////////////
// Статические кнопки командной панели

Процедура КоманднаяПанельДереваИнтерфейсаДобавитьВИзбранное(Кнопка)
	ДобавитьСтрокуВСтатическуюВетку(ЭлементыФормы.ДеревоИнтерфейса.ТекущаяСтрока, "Избранное");
	ЗаполнитьСтатическиеВеткиДереваИнтерфейса(ЭтаФорма);
КонецПроцедуры

Процедура КоманднаяПанельДереваИнтерфейсаДобавитьПапку(Кнопка)
	ВыборКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Если ВыборКаталога.Выбрать() Тогда
		ПредставлениеКаталога = ВыборКаталога.Каталог;
		ВвестиСтроку(ПредставлениеКаталога, "Представление каталога");
		стНастройки.Каталоги.Вставить(ВыборКаталога.Каталог, ПредставлениеКаталога);
		ЗаполнитьДеревоИнтерфейса(ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

Процедура КоманднаяПанельДереваИнтерфейсаОткрыть(Кнопка)
	ОткрытиеФормы();
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Фоновые команды

////////////////////////////////////////////////////////////////////
// Команды, специфические для статических веток

// Выполняет все команды, сохраненные в ветке "Автозапуск"
// Вызывается при открытии данной формы
//
Процедура Автозапуск() Экспорт
	Для каждого СтрокаДерева Из ДеревоИнтерфейса.Строки Цикл
		СтруктураНастроекСтатическойВетки = СтатическиеВетки[СтрокаДерева];
		Если СтруктураНастроекСтатическойВетки = Неопределено ИЛИ НЕ СтруктураНастроекСтатическойВетки.Автозапуск Тогда
			Продолжить;
		КонецЕсли;
		Если СтрокаДерева.Строки.Количество()>0 Тогда
			Для каждого СтрокаАвтозапуска Из СтрокаДерева.Строки Цикл
				ЭлементыФормы.ДеревоИнтерфейса.ТекущаяСтрока = СтрокаАвтозапуска;
				ОткрытиеФормы();
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры // Автозапуск()



Процедура ФоновыйПоиск() Экспорт

	
	ВыполнитьФоновыйПоиск();
	
	//ОтключитьОбработчикОжидания("ФоновыйПоиск");

КонецПроцедуры

Процедура кнНастройкаНажатие(Элемент)
	ПолучитьФорму("Настройка").ОткрытьМодально();
КонецПроцедуры

Процедура кнПрятатьНажатие(Элемент)
	Если СостояниеОкна = ВариантСостоянияОкна.Прячущееся Тогда
		_СостояниеОкна = ВариантСостоянияОкна.Прикрепленное
	Иначе
		_СостояниеОкна = ВариантСостоянияОкна.Прячущееся 
	КонецЕсли;
	стНастройки.Вставить("СостояниеОкна", _СостояниеОкна);
	Переоткрыть();
КонецПроцедуры

// Переоткрывает форму. Бывает нужно при смене отображения окна и при запуске отладочной версии
//
Процедура Переоткрыть(ИскатьОтладочнуюВерсию=Неопределено)
	
	Если НЕ Метаданные.Обработки.Найти(ЭтотОбъект.Метаданные().Имя) = Неопределено Тогда 
		Если ИскатьОтладочнуюВерсию=Истина Тогда
			ФайлОбработки = Новый Файл(КаталогВременныхФайлов()+"\ip8.epf");
			Если ФайлОбработки.Существует() Тогда
				Попытка
					Обработка = ВнешниеОбработки.Создать(ФайлОбработки);
				Исключение
					ОбщегоНазначения.Сообщение(ОписаниеОшибки(), Перечисления.ВидыСообщений.Ошибка);
					Возврат
				КонецПопытки;
			Иначе
				// Поиск в справочнике внешних обработок
				Обработка = НайтиИнтерфейснуюПанельВСправочникеВнешнихОбработок();
			КонецЕсли;
			
			Если Обработка = Неопределено Тогда
				Возврат
			Иначе
				ЗаполнитьЗначенияСвойств(Обработка, ЭтотОбъект);
				Форма = Обработка.ПолучитьФорму();
				ЗаполнитьЗначенияСвойств(Форма, ЭтаФорма,,"СостояниеОкна");					
			КонецЕсли;
		Иначе	
			Форма = Обработки[Метаданные().Имя].Создать().ПолучитьФорму();
		КонецЕсли;
		
	Иначе
		_ИмяФайла_ = "";
		Выполнить("_ИмяФайла_ = ИспользуемоеИмяФайла");
		Если ЗначениеЗаполнено(_ИмяФайла_) Тогда
			ФайлОбработки = Новый Файл(_ИмяФайла_);
			Если ФайлОбработки.Существует() Тогда
				Форма = ВнешниеОбработки.ПолучитьФорму(_ИмяФайла_);
			Иначе 
				Возврат;
			КонецЕсли;
		Иначе
			Возврат
		КонецЕсли;
	КонецЕсли;
	
	Если Не Форма = Неопределено Тогда
		Закрыть();
		Форма.Открыть();
	КонецЕсли;
	
КонецПроцедуры // Переоткрыть()

// Ищет интерфейсную панель по названию
Функция НайтиИнтерфейснуюПанельВСправочникеВнешнихОбработок()
	
	Если ЕстьСправочникВнешнихОбработок Тогда
		НайденныйЭлементСправочникаВнешнихОбработок = Справочники.ВнешниеОбработки.НайтиПоНаименованию("Интерфейсная панель");
		Если НЕ НайденныйЭлементСправочникаВнешнихОбработок.Пустая() И НайденныйЭлементСправочникаВнешнихОбработок.ВидОбработки = Перечисления.ВидыДополнительныхВнешнихОбработок.Обработка Тогда
			Попытка
				
				ИмяФайла = ПолучитьИмяВременногоФайла();
				ДвоичныеДанные = НайденныйЭлементСправочникаВнешнихОбработок.ХранилищеВнешнейОбработки.Получить();
				ДвоичныеДанные.Записать(ИмяФайла);
				Возврат  ВнешниеОбработки.Создать(ИмяФайла);
				
			Исключение
				
				ОбщегоНазначения.Сообщение("Выбранный файл не является внешней обработкой.
				|Либо, данная обработка не предназначена для
				|запуска в этой конфигурации.");
				Возврат Неопределено;
				
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;	
	
КонецФункции // НайтиИнтерфейснуюПанельВСправочникеВнешнихОбработок()

Процедура КомандыПанели_кнКонсоль(Кнопка)
	Форма = ОткрытьНастройкуКонсолиОтчетовИлиЗапросов(?(Кнопка.Имя = "кнКонсольОтчетов","rcf", "sel"));
	Если НЕ Форма = Неопределено Тогда
		Форма.Открыть();
	КонецЕсли;
КонецПроцедуры





КоличествоСтатическихКнопокКоманднойПанели 	= 4; // Открыть, Добавить в избранное, Справка, Разделитель

ЗагрузитьНастройки();	

// Управление состоянием окна
Если стНастройки.Свойство("СостояниеОкна") Тогда
	Если стНастройки.СостояниеОкна = ВариантСостоянияОкна.Обычное или стНастройки.СостояниеОкна = ВариантСостоянияОкна.Обычное  Тогда
	
		СостояниеОкна = стНастройки.СостояниеОкна;
	
	ИначеЕсли стНастройки.СостояниеОкна = ВариантСостоянияОкна.Прикрепленное ИЛИ стНастройки.СостояниеОкна = ВариантСостоянияОкна.Прячущееся Тогда
		
		СоединяемоеОкно = Истина;
		СостояниеОкна = стНастройки.СостояниеОкна;
	
	Иначе
		
		СостояниеОкна = стНастройки.СостояниеОкна;
		
	КонецЕсли;
	
Иначе
	стНастройки.Вставить("СостояниеОкна",СостояниеОкна);
КонецЕсли;
