////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ВнешнийОтчет.РолиПоОбъекту.МодульОбъекта
//
// Автор:  Уничкин Р. А. 16 января 2015 г. 20:40:39
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// переменные используются при формировании предварительного набора данных
Перем ВариантАнализа;
Перем АнализируемыйОбъект;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

//==================================================================================== Уничкин_РА [16.01.2015 20:40:33]=
Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СКД = ПолучитьМакет("Макет");
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СКД, КомпоновщикНастроек.ПолучитьНастройки() , ДанныеРасшифровки);
	
	тзНаборДанных = ПолучитьИзВременногоХранилища(ВременныйКэшНабораДанных);
	
	СтруктураВнешниеНаборыДанных = Новый Структура("тзНаборДанных", тзНаборДанных);
		
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, СтруктураВнешниеНаборыДанных, ДанныеРасшифровки);
	
	ДокументРезультат.Очистить();
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	//ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных, Истина);	
	
	ПроцессорВывода.НачатьВывод();

	ТаблицаЗафиксирована = Ложь;
	Пока Истина Цикл
	    ЭлементРезультата = ПроцессорКомпоновкиДанных.Следующий();
	    Если ЭлементРезультата= Неопределено Тогда
	        Прервать;
	    Иначе
	        ПроцессорВывода.ВывестиЭлемент(ЭлементРезультата);
	        Если Не ТаблицаЗафиксирована
	        И ЭлементРезультата.ЗначенияПараметров.Количество() >  0 Тогда
	            ТаблицаЗафиксирована = Истина;
	            ДокументРезультат.ФиксацияСверху = ДокументРезультат.ВысотаТаблицы - 1;
	        КонецЕсли;
	    КонецЕсли;
	КонецЦикла;

	ПроцессорВывода.ЗакончитьВывод();	
	
	сп_ГенерацияКнопокУправленияГруппировкамиНаСервере(ДокументРезультат);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//==================================================================================== Уничкин_РА [16.05.2015 23:29:13]=
// для отладочных целей
//
Функция змвт(мвт, ИмяТаблицы)
	
	Запрос = Новый Запрос("ВЫБРАТЬ * ИЗ " + ИмяТаблицы + " КАК " + ИмяТаблицы);
	Запрос.МенеджерВременныхТаблиц = мвт;
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции
 
//==================================================================================== Уничкин_РА [16.01.2015 20:24:58]=
Функция сп_ВыборкаПоПредварительномуНаборуДанных(СтруктураПараметров) Экспорт
	
	ВариантАнализа = СтруктураПараметров.ВариантАнализа;
	АнализируемыйОбъект = СтруктураПараметров.АнализируемыйОбъект;
	тзПредварительныйНаборДанных = СтруктураПараметров.тзПредварительныйНаборДанных;
	ОтключитьАнализРолей = СтруктураПараметров.ОтключитьАнализРолей;
		
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ГруппыДоступаПользователи.Ссылка КАК ГруппаДоступа,
		|	ГруппыДоступаПользователи.Ссылка.Профиль
		|ПОМЕСТИТЬ ВТ_ГруппыДоступаИПрофилиПользователя
		|ИЗ
		|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
		|ГДЕ
		|	ГруппыДоступаПользователи.Пользователь = &АнализируемыйОбъект
		|	И &ВариантАнализа = ""Пользователь""
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	тз.РольИОМ КАК Роль,
		|	тз.Право,
		|	тз.ПредставлениеОбъекта,
		|	тз.Вид,
		|	тз.Имя,
		|	тз.ПорядокОбъекта,
		|	тз.ПолноеИмя
		|ПОМЕСТИТЬ ВТ_ПраваРоли
		|ИЗ
		|	&тз КАК тз
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ПраваРоли.Роль,
		|	ВТ_ПраваРоли.Право,
		|	ЕСТЬNULL(ПрофилиГруппДоступаРоли.Ссылка, &ПустойПрофиль) КАК Профиль,
		|	ВТ_ПраваРоли.ПредставлениеОбъекта,
		|	ВТ_ПраваРоли.Вид,
		|	ВТ_ПраваРоли.Имя,
		|	ВТ_ПраваРоли.ПорядокОбъекта,
		|	ВТ_ПраваРоли.ПолноеИмя
		|ПОМЕСТИТЬ ВТ_ПраваРолиПрофили
		|ИЗ
		|	ВТ_ПраваРоли КАК ВТ_ПраваРоли
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа.Роли КАК ПрофилиГруппДоступаРоли
		|		ПО ВТ_ПраваРоли.Роль = ПрофилиГруппДоступаРоли.Роль
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ВариантАнализа = ""Профиль""
		|				ТОГДА ПрофилиГруппДоступаРоли.Ссылка = &АнализируемыйОбъект
		|			КОГДА &ВариантАнализа = ""Пользователь""
		|				ТОГДА ПрофилиГруппДоступаРоли.Ссылка В
		|						(ВЫБРАТЬ
		|							ВТ_ГруппыДоступаИПрофилиПользователя.Профиль
		|						ИЗ
		|							ВТ_ГруппыДоступаИПрофилиПользователя КАК ВТ_ГруппыДоступаИПрофилиПользователя)
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ПраваРолиПрофили.Роль,
		|	ВТ_ПраваРолиПрофили.Право,
		|	ВТ_ПраваРолиПрофили.Профиль,
		|	ЕСТЬNULL(ГруппыДоступа.Ссылка, &ПустаяГруппаДоступа) КАК ГруппаДоступа,
		|	ВТ_ПраваРолиПрофили.ПредставлениеОбъекта,
		|	ВТ_ПраваРолиПрофили.Вид,
		|	ВТ_ПраваРолиПрофили.Имя,
		|	ВТ_ПраваРолиПрофили.ПорядокОбъекта,
		|	ВТ_ПраваРолиПрофили.ПолноеИмя
		|ПОМЕСТИТЬ ВТ_ПраваРолиПрофилиГруппыДоступа
		|ИЗ
		|	ВТ_ПраваРолиПрофили КАК ВТ_ПраваРолиПрофили
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа КАК ГруппыДоступа
		|		ПО ВТ_ПраваРолиПрофили.Профиль = ГруппыДоступа.Профиль
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ВариантАнализа = ""Пользователь""
		|				ТОГДА ГруппыДоступа.Ссылка В
		|						(ВЫБРАТЬ
		|							ВТ_ГруппыДоступаИПрофилиПользователя.ГруппаДоступа
		|						ИЗ
		|							ВТ_ГруппыДоступаИПрофилиПользователя КАК ВТ_ГруппыДоступаИПрофилиПользователя)
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ПраваРолиПрофилиГруппыДоступа.Роль КАК РольИОМ,
		|	ВТ_ПраваРолиПрофилиГруппыДоступа.Право,
		|	ВТ_ПраваРолиПрофилиГруппыДоступа.Профиль,
		|	ВТ_ПраваРолиПрофилиГруппыДоступа.ГруппаДоступа,
		|	ЕСТЬNULL(ГруппыДоступаПользователи.Пользователь, &ПустойПользователь) КАК Пользователь,
		|	ВТ_ПраваРолиПрофилиГруппыДоступа.ПредставлениеОбъекта,
		|	ВТ_ПраваРолиПрофилиГруппыДоступа.Вид,
		|	ВТ_ПраваРолиПрофилиГруппыДоступа.Имя,
		|	ВТ_ПраваРолиПрофилиГруппыДоступа.ПредставлениеОбъекта КАК Порядок,
		|	ВТ_ПраваРолиПрофилиГруппыДоступа.ПорядокОбъекта,
		|	ВТ_ПраваРолиПрофилиГруппыДоступа.ПолноеИмя
		|ИЗ
		|	ВТ_ПраваРолиПрофилиГруппыДоступа КАК ВТ_ПраваРолиПрофилиГруппыДоступа
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
		|		ПО ВТ_ПраваРолиПрофилиГруппыДоступа.ГруппаДоступа = ГруппыДоступаПользователи.Ссылка
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ВариантАнализа = ""Пользователь""
		|				ТОГДА ГруппыДоступаПользователи.Пользователь = &АнализируемыйОбъект
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ";
	
	Запрос.УстановитьПараметр("ПустаяГруппаДоступа", Справочники.ГруппыДоступа.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойПользователь", Справочники.Пользователи.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойПрофиль", Справочники.ПрофилиГруппДоступа.ПустаяСсылка());
	
	Если ОтключитьАнализРолей Тогда
		// для исключения из условий
		Запрос.УстановитьПараметр("ВариантАнализа", "ПользовательБезАнализаРолей");	
	Иначе	
		Запрос.УстановитьПараметр("ВариантАнализа", ВариантАнализа);
	КонецЕсли; 
		
	Запрос.УстановитьПараметр("АнализируемыйОбъект", АнализируемыйОбъект);

	Запрос.УстановитьПараметр("тз", тзПредварительныйНаборДанных);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();	
	
КонецФункции 

//==================================================================================== Уничкин_РА [20.03.2015 18:28:10]=
&НаСервере
Процедура сп_ГенерацияКнопокУправленияГруппировкамиНаСервере(ДокументРезультат)

	КоличествоГруппировок = ДокументРезультат.КоличествоУровнейГруппировокСтрок();	

	Если КоличествоГруппировок = 0 Тогда
		Возврат;		
	КонецЕсли; 
	
	Макет = ЭтотОбъект.ПолучитьМакет("МакетКнопкиУправленияГруппировкой");
	
	обл_Кнопка = Макет.ПолучитьОбласть("Кнопка");
	
	КэшРезультата = Новый ТабличныйДокумент;	
	КэшРезультата.Вывести(ДокументРезультат);
	КэшРезультата.Область().СоздатьФорматСтрок();
	
	ДокументРезультат.Очистить();	
	ВыводСтроки = Ложь;
	Для сч = 1 По КоличествоГруппировок Цикл
		
		обл_Кнопка.Параметры.НомерГруппировки = сч;
		обл_Кнопка.ТекущаяОбласть.Расшифровка = Новый Структура("НомерГруппировки", сч);
		
		Если ВыводСтроки Тогда
			ДокументРезультат.Присоединить(обл_Кнопка);
		Иначе
			ДокументРезультат.Вывести(обл_Кнопка);
			ВыводСтроки = Истина;
		КонецЕсли; 
	КонецЦикла; 
	
	ДокументРезультат.Вывести(КэшРезультата);
	ДокументРезультат.ФиксацияСверху = ДокументРезультат.ФиксацияСверху + 2;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ: новые строки талиц (нс)

//==================================================================================== Уничкин_РА [09.01.2015 23:50:49]=
Процедура нс_ОПД(дз, ВидТаблицы, ВидПоля, ПравоДоступа)

	стр_ур1 = дз.Строки.Найти(ВидТаблицы, "ВидТаблицы");
	Если стр_ур1 = Неопределено Тогда
		стр_ур1 = дз.Строки.Добавить();
		стр_ур1.ВидТаблицы = ВидТаблицы;
	КонецЕсли; 
	
	стр_ур2 = стр_ур1.Строки.Найти(ВидПоля, "ВидПоля");
	Если стр_ур2 = Неопределено Тогда
		стр_ур2 = стр_ур1.Строки.Добавить();
		стр_ур2.ВидТаблицы = ВидТаблицы;
		стр_ур2.ВидПоля = ВидПоля;
	КонецЕсли; 	
	
	стр_ур3 = стр_ур2.Строки.Добавить();
	стр_ур3.ПравоДоступа = ПравоДоступа;
	
КонецПроцедуры
 
//==================================================================================== Уничкин_РА [05.03.2015 23:17:12]=
//Описание:
// Добавление новой строки в таблицу значений "Набор данных"
//Параметры:
// тз - ТаблицаЗначений
// Роль - ОбъектМетаданных - элемент коллекции "Метаданные.Роли"
// Реквизит - ОбъектМетаданных - объект метаданных, соответствующий полю как виду
// Право - Строка - Право, присутствующее у анализируемого объекта.
//
Процедура нс_НД(тз, ПредставлениеОбъекта, ПорядокОбъекта, Вид, Имя, ПолноеИмя, Реквизит, РольИОМ, Право)

	НовСтр = тз.Добавить();
	НовСтр.ПредставлениеОбъекта = ПредставлениеОбъекта;
	НовСтр.ПорядокОбъекта = ПорядокОбъекта;
	НовСтр.Вид = Вид;
	НовСтр.Имя = Имя;
	НовСтр.ПолноеИмя = ПолноеИмя;
	НовСтр.Реквизит = Реквизит;
	НовСтр.РольИОМ = РольИОМ;	
	НовСтр.Право = Право;	
	
КонецПроцедуры

//==================================================================================== Уничкин_РА [05.03.2015 19:34:53]=
//Описание:
// Добавление новой строки в таблицу значений "Права доступа"
//Параметры:
// тз - ТаблицаЗначений
// Имя - Строка - Имя права 
// ИмяАнгл - Строка - английйский вариант именования права
// Синоним - Строка - Представление и описание права
//
Процедура нс_ПД(тз, Имя, ИмяАнгл, Синоним)
	
	НовСтр = тз.Добавить();
	НовСтр.Имя = Имя;
	НовСтр.ИмяАнгл = ИмяАнгл;
	НовСтр.Синоним = Синоним;
	
КонецПроцедуры

//==================================================================================== Уничкин_РА [15.01.2015 19:31:35]=
Процедура нс_К(тз, ИмяТаблицыМнЧ, ИмяТаблицыЕдЧ)	
	НовСтр = тз.Добавить(); 
	НовСтр.ИмяТаблицыМнЧ = ИмяТаблицыМнЧ;
	НовСтр.ИмяТаблицыЕдЧ = ИмяТаблицыЕдЧ;
	НовСтр.Порядок = тз.Количество() - 1;
	
	Синоним = "";
		
	Для сч=1 По СтрДлина(ИмяТаблицыМнЧ) Цикл
		
		сим = Сред(ИмяТаблицыМнЧ, сч, 1);
		
		Если Врег(Сим) = Сим Тогда
			Если Синоним <> "" Тогда
				сим = " " + НРег(Сим);			
			КонецЕсли; 	
		КонецЕсли; 
		
		Синоним = Синоним + Сим;
	КонецЦикла; 
	
	НовСтр.Представление = Синоним;
	
КонецПроцедуры

//==================================================================================== Уничкин_РА [29.05.2015 17:00:54]=
Процедура нс_ИПД(дз, Право, Подчиненноеправо)
	
	стр_ур_0 = дз.Строки.Найти(Право, "Право");	
	
	Если стр_ур_0 = Неопределено Тогда
		стр_ур_0 =  дз.Строки.Добавить();
		стр_ур_0.Право = Право; 		
		стр_ур_0.Уровень = 0;
	КонецЕсли; 
	
	стр_ур_1 = стр_ур_0.Строки.Добавить();
	стр_ур_1.Право = Подчиненноеправо;
	стр_ур_1.Уровень = 1;
	
КонецПроцедуры

//==================================================================================== Уничкин_РА [29.05.2015 18:33:28]=
Процедура нс_КИ(тз, ПолноеИмя, Роль = Неопределено, Право)
	
	НовСтр = тз.Добавить();
	НовСтр.ПолноеИмя = ПолноеИмя;
	НовСтр.Роль = Роль;
	НовСтр.Право = Право;
	
КонецПроцедуры

//==================================================================================== Уничкин_РА [03.06.2015 17:50:20]=
Процедура нс_ПМТ(тз, МетаТаблица, Вид, ПолноеИмя, Имя, ПорядокОбъекта, ПредставлениеОбъекта)
	
	нс = тз.Добавить();
	нс.МетаТаблица = МетаТаблица;
	нс.Вид = Вид;
	нс.ПолноеИмя = ПолноеИмя;
	нс.Имя = Имя;
	нс.ПорядокОбъекта = ПорядокОбъекта;
	нс.ПредставлениеОбъекта = ПредставлениеОбъекта;
	
КонецПроцедуры
 

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ: заполнение таблиц (зт)

//==================================================================================== Уничкин_РА [05.03.2015 19:34:23]=
Функция зт_ОписаниеПравДоступа()
	
	тз = свт_ПраваДоступа_ТаблицаЗначений();
	
	нс_ПД(тз, "Чтение", "Read", "чтение"); 
	нс_ПД(тз, "Добавление", "Insert", "добавление"); 
	нс_ПД(тз, "Изменение", "Update", "изменение"); 
	нс_ПД(тз, "Удаление", "Delete", "удаление"); 
	нс_ПД(тз, "Проведение", "Posting", "проведение документов"); 
	нс_ПД(тз, "ОтменаПроведения", "UndoPosting", "отмена проведения документов"); 
	нс_ПД(тз, "Просмотр", "View", "просмотр"); 
	нс_ПД(тз, "ИнтерактивноеДобавление", "InteractiveInsert", "интерактивное добавление"); 
	нс_ПД(тз, "Редактирование", "Edit", "редактирование"); 
	нс_ПД(тз, "ИнтерактивнаяПометкаУдаления", "InteractiveSetDeletionMark", "интерактивная пометка на удаление"); 
	нс_ПД(тз, "ИнтерактивноеСнятиеПометкиУдаления", "InteractiveClearDeletionMark",
		"интерактивное снятие пометки на удаление"); 
		
	нс_ПД(тз, "ИнтерактивноеУдалениеПомеченных", "InteractiveDeleteMarked",
		"интерактивное удаление помеченных объектов"); 
		
	нс_ПД(тз, "ИнтерактивноеПроведение", "InteractivePosting", "интерактивное проведение"); 
	нс_ПД(тз, "ИнтерактивноеПроведениеНеОперативное", "InteractivePostingRegular", "интерактивное проведение " + 
		"стандартными командами форм) документа в неоперативном режиме"); 
		
	нс_ПД(тз, "ИнтерактивнаяОтменаПроведения", "InteractiveUndoPosting", "интерактивная отмена проведения"); 
	нс_ПД(тз, "ИнтерактивноеИзменениеПроведенных", "InteractiveChangeOfPosted",
		"интерактивное редактирование проведенного документа. Если право не установлено, то пользователь"+
		" не может проведенный документ удалить, установить пометку удаления, перепровести или сделать "+
		"непроведенным. Форма такого документа открывается в режиме просмотра"); 
		
	нс_ПД(тз, "ВводПоСтроке", "InputByString", "использование режима ввода по строке"); 
	нс_ПД(тз, "УправлениеИтогами", "TotalsControl", "управление итогами регистра бухгалтерии и регистра накопления; " + 
		"установка периода, по который рассчитаны итоги, и пересчет итогов)"); 
		
	нс_ПД(тз, "Использование", "Use", "использование"); 
	нс_ПД(тз, "ИнтерактивноеУдаление", "InteractiveDelete", "интерактивное непосредственное удаление"); 
	нс_ПД(тз, "Администрирование", "Administration", "администрирование информационной базы; требуется наличия"+
	" права ""Администрирование данных"""); 
	
	нс_ПД(тз, "АдминистрированиеДанных", "DataAdministration", "право на административные действия над данными"); 
	нс_ПД(тз, "МонопольныйРежим", "ExclusiveMode", "использование монопольного режима"); 
	нс_ПД(тз, "АктивныеПользователи", "ActiveUsers", "просмотр списка активных пользователей"); 
	нс_ПД(тз, "ЖурналРегистрации", "EventLog", "журнал регистрации"); 
	нс_ПД(тз, "ВнешнееСоединение", "ExternalConnection", "внешнее соединение"); 
	нс_ПД(тз, "Automation", "Automation", "использование automation"); 
	нс_ПД(тз, "ИнтерактивноеОткрытиеВнешнихОбработок", "InteractiveOpenExtDataProcessors",
		"интерактивное открытие внешних обработок"); 
		
	нс_ПД(тз, "ИнтерактивноеОткрытиеВнешнихОтчетов", "InteractiveOpenExtReports",
		"интерактивное открытие внешних отчетов"); 
		
	нс_ПД(тз, "Получение", "Get", "получение значения, не хранящегося в базе данных"); 
	нс_ПД(тз, "Установка", "Set", "установка значения, не сохраняемого в базе данных"); 
	нс_ПД(тз, "ИнтерактивнаяАктивация", "InteractiveActivate", "интерактивная активация"); 
	нс_ПД(тз, "Старт", "Start", "старт бизнес-процесса"); 
	нс_ПД(тз, "ИнтерактивныйСтарт", "InteractiveStart", "интерактивный старт бизнес-процесса"); 
	нс_ПД(тз, "Выполнение", "Execute", "выполнение задачи"); 
	нс_ПД(тз, "ИнтерактивноеВыполнение", "InteractiveExecute", "интерактивное выполнение задачи"); 
	нс_ПД(тз, "Вывод", "Output", "вывод на печать, запись и копирование в буфер обмена"); 
	нс_ПД(тз, "ОбновлениеКонфигурацииБазыДанных", "UpdateDataBaseConfiguration", "обновление конфигурации базы данных"); 
	нс_ПД(тз, "ТонкийКлиент", "ThinClient", "право запуска тонкого клиента"); 
	нс_ПД(тз, "ВебКлиент", "WebClient", "право запуска веб-клиента"); 
	нс_ПД(тз, "ТолстыйКлиент", "ThickClient", "право запуска толстого клиента"); 
	нс_ПД(тз, "РежимВсеФункции", "AllFunctionsMode", "право на использования режима ""Все функции"""); 
	нс_ПД(тз, "СохранениеДанныхПользователя", "SaveUserData", "право на сохранение данных пользователя" +
		"настроек, избранного, истории)"); 
		
	нс_ПД(тз, "ИзменениеСтандартнойАутентификации", "StandardAuthenticationChange",
		"пользователь имеет право изменять свои сохраненные параметры стандартной аутентификации внешнего источника данных"); 
		
	нс_ПД(тз, "ИзменениеСтандартнойАутентификацииСеанса", "SessionStandardAuthenticationChange", 
		"пользователь имеет право изменять параметры стандартной аутентификации внешнего источника данных для текущего сеанса"); 
		
	нс_ПД(тз, "ИзменениеАутентификацииОССеанса", "SessionOSAuthenticationChange",
		"пользователь имеет право изменять параметры стандартной аутентификации внешнего источника данных для текущего"+
		" сеанса и текущего пользователя"); 
		
	нс_ПД(тз, "ИнтерактивноеУдалениеПредопределенныхДанныхДанных", "InteractiveDeletePredefinedData",
		"интерактивное удаление предопределенных данных"); 
		
	нс_ПД(тз, "ИнтерактивнаяПометкаУдаленияПредопределенныхДанныхДанных", "InteractiveSetDeletionMarkPredefinedData", 
		"интерактивная пометка предопределенных данных"); 
		
	нс_ПД(тз, "ИнтерактивноеСнятиеПометкиУдаленияПредопределенныхДанных", "InteractiveClearDeletionMarkPredefinedData", 
		"интерактивное снятие пометки предопределенных данных"); 
		
	нс_ПД(тз, "ИнтерактивноеУдалениеПомеченныхПредопределенныхДанныхДан", "InteractiveDeleteMarkedPredefinedData", 
		"интерактивное удаление помеченных предопределенных данных"); 
		
	нс_ПД(тз, "АдминистрированиеРасширенийКонфигурации", "ConfigExtensionsAdministration",
		"право на администрирование расширений конфигурации.");
		
	Возврат тз;	
КонецФункции

//==================================================================================== Уничкин_РА [05.03.2015 23:04:48]=
Функция зт_ПроверяемыеТаблицыПоПравамДоступа()
	
	пп_ВидыПолей = пп_ВидыПроверяемыхПолей();
		
	дзОбъектыПравДоступа = зт_ОбъектыПравДоступа();
	дз = свт_ПроверяемыеТаблицыПоПравамДоступа_ДеревоЗначений();
	
	тзПроверяемыеТаблицы = зт_ПроверяемыеМетаТаблицы();
	
	Для каждого стр_тзПТ Из тзПроверяемыеТаблицы Цикл
		   
		стр_ур0 = дз.Строки.Добавить();
		стр_ур0.МетаТаблица = стр_тзПТ.МетаТаблица;
		
		дзПраваДоступаОбъекта = дзОбъектыПравДоступа.Строки.Найти(стр_тзПТ.Вид, "ВидТаблицы");

		Для каждого ур_ВидыПолей Из дзПраваДоступаОбъекта.Строки Цикл
			ВидПоля = ур_ВидыПолей.ВидПоля;
			
			Если ВидПоля = пп_ВидыПолей.О Тогда 
				стр_ур1 = стр_ур0.Строки.Добавить();
				стр_Ур1.ВидПоля = ВидПоля;	
				
				ЗаполнитьЗначенияСвойств(стр_ур1, стр_тзПТ);
				
				Для каждого ур_ПравоДоступа Из ур_ВидыПолей.Строки Цикл
					стр_ур2 = стр_ур1.Строки.Добавить();
					стр_ур2.ПравоДоступа = 	ур_ПравоДоступа.ПравоДоступа;			
				КонецЦикла; 	
				Продолжить;
			КонецЕсли; 
		КонецЦикла; 	
	КонецЦикла; 
	
	Возврат дз;
	
КонецФункции

//==================================================================================== Уничкин_РА [09.01.2015 23:44:56]=
Функция зт_ОбъектыПравДоступа() Экспорт
	
	дз = свт_ОбъектыПравДоступа_ДеревоЗначений();
	
	ВидыПолей = пп_ВидыПроверяемыхПолей();
	
//-	
	нс_ОПД(дз, "Конфигурация", ВидыПолей.О, "Администрирование");
	нс_ОПД(дз, "Конфигурация", ВидыПолей.О, "АдминистрированиеДанных");
	нс_ОПД(дз, "Конфигурация", ВидыПолей.О, "ОбновлениеКонфигурацииБазыДанных");
	нс_ОПД(дз, "Конфигурация", ВидыПолей.О, "МонопольныйРежим");
	нс_ОПД(дз, "Конфигурация", ВидыПолей.О, "АктивныеПользователи");
	нс_ОПД(дз, "Конфигурация", ВидыПолей.О, "ЖурналРегистрации");
	нс_ОПД(дз, "Конфигурация", ВидыПолей.О, "ТонкийКлиент");
	нс_ОПД(дз, "Конфигурация", ВидыПолей.О, "ВебКлиент");
	нс_ОПД(дз, "Конфигурация", ВидыПолей.О, "ТолстыйКлиент");
	нс_ОПД(дз, "Конфигурация", ВидыПолей.О, "ВнешнееСоединение");
	нс_ОПД(дз, "Конфигурация", ВидыПолей.О, "Automation");
	нс_ОПД(дз, "Конфигурация", ВидыПолей.О, "РежимВсеФункции");
	нс_ОПД(дз, "Конфигурация", ВидыПолей.О, "СохранениеДанныхПользователя");
	//нс_ОПД(дз, "Конфигурация", ВидыПолей.О, "АдминистрированиеРасширенийКонфигурации");   8.3.6
	нс_ОПД(дз, "Конфигурация", ВидыПолей.О, "ИнтерактивноеОткрытиеВнешнихОбработок");
	нс_ОПД(дз, "Конфигурация", ВидыПолей.О, "ИнтерактивноеОткрытиеВнешнихОтчетов");
	нс_ОПД(дз, "Конфигурация", ВидыПолей.О, "Вывод");
//-	
	нс_ОПД(дз, "Подсистема", ВидыПолей.О, "Просмотр");
//-
	нс_ОПД(дз, "ПараметрСеанса", ВидыПолей.О, "Получение");
	нс_ОПД(дз, "ПараметрСеанса", ВидыПолей.О, "Установка");
//-
	нс_ОПД(дз, "ОбщийРеквизит", ВидыПолей.О, "Просмотр");
	нс_ОПД(дз, "ОбщийРеквизит", ВидыПолей.О, "Редактирование");
//-
	нс_ОПД(дз, "ПланОбмена", ВидыПолей.О, "Чтение");
	нс_ОПД(дз, "ПланОбмена", ВидыПолей.О, "Добавление");
	нс_ОПД(дз, "ПланОбмена", ВидыПолей.О, "Изменение");
	нс_ОПД(дз, "ПланОбмена", ВидыПолей.О, "Удаление");
	нс_ОПД(дз, "ПланОбмена", ВидыПолей.О, "Просмотр");
	нс_ОПД(дз, "ПланОбмена", ВидыПолей.О, "ИнтерактивноеДобавление");
	нс_ОПД(дз, "ПланОбмена", ВидыПолей.О, "Редактирование");
	нс_ОПД(дз, "ПланОбмена", ВидыПолей.О, "ИнтерактивноеУдаление");
	нс_ОПД(дз, "ПланОбмена", ВидыПолей.О, "ИнтерактивнаяПометкаУдаления");
	нс_ОПД(дз, "ПланОбмена", ВидыПолей.О, "ИнтерактивноеСнятиеПометкиУдаления");
	нс_ОПД(дз, "ПланОбмена", ВидыПолей.О, "ИнтерактивноеУдалениеПомеченных");
	нс_ОПД(дз, "ПланОбмена", ВидыПолей.О, "ВводПоСтроке");
	//нс_ОПД(дз, "ПланОбмена", ВидыПолей.СР, "Просмотр");
	//нс_ОПД(дз, "ПланОбмена", ВидыПолей.СР, "Редактирование");
	//нс_ОПД(дз, "ПланОбмена", ВидыПолей.Р, "Просмотр");
	//нс_ОПД(дз, "ПланОбмена", ВидыПолей.Р, "Редактирование");
	//нс_ОПД(дз, "ПланОбмена", ВидыПолей.ТЧ, "Просмотр");
	//нс_ОПД(дз, "ПланОбмена", ВидыПолей.ТЧ, "Редактирование");
	//нс_ОПД(дз, "ПланОбмена", ВидыПолей.РТЧ, "Просмотр");
	//нс_ОПД(дз, "ПланОбмена", ВидыПолей.РТЧ, "Редактирование");
//-
	нс_ОПД(дз, "КритерийОтбора", ВидыПолей.О, "Просмотр");
//-
	нс_ОПД(дз, "ОбщаяФорма", ВидыПолей.О, "Просмотр");
//-
	нс_ОПД(дз, "ОбщаяКоманда", ВидыПолей.О, "Просмотр");
//-
	нс_ОПД(дз, "WebСервис", ВидыПолей.ОП, "Использование");
//-	
	нс_ОПД(дз, "Константа", ВидыПолей.О, "Чтение");
	нс_ОПД(дз, "Константа", ВидыПолей.О, "Изменение");
	нс_ОПД(дз, "Константа", ВидыПолей.О, "Просмотр");
	нс_ОПД(дз, "Константа", ВидыПолей.О, "Редактирование");
//-
	нс_ОПД(дз, "Справочник", ВидыПолей.О, "Чтение");
	нс_ОПД(дз, "Справочник", ВидыПолей.О, "Добавление");
	нс_ОПД(дз, "Справочник", ВидыПолей.О, "Изменение");
	нс_ОПД(дз, "Справочник", ВидыПолей.О, "Удаление");
	нс_ОПД(дз, "Справочник", ВидыПолей.О, "Просмотр");
	нс_ОПД(дз, "Справочник", ВидыПолей.О, "ИнтерактивноеДобавление");
	нс_ОПД(дз, "Справочник", ВидыПолей.О, "Редактирование");
	нс_ОПД(дз, "Справочник", ВидыПолей.О, "ИнтерактивноеУдаление");
	нс_ОПД(дз, "Справочник", ВидыПолей.О, "ИнтерактивнаяПометкаУдаления");
	нс_ОПД(дз, "Справочник", ВидыПолей.О, "ИнтерактивноеСнятиеПометкиУдаления");
	нс_ОПД(дз, "Справочник", ВидыПолей.О, "ИнтерактивноеУдалениеПомеченных");
	нс_ОПД(дз, "Справочник", ВидыПолей.О, "ВводПоСтроке");
	нс_ОПД(дз, "Справочник", ВидыПолей.О, "ИнтерактивноеУдалениеПредопределенныхДанных");
	нс_ОПД(дз, "Справочник", ВидыПолей.О, "ИнтерактивнаяПометкаУдаленияПредопределенныхДанных");
	нс_ОПД(дз, "Справочник", ВидыПолей.О, "ИнтерактивноеСнятиеПометкиУдаленияПредопределенныхДанных");
	нс_ОПД(дз, "Справочник", ВидыПолей.О, "ИнтерактивноеУдалениеПомеченныхПредопределенныхДанных");
	//нс_ОПД(дз, "Справочник", ВидыПолей.К, "Просмотр");
	//нс_ОПД(дз, "Справочник", ВидыПолей.СР, "Просмотр");
	//нс_ОПД(дз, "Справочник", ВидыПолей.СР, "Редактирование");
	//нс_ОПД(дз, "Справочник", ВидыПолей.Р, "Просмотр");
	//нс_ОПД(дз, "Справочник", ВидыПолей.Р, "Редактирование");
	//нс_ОПД(дз, "Справочник", ВидыПолей.ТЧ, "Просмотр");
	//нс_ОПД(дз, "Справочник", ВидыПолей.ТЧ, "Редактирование");
	//нс_ОПД(дз, "Справочник", ВидыПолей.РТЧ, "Просмотр");
	//нс_ОПД(дз, "Справочник", ВидыПолей.РТЧ, "Редактирование");
//-	
	нс_ОПД(дз, "Последовательность", ВидыПолей.О, "Чтение");
	нс_ОПД(дз, "Последовательность", ВидыПолей.О, "Изменение");
//-		
	нс_ОПД(дз, "Документ", ВидыПолей.О, "Чтение");
	нс_ОПД(дз, "Документ", ВидыПолей.О, "Добавление");
	нс_ОПД(дз, "Документ", ВидыПолей.О, "Изменение");
	нс_ОПД(дз, "Документ", ВидыПолей.О, "Удаление");
	нс_ОПД(дз, "Документ", ВидыПолей.О, "Проведение");
	нс_ОПД(дз, "Документ", ВидыПолей.О, "ОтменаПроведения");
	нс_ОПД(дз, "Документ", ВидыПолей.О, "Просмотр");
	нс_ОПД(дз, "Документ", ВидыПолей.О, "ИнтерактивноеДобавление");
	нс_ОПД(дз, "Документ", ВидыПолей.О, "Редактирование");
	нс_ОПД(дз, "Документ", ВидыПолей.О, "ИнтерактивноеУдаление");
	нс_ОПД(дз, "Документ", ВидыПолей.О, "ИнтерактивнаяПометкаУдаления");
	нс_ОПД(дз, "Документ", ВидыПолей.О, "ИнтерактивноеСнятиеПометкиУдаления");
	нс_ОПД(дз, "Документ", ВидыПолей.О, "ИнтерактивноеУдалениеПомеченных");
	нс_ОПД(дз, "Документ", ВидыПолей.О, "ИнтерактивноеПроведение");
	нс_ОПД(дз, "Документ", ВидыПолей.О, "ИнтерактивноеПроведениеНеоперативное");
	нс_ОПД(дз, "Документ", ВидыПолей.О, "ИнтерактивнаяОтменаПроведения");
	нс_ОПД(дз, "Документ", ВидыПолей.О, "ИнтерактивноеИзменениеПроведенных");
	нс_ОПД(дз, "Документ", ВидыПолей.О, "ВводПоСтроке");
	//нс_ОПД(дз, "Документ", ВидыПолей.К, "Просмотр");
	//нс_ОПД(дз, "Документ", ВидыПолей.СР, "Просмотр");
	//нс_ОПД(дз, "Документ", ВидыПолей.СР, "Редактирование");
	//нс_ОПД(дз, "Документ", ВидыПолей.Р, "Просмотр");
	//нс_ОПД(дз, "Документ", ВидыПолей.Р, "Редактирование");
	//нс_ОПД(дз, "Документ", ВидыПолей.ТЧ, "Просмотр");
	//нс_ОПД(дз, "Документ", ВидыПолей.ТЧ, "Редактирование");
	//нс_ОПД(дз, "Документ", ВидыПолей.РТЧ, "Просмотр");
	//нс_ОПД(дз, "Документ", ВидыПолей.РТЧ, "Редактирование");	
//-
	нс_ОПД(дз, "ЖурналДокументов", ВидыПолей.О, "Чтение");
	нс_ОПД(дз, "ЖурналДокументов", ВидыПолей.О, "Просмотр");
	//нс_ОПД(дз, "ЖурналДокументов", ВидыПолей.К, "Просмотр");
//-
	нс_ОПД(дз, "Отчет", ВидыПолей.О, "Использование");
	нс_ОПД(дз, "Отчет", ВидыПолей.О, "Просмотр");
	//нс_ОПД(дз, "Отчет", ВидыПолей.К, "Просмотр");
	//нс_ОПД(дз, "Отчет", ВидыПолей.Р, "Просмотр");
	//нс_ОПД(дз, "Отчет", ВидыПолей.Р, "Редактирование");
	//нс_ОПД(дз, "Отчет", ВидыПолей.ТЧ, "Просмотр");
	//нс_ОПД(дз, "Отчет", ВидыПолей.ТЧ, "Редактирование");
	//нс_ОПД(дз, "Отчет", ВидыПолей.РТЧ, "Просмотр");
	//нс_ОПД(дз, "Отчет", ВидыПолей.РТЧ, "Редактирование");	
//-
	нс_ОПД(дз, "Обработка", ВидыПолей.О, "Использование");
	нс_ОПД(дз, "Обработка", ВидыПолей.О, "Просмотр");
	//нс_ОПД(дз, "Обработка", ВидыПолей.К, "Просмотр");
	//нс_ОПД(дз, "Обработка", ВидыПолей.Р, "Просмотр");
	//нс_ОПД(дз, "Обработка", ВидыПолей.Р, "Редактирование");
	//нс_ОПД(дз, "Обработка", ВидыПолей.ТЧ, "Просмотр");
	//нс_ОПД(дз, "Обработка", ВидыПолей.ТЧ, "Редактирование");
	//нс_ОПД(дз, "Обработка", ВидыПолей.РТЧ, "Просмотр");
	//нс_ОПД(дз, "Обработка", ВидыПолей.РТЧ, "Редактирование");
//-
	нс_ОПД(дз, "ПланВидовХарактеристик", ВидыПолей.О, "Чтение");
	нс_ОПД(дз, "ПланВидовХарактеристик", ВидыПолей.О, "Добавление");
	нс_ОПД(дз, "ПланВидовХарактеристик", ВидыПолей.О, "Изменение");
	нс_ОПД(дз, "ПланВидовХарактеристик", ВидыПолей.О, "Удаление");
	нс_ОПД(дз, "ПланВидовХарактеристик", ВидыПолей.О, "Просмотр");
	нс_ОПД(дз, "ПланВидовХарактеристик", ВидыПолей.О, "ИнтерактивноеДобавление");
	нс_ОПД(дз, "ПланВидовХарактеристик", ВидыПолей.О, "Редактирование");
	нс_ОПД(дз, "ПланВидовХарактеристик", ВидыПолей.О, "ИнтерактивноеУдаление");
	нс_ОПД(дз, "ПланВидовХарактеристик", ВидыПолей.О, "ИнтерактивнаяПометкаУдаления");
	нс_ОПД(дз, "ПланВидовХарактеристик", ВидыПолей.О, "ИнтерактивноеСнятиеПометкиУдаления");
	нс_ОПД(дз, "ПланВидовХарактеристик", ВидыПолей.О, "ИнтерактивноеУдалениеПомеченных");
	нс_ОПД(дз, "ПланВидовХарактеристик", ВидыПолей.О, "ВводПоСтроке");
	//нс_ОПД(дз, "ПланВидовХарактеристик", ВидыПолей.О, "ИнтерактивноеУдалениеПредопределенныхДанных");
	//нс_ОПД(дз, "ПланВидовХарактеристик", ВидыПолей.О, "ИнтерактивнаяПометкаУдаленияПредопределенныхДанных");
	//нс_ОПД(дз, "ПланВидовХарактеристик", ВидыПолей.О, "ИнтерактивноеСнятиеПометкиУдаленияПредопределенныхДанных");
	//нс_ОПД(дз, "ПланВидовХарактеристик", ВидыПолей.О, "ИнтерактивноеУдалениеПомеченныхПредопределенныхДанных");
	//нс_ОПД(дз, "ПланВидовХарактеристик", ВидыПолей.К, "Просмотр");
	//нс_ОПД(дз, "ПланВидовХарактеристик", ВидыПолей.СР, "Просмотр");
	//нс_ОПД(дз, "ПланВидовХарактеристик", ВидыПолей.СР, "Редактирование");
	//нс_ОПД(дз, "ПланВидовХарактеристик", ВидыПолей.Р, "Просмотр");
	//нс_ОПД(дз, "ПланВидовХарактеристик", ВидыПолей.Р, "Редактирование");
	//нс_ОПД(дз, "ПланВидовХарактеристик", ВидыПолей.ТЧ, "Просмотр");
	//нс_ОПД(дз, "ПланВидовХарактеристик", ВидыПолей.ТЧ, "Редактирование");
	//нс_ОПД(дз, "ПланВидовХарактеристик", ВидыПолей.РТЧ, "Просмотр");
	//нс_ОПД(дз, "ПланВидовХарактеристик", ВидыПолей.РТЧ, "Редактирование");
//-
	нс_ОПД(дз, "ПланСчетов", ВидыПолей.О, "Чтение");
	нс_ОПД(дз, "ПланСчетов", ВидыПолей.О, "Добавление");
	нс_ОПД(дз, "ПланСчетов", ВидыПолей.О, "Изменение");
	нс_ОПД(дз, "ПланСчетов", ВидыПолей.О, "Удаление");
	нс_ОПД(дз, "ПланСчетов", ВидыПолей.О, "Просмотр");
	нс_ОПД(дз, "ПланСчетов", ВидыПолей.О, "ИнтерактивноеДобавление");
	нс_ОПД(дз, "ПланСчетов", ВидыПолей.О, "Редактирование");
	нс_ОПД(дз, "ПланСчетов", ВидыПолей.О, "ИнтерактивноеУдаление");
	нс_ОПД(дз, "ПланСчетов", ВидыПолей.О, "ИнтерактивнаяПометкаУдаления");
	нс_ОПД(дз, "ПланСчетов", ВидыПолей.О, "ИнтерактивноеСнятиеПометкиУдаления");
	нс_ОПД(дз, "ПланСчетов", ВидыПолей.О, "ИнтерактивноеУдалениеПомеченных");
	нс_ОПД(дз, "ПланСчетов", ВидыПолей.О, "ВводПоСтроке");
	//нс_ОПД(дз, "ПланСчетов", ВидыПолей.О, "ИнтерактивноеУдалениеПредопределенныхДанных");
	//нс_ОПД(дз, "ПланСчетов", ВидыПолей.О, "ИнтерактивнаяПометкаУдаленияПредопределенныхДанных");
	//нс_ОПД(дз, "ПланСчетов", ВидыПолей.О, "ИнтерактивноеСнятиеПометкиУдаленияПредопределенныхДанных");
	//нс_ОПД(дз, "ПланСчетов", ВидыПолей.О, "ИнтерактивноеУдалениеПомеченныхПредопределенныхДанных");
	//нс_ОПД(дз, "ПланСчетов", ВидыПолей.К, "Просмотр");
	//нс_ОПД(дз, "ПланСчетов", ВидыПолей.СР, "Просмотр");
	//нс_ОПД(дз, "ПланСчетов", ВидыПолей.СР, "Редактирование");
	//нс_ОПД(дз, "ПланСчетов", ВидыПолей.СТЧ, "Просмотр");
	//нс_ОПД(дз, "ПланСчетов", ВидыПолей.СТЧ, "Редактирование");
	//нс_ОПД(дз, "ПланСчетов", ВидыПолей.Р, "Просмотр");
	//нс_ОПД(дз, "ПланСчетов", ВидыПолей.Р, "Редактирование");
	//нс_ОПД(дз, "ПланСчетов", ВидыПолей.ПУ, "Просмотр");
	//нс_ОПД(дз, "ПланСчетов", ВидыПолей.ПУ, "Редактирование");	
	//нс_ОПД(дз, "ПланСчетов", ВидыПолей.ПУС, "Просмотр");
	//нс_ОПД(дз, "ПланСчетов", ВидыПолей.ПУС, "Редактирование");		
	//нс_ОПД(дз, "ПланСчетов", ВидыПолей.ТЧ, "Просмотр");
	//нс_ОПД(дз, "ПланСчетов", ВидыПолей.ТЧ, "Редактирование");
	//нс_ОПД(дз, "ПланСчетов", ВидыПолей.РТЧ, "Просмотр");
	//нс_ОПД(дз, "ПланСчетов", ВидыПолей.РТЧ, "Редактирование");
//-
	нс_ОПД(дз, "ПланВидовРасчета", ВидыПолей.О, "Чтение");
	нс_ОПД(дз, "ПланВидовРасчета", ВидыПолей.О, "Добавление");
	нс_ОПД(дз, "ПланВидовРасчета", ВидыПолей.О, "Изменение");
	нс_ОПД(дз, "ПланВидовРасчета", ВидыПолей.О, "Удаление");
	нс_ОПД(дз, "ПланВидовРасчета", ВидыПолей.О, "Просмотр");
	нс_ОПД(дз, "ПланВидовРасчета", ВидыПолей.О, "ИнтерактивноеДобавление");
	нс_ОПД(дз, "ПланВидовРасчета", ВидыПолей.О, "Редактирование");
	нс_ОПД(дз, "ПланВидовРасчета", ВидыПолей.О, "ИнтерактивноеУдаление");
	нс_ОПД(дз, "ПланВидовРасчета", ВидыПолей.О, "ИнтерактивнаяПометкаУдаления");
	нс_ОПД(дз, "ПланВидовРасчета", ВидыПолей.О, "ИнтерактивноеСнятиеПометкиУдаления");
	нс_ОПД(дз, "ПланВидовРасчета", ВидыПолей.О, "ИнтерактивноеУдалениеПомеченных");
	нс_ОПД(дз, "ПланВидовРасчета", ВидыПолей.О, "ВводПоСтроке");
	//нс_ОПД(дз, "ПланВидовРасчета", ВидыПолей.О, "ИнтерактивноеУдалениеПредопределенныхДанных");
	//нс_ОПД(дз, "ПланВидовРасчета", ВидыПолей.О, "ИнтерактивнаяПометкаУдаленияПредопределенныхДанных");
	//нс_ОПД(дз, "ПланВидовРасчета", ВидыПолей.О, "ИнтерактивноеСнятиеПометкиУдаленияПредопределенныхДанных");
	//нс_ОПД(дз, "ПланВидовРасчета", ВидыПолей.О, "ИнтерактивноеУдалениеПомеченныхПредопределенныхДанных");
	//нс_ОПД(дз, "ПланВидовРасчета", ВидыПолей.К, "Просмотр");
	//нс_ОПД(дз, "ПланВидовРасчета", ВидыПолей.СР, "Просмотр");
	//нс_ОПД(дз, "ПланВидовРасчета", ВидыПолей.СР, "Редактирование");
	//нс_ОПД(дз, "ПланВидовРасчета", ВидыПолей.СТЧ, "Просмотр");
	//нс_ОПД(дз, "ПланВидовРасчета", ВидыПолей.СТЧ, "Редактирование");
	//нс_ОПД(дз, "ПланВидовРасчета", ВидыПолей.Р, "Просмотр");
	//нс_ОПД(дз, "ПланВидовРасчета", ВидыПолей.Р, "Редактирование");
	//нс_ОПД(дз, "ПланВидовРасчета", ВидыПолей.ТЧ, "Просмотр");
	//нс_ОПД(дз, "ПланВидовРасчета", ВидыПолей.ТЧ, "Редактирование");
	//нс_ОПД(дз, "ПланВидовРасчета", ВидыПолей.РТЧ, "Просмотр");
	//нс_ОПД(дз, "ПланВидовРасчета", ВидыПолей.РТЧ, "Редактирование");
//-
	нс_ОПД(дз, "РегистрСведений", ВидыПолей.О, "Чтение");
	нс_ОПД(дз, "РегистрСведений", ВидыПолей.О, "Изменение");
	нс_ОПД(дз, "РегистрСведений", ВидыПолей.О, "Просмотр");
	нс_ОПД(дз, "РегистрСведений", ВидыПолей.О, "Редактирование");
	нс_ОПД(дз, "РегистрСведений", ВидыПолей.О, "УправлениеИтогами");
	//нс_ОПД(дз, "РегистрСведений", ВидыПолей.К, "Просмотр");
	//нс_ОПД(дз, "РегистрСведений", ВидыПолей.СР, "Просмотр");
	//нс_ОПД(дз, "РегистрСведений", ВидыПолей.СР, "Редактирование");
	//нс_ОПД(дз, "РегистрСведений", ВидыПолей.И, "Просмотр");
	//нс_ОПД(дз, "РегистрСведений", ВидыПолей.И, "Редактирование");
	//нс_ОПД(дз, "РегистрСведений", ВидыПолей.РС, "Просмотр");
	//нс_ОПД(дз, "РегистрСведений", ВидыПолей.РС, "Редактирование");
	//нс_ОПД(дз, "РегистрСведений", ВидыПолей.Р, "Просмотр");
	//нс_ОПД(дз, "РегистрСведений", ВидыПолей.Р, "Редактирование");
//-
	нс_ОПД(дз, "РегистрНакопления", ВидыПолей.О, "Чтение");
	нс_ОПД(дз, "РегистрНакопления", ВидыПолей.О, "Изменение");
	нс_ОПД(дз, "РегистрНакопления", ВидыПолей.О, "Просмотр");
	нс_ОПД(дз, "РегистрНакопления", ВидыПолей.О, "Редактирование");
	нс_ОПД(дз, "РегистрНакопления", ВидыПолей.О, "УправлениеИтогами");
	//нс_ОПД(дз, "РегистрНакопления", ВидыПолей.К, "Просмотр");
	//нс_ОПД(дз, "РегистрНакопления", ВидыПолей.СР, "Просмотр");
	//нс_ОПД(дз, "РегистрНакопления", ВидыПолей.СР, "Редактирование");
	//нс_ОПД(дз, "РегистрНакопления", ВидыПолей.И, "Просмотр");
	//нс_ОПД(дз, "РегистрНакопления", ВидыПолей.И, "Редактирование");
	//нс_ОПД(дз, "РегистрНакопления", ВидыПолей.РС, "Просмотр");
	//нс_ОПД(дз, "РегистрНакопления", ВидыПолей.РС, "Редактирование");
	//нс_ОПД(дз, "РегистрНакопления", ВидыПолей.Р, "Просмотр");
	//нс_ОПД(дз, "РегистрНакопления", ВидыПолей.Р, "Редактирование");
//-
	нс_ОПД(дз, "РегистрБухгалтерии", ВидыПолей.О, "Чтение");
	нс_ОПД(дз, "РегистрБухгалтерии", ВидыПолей.О, "Изменение");
	нс_ОПД(дз, "РегистрБухгалтерии", ВидыПолей.О, "Просмотр");
	нс_ОПД(дз, "РегистрБухгалтерии", ВидыПолей.О, "Редактирование");
	нс_ОПД(дз, "РегистрБухгалтерии", ВидыПолей.О, "УправлениеИтогами");
	//нс_ОПД(дз, "РегистрБухгалтерии", ВидыПолей.К, "Просмотр");
	//нс_ОПД(дз, "РегистрБухгалтерии", ВидыПолей.СР, "Просмотр");
	//нс_ОПД(дз, "РегистрБухгалтерии", ВидыПолей.СР, "Редактирование");
	//нс_ОПД(дз, "РегистрБухгалтерии", ВидыПолей.И, "Просмотр");
	//нс_ОПД(дз, "РегистрБухгалтерии", ВидыПолей.И, "Редактирование");
	//нс_ОПД(дз, "РегистрБухгалтерии", ВидыПолей.РС, "Просмотр");
	//нс_ОПД(дз, "РегистрБухгалтерии", ВидыПолей.РС, "Редактирование");
	//нс_ОПД(дз, "РегистрБухгалтерии", ВидыПолей.Р, "Просмотр");
	//нс_ОПД(дз, "РегистрБухгалтерии", ВидыПолей.Р, "Редактирование");
//-
	нс_ОПД(дз, "РегистрРасчета", ВидыПолей.О, "Чтение");
	нс_ОПД(дз, "РегистрРасчета", ВидыПолей.О, "Изменение");
	нс_ОПД(дз, "РегистрРасчета", ВидыПолей.О, "Просмотр");
	нс_ОПД(дз, "РегистрРасчета", ВидыПолей.О, "Редактирование");
	//нс_ОПД(дз, "РегистрРасчета", ВидыПолей.К, "Просмотр");
	//нс_ОПД(дз, "РегистрРасчета", ВидыПолей.СР, "Просмотр");
	//нс_ОПД(дз, "РегистрРасчета", ВидыПолей.СР, "Редактирование");
	//нс_ОПД(дз, "РегистрРасчета", ВидыПолей.И, "Просмотр");
	//нс_ОПД(дз, "РегистрРасчета", ВидыПолей.И, "Редактирование");
	//нс_ОПД(дз, "РегистрРасчета", ВидыПолей.РС, "Просмотр");
	//нс_ОПД(дз, "РегистрРасчета", ВидыПолей.РС, "Редактирование");
	//нс_ОПД(дз, "РегистрРасчета", ВидыПолей.Р, "Просмотр");
	//нс_ОПД(дз, "РегистрРасчета", ВидыПолей.Р, "Редактирование");
	//нс_ОПД(дз, "РегистрРасчета", ВидыПолей.ПРР, "Просмотр");
	//нс_ОПД(дз, "РегистрРасчета", ВидыПолей.ПРР, "Редактирование");
//-
	нс_ОПД(дз, "БизнесПроцесс", ВидыПолей.О, "Чтение");
	нс_ОПД(дз, "БизнесПроцесс", ВидыПолей.О, "Добавление");
	нс_ОПД(дз, "БизнесПроцесс", ВидыПолей.О, "Изменение");
	нс_ОПД(дз, "БизнесПроцесс", ВидыПолей.О, "Удаление");
	нс_ОПД(дз, "БизнесПроцесс", ВидыПолей.О, "Просмотр");
	нс_ОПД(дз, "БизнесПроцесс", ВидыПолей.О, "ИнтерактивноеДобавление");
	нс_ОПД(дз, "БизнесПроцесс", ВидыПолей.О, "Редактирование");
	нс_ОПД(дз, "БизнесПроцесс", ВидыПолей.О, "ИнтерактивноеУдаление");
	нс_ОПД(дз, "БизнесПроцесс", ВидыПолей.О, "ИнтерактивнаяПометкаУдаления");
	нс_ОПД(дз, "БизнесПроцесс", ВидыПолей.О, "ИнтерактивноеСнятиеПометкиУдаления");
	нс_ОПД(дз, "БизнесПроцесс", ВидыПолей.О, "ИнтерактивноеУдалениеПомеченных");
	нс_ОПД(дз, "БизнесПроцесс", ВидыПолей.О, "ВводПоСтроке");
	нс_ОПД(дз, "БизнесПроцесс", ВидыПолей.О, "ИнтерактивнаяАктивация");
	нс_ОПД(дз, "БизнесПроцесс", ВидыПолей.О, "Старт");
	нс_ОПД(дз, "БизнесПроцесс", ВидыПолей.О, "ИнтерактивныйСтарт");
	//нс_ОПД(дз, "БизнесПроцесс", ВидыПолей.К, "Просмотр");
	//нс_ОПД(дз, "БизнесПроцесс", ВидыПолей.СР, "Просмотр");
	//нс_ОПД(дз, "БизнесПроцесс", ВидыПолей.СР, "Редактирование");
	//нс_ОПД(дз, "БизнесПроцесс", ВидыПолей.Р, "Просмотр");
	//нс_ОПД(дз, "БизнесПроцесс", ВидыПолей.Р, "Редактирование");
	//нс_ОПД(дз, "БизнесПроцесс", ВидыПолей.ТЧ, "Просмотр");
	//нс_ОПД(дз, "БизнесПроцесс", ВидыПолей.ТЧ, "Редактирование");
	//нс_ОПД(дз, "БизнесПроцесс", ВидыПолей.РТЧ, "Просмотр");
	//нс_ОПД(дз, "БизнесПроцесс", ВидыПолей.РТЧ, "Редактирование");
	
//-
	нс_ОПД(дз, "Задача", ВидыПолей.О, "Чтение");
	нс_ОПД(дз, "Задача", ВидыПолей.О, "Добавление");
	нс_ОПД(дз, "Задача", ВидыПолей.О, "Изменение");
	нс_ОПД(дз, "Задача", ВидыПолей.О, "Удаление");
	нс_ОПД(дз, "Задача", ВидыПолей.О, "Просмотр");
	нс_ОПД(дз, "Задача", ВидыПолей.О, "ИнтерактивноеДобавление");
	нс_ОПД(дз, "Задача", ВидыПолей.О, "Редактирование");
	нс_ОПД(дз, "Задача", ВидыПолей.О, "ИнтерактивноеУдаление");
	нс_ОПД(дз, "Задача", ВидыПолей.О, "ИнтерактивнаяПометкаУдаления");
	нс_ОПД(дз, "Задача", ВидыПолей.О, "ИнтерактивноеСнятиеПометкиУдаления");
	нс_ОПД(дз, "Задача", ВидыПолей.О, "ИнтерактивноеУдалениеПомеченных");
	нс_ОПД(дз, "Задача", ВидыПолей.О, "ВводПоСтроке");
	нс_ОПД(дз, "Задача", ВидыПолей.О, "ИнтерактивнаяАктивация");
	нс_ОПД(дз, "Задача", ВидыПолей.О, "Выполнение");
	нс_ОПД(дз, "Задача", ВидыПолей.О, "ИнтерактивноеВыполнение");
	//нс_ОПД(дз, "Задача", ВидыПолей.К, "Просмотр");
	//нс_ОПД(дз, "Задача", ВидыПолей.СР, "Просмотр");
	//нс_ОПД(дз, "Задача", ВидыПолей.СР, "Редактирование");
	//нс_ОПД(дз, "Задача", ВидыПолей.Р, "Просмотр");
	//нс_ОПД(дз, "Задача", ВидыПолей.Р, "Редактирование");
	//нс_ОПД(дз, "Задача", ВидыПолей.ТЧ, "Просмотр");
	//нс_ОПД(дз, "Задача", ВидыПолей.ТЧ, "Редактирование");
	//нс_ОПД(дз, "Задача", ВидыПолей.РТЧ, "Просмотр");
	//нс_ОПД(дз, "Задача", ВидыПолей.РТЧ, "Редактирование");	
//-	
	//нс_ОПД(дз, "ВнешнийИсточникДанных", ВидыПолей.О, "Использование");
	//нс_ОПД(дз, "ВнешнийИсточникДанных", ВидыПолей.О, "Администрирование");
	//нс_ОПД(дз, "ВнешнийИсточникДанных", ВидыПолей.О, "ИзменениеСтандартнойАутентификацииТекущегоПользователя");
	//нс_ОПД(дз, "ВнешнийИсточникДанных", ВидыПолей.О, "ИзменениеСтандартнойАутентификацииСеанса");
	//нс_ОПД(дз, "ВнешнийИсточникДанных", ВидыПолей.О, "ИзменениеАутентификацииОперационнойСистемыСеанса");
	//нс_ОПД(дз, "ВнешнийИсточникДанных", "Таблица", "Чтение");
	//нс_ОПД(дз, "ВнешнийИсточникДанных", "Таблица", "Добавление");
	//нс_ОПД(дз, "ВнешнийИсточникДанных", "Таблица", "Изменение");
	//нс_ОПД(дз, "ВнешнийИсточникДанных", "Таблица", "Удаление");
	//нс_ОПД(дз, "ВнешнийИсточникДанных", "Таблица", "Просмотр");
	//нс_ОПД(дз, "ВнешнийИсточникДанных", "Таблица", "ИнтерактивноеДобавление");
	//нс_ОПД(дз, "ВнешнийИсточникДанных", "Таблица", "Редактирование");
	//нс_ОПД(дз, "ВнешнийИсточникДанных", "Таблица", "ИнтерактивноеУдаление");
	//нс_ОПД(дз, "ВнешнийИсточникДанных", "Таблица", "ВводПоСтроке");
	//нс_ОПД(дз, "ВнешнийИсточникДанных", "ПолеТаблицы", "Просмотр");
	//нс_ОПД(дз, "ВнешнийИсточникДанных", "ПолеТаблицы", "Редактирование");
	//нс_ОПД(дз, "ВнешнийИсточникДанных", "КомандаТаблицы", "Просмотр");
	//нс_ОПД(дз, "ВнешнийИсточникДанных", "Куб", "Чтение");
	//нс_ОПД(дз, "ВнешнийИсточникДанных", "Куб", "Просмотр");
	//нс_ОПД(дз, "ВнешнийИсточникДанных", "ТаблицаИзмеренияКуба", "Чтение");
	//нс_ОПД(дз, "ВнешнийИсточникДанных", "ТаблицаИзмеренияКуба", "Просмотр");
	//нс_ОПД(дз, "ВнешнийИсточникДанных", "ПолеТаблицыИзмеренияКуба", "Просмотр");
	//нс_ОПД(дз, "ВнешнийИсточникДанных", "ПолеТаблицыИзмеренияКуба", "Редактирование");
	//нс_ОПД(дз, "ВнешнийИсточникДанных", "КомандаТаблицыИзмеренияКуба", "Просмотр");
	//нс_ОПД(дз, "ВнешнийИсточникДанных", "ИзмерениеКуба", "Просмотр");
	//нс_ОПД(дз, "ВнешнийИсточникДанных", "РесурсКуба", "Просмотр");
	//нс_ОПД(дз, "ВнешнийИсточникДанных", "КомандаКуба", "Просмотр");
	//нс_ОПД(дз, "ВнешнийИсточникДанных", "Функция", "Использование");		
	//нс_ОПД(дз, "ВнешнийИсточникДанных", "Функция", "Просмотр");	

	Возврат дз;
	
КонецФункции

//==================================================================================== Уничкин_РА [03.06.2015 17:58:05]=
Процедура зт_РекурсивноеДобавлениеПодсистем(тз, МетаКоллекция)
	
	Для каждого Элем Из МетаКоллекция Цикл
		
		нс_ПМТ(тз
			, Элем
			, "Подсистема"
			, Элем.ПолноеИмя()
			, Элем.Имя
			, 1
			, Элем.Синоним);
			
		зт_РекурсивноеДобавлениеПодсистем(тз, Элем.Подсистемы);						
	КонецЦикла; 	
	
КонецПроцедуры
 
//==================================================================================== Уничкин_РА [20.03.2015 15:42:08]=
Функция зт_ПроверяемыеМетаТаблицы()
	
	тз = свт_ПроверяемыеТаблицы_ТаблицаЗначений();

	тзСписокМетаданных = зт_СписокМетаданных_НаСервере();
	
	Если ВариантАнализа = "Объект" Тогда
		
		поз = Найти(АнализируемыйОбъект, ".");
		Если поз > 0 Тогда
			Вид = лев(АнализируемыйОбъект, поз - 1);
		Иначе
			Вид = АнализируемыйОбъект;
		КонецЕсли; 

		МетаТаблица =  Метаданные.НайтиПоПолномуИмени(АнализируемыйОбъект);
		стр_тзСписокМета = тзСписокМетаданных.Найти(Вид, "ИмяТаблицыЕдЧ");
		
		нс_ПМТ(тз
			, МетаТаблица
			, Вид
			, АнализируемыйОбъект
			, МетаТаблица.Имя
			, стр_тзСписокМета.Порядок
			, МетаТаблица.Синоним);
	Иначе		
		
	
		Для каждого стр_тз Из тзСписокМетаданных Цикл			
			Если стр_тз.ИмяТаблицыЕдЧ = "Конфигурация" Тогда
				нс_ПМТ(тз
					, Метаданные
					, "Конфигурация"
					, "Конфигурация"
					, "Конфигурация"
					, 0
					, "Конфигурация: " + Метаданные.Синоним);
				Продолжить;	
				
			ИначеЕсли стр_тз.ИмяТаблицыЕдЧ = "Роль" Тогда
				Продолжить;
				
			КонецЕсли; 
						
			МетаКоллекция = Метаданные[стр_тз.ИмяТаблицыМнЧ];
			
			Если стр_тз.ИмяТаблицыЕдЧ = "Подсистема" Тогда
				зт_РекурсивноеДобавлениеПодсистем(тз, МетаКоллекция);
				
			Иначе
				Для каждого МетаТаблица Из МетаКоллекция Цикл
					нс_ПМТ(тз
						, МетаТаблица
						, стр_тз.ИмяТаблицыЕдЧ
						, стр_тз.ИмяТаблицыЕдЧ + "." + МетаТаблица.Имя
						, МетаТаблица.Имя
						, стр_тз.Порядок
						, МетаТаблица.Синоним);
				КонецЦикла; 
			КонецЕсли; 
			
		
		КонецЦикла; 
	КонецЕсли; 
	
	Возврат тз; 	
	
КонецФункции

//==================================================================================== Уничкин_РА [16.01.2015 19:11:07]=
Функция зт_ПроверяемыеРоли()
	
	тз = свт_ПроверяемыеРоли_ТаблицаЗначений();

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПрофилиГруппДоступаРоли.Роль
		|ПОМЕСТИТЬ ВТ_РолиПользователя
		|ИЗ
		|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа.Роли КАК ПрофилиГруппДоступаРоли
		|		ПО ГруппыДоступаПользователи.Ссылка.Профиль = ПрофилиГруппДоступаРоли.Ссылка
		|			И (&ВариантАнализа = ""Пользователь"")
		|ГДЕ
		|	ГруппыДоступаПользователи.Пользователь = &АнализируемыйОбъект
		|	И &ВариантАнализа = ""Пользователь""
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИдентификаторыОбъектовМетаданных.Ссылка,
		|	ИдентификаторыОбъектовМетаданных.ПолноеИмя
		|ИЗ
		|	Справочник.ИдентификаторыОбъектовМетаданных КАК ИдентификаторыОбъектовМетаданных
		|ГДЕ
		|	ИдентификаторыОбъектовМетаданных.Родитель.Имя = ""Роли""
		|	И ВЫБОР
		|			КОГДА &ВариантАнализа = ""Роль""
		|				ТОГДА ИдентификаторыОбъектовМетаданных.Ссылка.ПолноеИмя = &АнализируемыйОбъект
		|			КОГДА &ВариантАнализа = ""Профиль""
		|				ТОГДА ИдентификаторыОбъектовМетаданных.Ссылка В
		|						(ВЫБРАТЬ
		|							ПрофилиГруппДоступаРоли.Роль
		|						ИЗ
		|							Справочник.ПрофилиГруппДоступа.Роли КАК ПрофилиГруппДоступаРоли
		|						ГДЕ
		|							ПрофилиГруппДоступаРоли.Ссылка = &АнализируемыйОбъект)
		|			КОГДА &ВариантАнализа = ""Пользователь""
		|				ТОГДА ИдентификаторыОбъектовМетаданных.Ссылка В
		|						(ВЫБРАТЬ
		|							ВТ_РолиПользователя.Роль
		|						ИЗ
		|							ВТ_РолиПользователя КАК ВТ_РолиПользователя)
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ";
		
		
	Запрос.УстановитьПараметр("ВариантАнализа", ВариантАнализа);	
	Запрос.УстановитьПараметр("АнализируемыйОбъект", АнализируемыйОбъект);
			
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();	
	Пока Выборка.Следующий() Цикл
		
		НовСтр = тз.Добавить();
		НовСтр.РольИОМ = Выборка.Ссылка;
		
		МетаПолноеИмя = Выборка.ПолноеИмя;
		НовСтр.МетаРоль = Метаданные.НайтиПоПолномуИмени(МетаПолноеИмя);
		
	КонецЦикла;
	
	Возврат тз; 
	
КонецФункции

//==================================================================================== Уничкин_РА [29.05.2015 17:00:27]=
Функция зт_ИерархияПравДоступа()
	
	тзПрава = зт_ОписаниеПравДоступа();
	
	дз = Новый  ДеревоЗначений;
	дз.Колонки.Добавить("Право");
	дз.Колонки.Добавить("КоличествоСвязанных");
	дз.Колонки.Добавить("Уровень");
	
	Право = "Добавление";
	нс_ИПД(дз, Право, "Чтение");
	
	Право = "Изменение";
	нс_ИПД(дз, Право, "Чтение");

	Право = "Удаление";
	нс_ИПД(дз, Право, "Чтение");
	
	Право = "Просмотр";
	нс_ИПД(дз, Право, "Чтение");

	Право = "ИнтерактивноеДобавление";
	нс_ИПД(дз, Право, "Чтение");
	нс_ИПД(дз, Право, "Добавление");
	нс_ИПД(дз, Право, "Изменение");
	нс_ИПД(дз, Право, "Просмотр");		
	нс_ИПД(дз, Право, "Редактирование");

	Право = "Редактирование";
	нс_ИПД(дз, Право, "Чтение");
	нс_ИПД(дз, Право, "Изменение");
	нс_ИПД(дз, Право, "Просмотр");		

	Право = "ИнтерактивноеУдаление";
	нс_ИПД(дз, Право, "Чтение");
	нс_ИПД(дз, Право, "Изменение");
	нс_ИПД(дз, Право, "Удаление");
	нс_ИПД(дз, Право, "Просмотр");		
	нс_ИПД(дз, Право, "Редактирование");
	
	Право = "ИнтерактивнаяПометкаУдаления";
	нс_ИПД(дз, Право, "Чтение");
	нс_ИПД(дз, Право, "Изменение");
	нс_ИПД(дз, Право, "Просмотр");		
	нс_ИПД(дз, Право, "Редактирование");
	
	Право = "ИнтерактивноеСнятиеПометкиУдаления";
	нс_ИПД(дз, Право, "Чтение");
	нс_ИПД(дз, Право, "Изменение");
	нс_ИПД(дз, Право, "Просмотр");		
	нс_ИПД(дз, Право, "Редактирование");
	
	Право = "ИнтерактивноеУдалениеПомеченных";
	нс_ИПД(дз, Право, "Чтение");
	нс_ИПД(дз, Право, "Изменение");
	нс_ИПД(дз, Право, "Удаление");
	нс_ИПД(дз, Право, "Просмотр");		
	нс_ИПД(дз, Право, "Редактирование");
	
	Право = "ВводПоСтроке";
	нс_ИПД(дз, Право, "Чтение");
	нс_ИПД(дз, Право, "Просмотр");
	
	Для каждого стр_дз Из дз.Строки Цикл
		стр_дз.КоличествоСвязанных = стр_дз.Строки.Количество();
	КонецЦикла; 
	
	дз.Строки.Сортировать("КоличествоСвязанных УБЫВ");
	
	Возврат дз;
	
КонецФункции

//==================================================================================== Уничкин_РА [29.05.2015 18:54:45]=
Функция ДУ(Код, П = Неопределено, П1 = Неопределено, П2 = Неопределено)
	ПЕРЕМ Р;
	Выполнить(Код);	
	Возврат Р;
КонецФункции

//==================================================================================== Уничкин_РА [05.03.2015 22:44:58]=
Функция зт_ПредварительныйНаборДанных(СтруктураПараметров)  Экспорт
	
	ВариантАнализа = СтруктураПараметров.ВариантАнализа;
	АнализируемыйОбъект = СтруктураПараметров.АнализируемыйОбъект;
	СписокЗначенийОтборПравДоступа = СтруктураПараметров.СписокЗначенийОтборПравДоступа;
	ОтключитьАнализРолей = СтруктураПараметров.ОтключитьАнализРолей;
	
	//Чтобы сохранять флаг на форме при отключении видимости, перепроверю значение здесь:
	ОтключитьАнализРолей = ВариантАнализа = "Пользователь" И ОтключитьАнализРолей;
	
	тз = свт_ПредварительныйНаборДанных_ТаблицаЗначений();

	Если ОтключитьАнализРолей Тогда
		идПользователя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(АнализируемыйОбъект, "ИдентификаторПользователяИБ");
		АнализируемыйПользователь = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(идПользователя);
	Иначе
		тзПроверяемыеРоли = зт_ПроверяемыеРоли();	
	КонецЕсли; 
	
	пп_ВидыПолей = пп_ВидыПроверяемыхПолей();
	
	// Учитываю отбор по правам доступа
	МассивПравДоступа = Новый Массив;
	МассивИсключаемыхПравДоступа = Новый Массив;
	Для каждого Элем Из СписокЗначенийОтборПравДоступа Цикл
		Если Элем.Пометка Тогда
			МассивПравДоступа.Добавить(Элем.Значение);	
		Иначе
			МассивИсключаемыхПравДоступа.Добавить(Элем.Значение);
		КонецЕсли; 			
	КонецЦикла; 
		
	дзПроверяемыеТаблицыПоПравамДоступа = зт_ПроверяемыеТаблицыПоПравамДоступа();
	
	Если МассивПравДоступа.Количество() <> СписокЗначенийОтборПравДоступа.Количество() Тогда
		Поиск = Новый Структура("ПравоДоступа");
		Для каждого ИсключаемоеПравоДоступа Из МассивИсключаемыхПравДоступа Цикл
			Поиск.ПравоДоступа =  ИсключаемоеПравоДоступа;
			МассивСтрокДерева = дзПроверяемыеТаблицыПоПравамДоступа.Строки.НайтиСтроки(Поиск, Истина);	
			Для каждого стр_дз Из МассивСтрокДерева Цикл
				РодительСтроки = стр_дз.Родитель;
				РодительСтроки.Строки.Удалить(стр_дз);
			КонецЦикла; 
		КонецЦикла; 
	КонецЕсли; 
	
	дзПроверяемыеТаблицыПоПравамДоступа.Колонки.Добавить("СтрокаСортировки", Новый ОписаниеТипов("Число"));
	дзИерархияПрав = зт_ИерархияПравДоступа();	
	// Пересортировка проверяемых таблиц, согласно иерархии прав:
	ПоискПравДоступа = Новый Структура("ПравоДоступа");
	Для каждого стр_ур_0 Из дзИерархияПрав.Строки Цикл
		ПоискПравДоступа.ПравоДоступа = стр_ур_0.Право;
		МассивСтрок = дзПроверяемыеТаблицыПоПравамДоступа.Строки.НайтиСтроки(ПоискПравДоступа, Истина);
		Для каждого стр_дз Из МассивСтрок Цикл
			стр_дз.СтрокаСортировки = стр_ур_0.КоличествоСвязанных;
		КонецЦикла; 
	КонецЦикла; 
	дзПроверяемыеТаблицыПоПравамДоступа.Строки.Сортировать("СтрокаСортировки УБЫВ", Истина);
	
	УстановитьПривилегированныйРежим(Истина);
	
	//
	//ПоискПравДоступа = Новый Структура("Право");

	//МассивКэшаИсключений = Новый Массив;
	
	//Старт = ТекущаяДата();
	
	Для каждого стр_ур0 Из дзПроверяемыеТаблицыПоПравамДоступа.Строки Цикл
		
		МетаТаблица = стр_ур0.МетаТаблица;
		
		Для каждого стр_ур1 Из стр_ур0.Строки Цикл

			Для каждого стр_ур2 Из стр_ур1.Строки Цикл
				
				Право = стр_ур2.ПравоДоступа;
			
				Если ОтключитьАнализРолей Тогда		
					
					//Если такое право в кеше уже есть (добавлялось от связанных) - проверки не происходит:
					//ПоисковыйИндексКеша = "_" + стр_ур1.ПолноеИмя + "_" + Право;
					//Если МассивКэшаИсключений.Найти(ПоисковыйИндексКеша) <> Неопределено Тогда
					//	Продолжить;						
					//КонецЕсли; 
											
					Если ПравоДоступа(Право, МетаТаблица, АнализируемыйПользователь) Тогда
						нс_НД(тз
							, стр_ур1.ПредставлениеОбъекта
							, стр_ур1.ПорядокОбъекта 
							, стр_ур1.Вид
							, стр_ур1.Имя
							, стр_ур1.ПолноеИмя
							, пп_ВидыПолей.О
							, Справочники.ИдентификаторыОбъектовМетаданных.ПустаяСсылка()
							, Право);	
							
						//стр_СвязанныеПрава = дзИерархияПрав.Строки.Найти(Право, "Право");							
						//
						//Если стр_СвязанныеПрава <> Неопределено Тогда
						//	
						//	Для каждого стр_сп_ур1 Из стр_СвязанныеПрава.Строки Цикл
						//		нс_НД(тз
						//			, стр_ур1.ПредставлениеОбъекта
						//			, стр_ур1.ПорядокОбъекта 
						//			, стр_ур1.Вид
						//			, стр_ур1.Имя
						//			, стр_ур1.ПолноеИмя
						//			, пп_ВидыПолей.О
						//			, Справочники.ИдентификаторыОбъектовМетаданных.ПустаяСсылка()
						//			, стр_сп_ур1.Право);		
						//			
						//		ПоисковыйИндексКеша = "_" + стр_ур1.ПолноеИмя + "_" + стр_сп_ур1.Право;
						//		МассивКэшаИсключений.Добавить(ПоисковыйИндексКеша);	
						//	КонецЦикла; 
						//	
						//КонецЕсли; 
					//Иначе
					//	ПоискПравДоступа.Право = Право;
					//	МассивСвязанных = дзИерархияПрав.Строки.НайтиСтроки(ПоискПравДоступа, Истина);
					//	Для каждого стр_ИП Из МассивСвязанных Цикл
					//		Если стр_ИП.Уровень = 1 Тогда
					//			ПоисковыйИндексКеша = "_" + стр_ур1.ПолноеИмя + "_" + стр_ип.Родитель.Право;
					//			МассивКэшаИсключений.Добавить(ПоисковыйИндексКеша);									
					//		КонецЕсли; 
					//	КонецЦикла; 
					КонецЕсли;
				Иначе
					Для каждого ПроверяемаяРоль Из тзПроверяемыеРоли Цикл
						
						МетаРоль = ПроверяемаяРоль.МетаРоль;
						
						//ПоисковыйИндексКеша = "_" + стр_ур1.ПолноеИмя + "_" + МетаРоль.Имя + "_" + Право;
						//Если МассивКэшаИсключений.Найти(ПоисковыйИндексКеша) <> Неопределено Тогда
						//	Продолжить;						
						//КонецЕсли; 

						Если ПравоДоступа(Право, МетаТаблица, МетаРоль) Тогда
							нс_НД(тз
								, стр_ур1.ПредставлениеОбъекта
								, стр_ур1.ПорядокОбъекта 
								, стр_ур1.Вид
								, стр_ур1.Имя
								, стр_ур1.ПолноеИмя
								, пп_ВидыПолей.О
								, ПроверяемаяРоль.РольИОМ
								, Право);	
								
							//стр_СвязанныеПрава = дзИерархияПрав.Строки.Найти(Право, "Право");							
							//
							//Если стр_СвязанныеПрава <> Неопределено Тогда
							//	
							//	Для каждого стр_сп_ур1 Из стр_СвязанныеПрава.Строки Цикл
							//		нс_НД(тз
							//			, стр_ур1.ПредставлениеОбъекта
							//			, стр_ур1.ПорядокОбъекта 
							//			, стр_ур1.Вид
							//			, стр_ур1.Имя
							//			, стр_ур1.ПолноеИмя
							//			, пп_ВидыПолей.О
							//			, Справочники.ИдентификаторыОбъектовМетаданных.ПустаяСсылка()
							//			, стр_сп_ур1.Право);		
							//			
							//		ПоисковыйИндексКеша = "_" + стр_ур1.ПолноеИмя + "_" + МетаРоль.Имя + "_" + стр_сп_ур1.Право;
							//		МассивКэшаИсключений.Добавить(ПоисковыйИндексКеша);	
							//	КонецЦикла; 
							//	
							//КонецЕсли; 
						//Иначе
						//	ПоискПравДоступа.Право = Право;
						//	МассивСвязанных = дзИерархияПрав.Строки.НайтиСтроки(ПоискПравДоступа, Истина);
						//	Для каждого стр_ИП Из МассивСвязанных Цикл
						//		Если стр_ИП.Уровень = 1 Тогда
						//			ПоисковыйИндексКеша = "_" + стр_ур1.ПолноеИмя + "_" + МетаРоль.Имя +"_" + стр_ип.Родитель.Право;
						//			МассивКэшаИсключений.Добавить(ПоисковыйИндексКеша);									
						//		КонецЕсли; 
						//	КонецЦикла; 
						КонецЕсли;
					КонецЦикла; 
				КонецЕсли; 				
			КонецЦикла; 
		КонецЦикла; 	
	КонецЦикла;	
	
	УстановитьПривилегированныйРежим(Ложь);
	
	//Финиш = ТекущаяДата();
	//
	//Рез =Финиш-Старт;
	//
	//Сообщить("Готово: " + Рез);
	
//Администрирование данных — данное право регулирует административные действия над конкретной областью данных. К этим действиям относятся:

//просмотр записей журнала регистрации и получение значений отбора без ограничений.
//установка часового пояса информационной базы (области данных) (вызов метода УстановитьЧасовойПоясИнформационнойБазы()).
//создание начального образа подчиненного узла распределенной информационной базы (вызов метода СоздатьНачальныйОбраз()).
//обновление нумерации объектов (вызов метода ОбновитьНумерациюОбъектов()).
//выполнение методов объекта СтандартноеХранилищеНастроекМенеджер в тех случаях, если выполняется работа с настройками пользователя, отличными от текущего. 	
	
// Параметр "ОбъектМетаданных: " для функции право доступа	
// HTTPСервис
// WebСервис
// WSСсылка
// БизнесПроцесс
// ВнешнийИсточникДанных
// Графа
// ГруппаКоманд
// Документ
// ЖурналДокументов
// Задача
// ЗначениеПеречисления
// Измерение
// Интерфейс
// Команда
// Константа
// КритерийОтбора
// Макет
// Нумератор
// Обработка
// ОбщаяКартинка
// ОбщаяКоманда
// ОбщийМодуль
// ОбщийРеквизит
// ОперацияWebСервиса
// ОпределяемыйТип
// Отчет
// ПакетXDTO
// ПараметрWebСервиса
// ПараметрСеанса
// ПараметрФункциональныхОпций
// Перерасчет
// Перечисление
// ПланВидовРасчета
// ПланВидовХарактеристик
// ПланОбмена
// ПланСчетов
// ПодпискаНаСобытие
// Подсистема
// Поле
// Последовательность
// ПризнакУчетаПланаСчетов
// ПризнакУчетаСубконтоПланаСчетов
// РегистрБухгалтерии
// РегистрНакопления
// РегистрРасчета
// РегистрСведений
// РегламентноеЗадание
// Реквизит
// РеквизитАдресации
// Ресурс
// Роль
// Справочник
// Стиль
// Таблица
// ТаблицаИзмерения
// ТабличнаяЧасть
// Форма 
// ФункциональнаяОпция
// Функция
// ХранилищеНастроек
// ШаблонURLHTTPСервиса
// ЭлементСтиля
// Язык
//Куб
	
	Возврат тз;

КонецФункции

//==================================================================================== Уничкин_РА [15.01.2015 19:31:09]=
Функция зт_СписокМетаданных_НаСервере() Экспорт
	
	тз = свт_СписокМетаданных_ТаблицаЗначений();
	
	нс_К(тз, "Конфигурация"				, "Конфигурация");				// 0			
	нс_К(тз, "Подсистемы"				, "Подсистема");				// 1
	нс_К(тз, "ПараметрыСеанса"			, "ПараметрСеанса");			// 2
	нс_К(тз, "Роли"						, "Роль");						// 3
	нс_К(тз, "ПланыОбмена"				, "ПланОбмена");				// 4
	нс_К(тз, "Константы"				, "Константа");					// 5
	нс_К(тз, "Справочники"				, "Справочник");                // 6
	нс_К(тз, "Документы"				, "Документ");					// 7
	нс_К(тз, "ЖурналыДокументов"		, "ЖурналДокументов");			// 8
	нс_К(тз, "Отчеты"					, "Отчет");						// 9
	нс_К(тз, "Обработки"				, "Обработка");					// 10
	нс_К(тз, "ПланыВидовХарактеристик"	, "ПланВидовХарактеристик");	// 11
	нс_К(тз, "ПланыСчетов"				, "ПланСчетов");                // 12
	нс_К(тз, "ПланыВидовРасчета"		, "ПланВидовРасчета");          // 13
	нс_К(тз, "РегистрыСведений"			, "РегистрСведений");           // 14
	нс_К(тз, "РегистрыНакопления"		, "РегистрНакопления");         // 15
	нс_К(тз, "РегистрыБухгалтерии"		, "РегистрБухгалтерии");        // 16
	нс_К(тз, "РегистрыРасчета"			, "РегистрРасчета");            // 17
	нс_К(тз, "БизнесПроцессы"			, "БизнесПроцесс");             // 18
	нс_К(тз, "Задачи"					, "Задача");                    // 19
	
	Возврат тз;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ: структуры временных таблиц (свт)

//==================================================================================== Уничкин_РА [16.01.2015 19:11:38]=
Функция свт_ПроверяемыеТаблицы_ТаблицаЗначений()
	
	тз = Новый ТаблицаЗначений;
	тз.Колонки.Добавить("МетаТаблица");
	тз.Колонки.Добавить("Вид");
	тз.Колонки.Добавить("ПолноеИмя");
	тз.Колонки.Добавить("Имя");
	тз.Колонки.Добавить("ПорядокОбъекта");
	тз.Колонки.Добавить("ПредставлениеОбъекта");
	
	Возврат тз;
	
КонецФункции

//==================================================================================== Уничкин_РА [16.01.2015 19:11:38]=
Функция свт_ПроверяемыеРоли_ТаблицаЗначений()
	
	тз = Новый ТаблицаЗначений;
	тз.Колонки.Добавить("РольИОМ");
	тз.Колонки.Добавить("МетаРоль");
	
	Возврат тз;
	
КонецФункции
 
//==================================================================================== Уничкин_РА [09.01.2015 23:46:42]=
Функция свт_ОбъектыПравДоступа_ДеревоЗначений()
	
	дз = Новый ДеревоЗначений;
	дз.Колонки.Добавить("ВидТаблицы");	// 1 ур.
	дз.Колонки.Добавить("ВидПоля");		// 2 ур.
	дз.Колонки.Добавить("ПравоДоступа");// 3 ур.
	
	Возврат дз;
	
КонецФункции
 
//==================================================================================== Уничкин_РА [05.03.2015 19:36:53]=
Функция свт_ПраваДоступа_ТаблицаЗначений()
	тз = Новый ТаблицаЗначений;
	тз.Колонки.Добавить("Имя");
	тз.Колонки.Добавить("ИмяАнгл");
	тз.Колонки.Добавить("Синоним");	
	Возврат тз;
КонецФункции
 
//==================================================================================== Уничкин_РА [05.03.2015 22:45:50]=
Функция свт_ПредварительныйНаборДанных_ТаблицаЗначений()
	
	тз = Новый ТаблицаЗначений();
	тз.Колонки.Добавить("ПредставлениеОбъекта", Новый ОписаниеТипов("Строка"));
	тз.Колонки.Добавить("ПорядокОбъекта", Новый ОписаниеТипов("Число"));
	тз.Колонки.Добавить("Вид", Новый ОписаниеТипов("Строка"));	
	тз.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));	
	тз.Колонки.Добавить("ПолноеИмя", Новый ОписаниеТипов("Строка"));	
	тз.Колонки.Добавить("Реквизит", Новый ОписаниеТипов("Строка"));	
	тз.Колонки.Добавить("РольИОМ", Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыОбъектовМетаданных"));
	тз.Колонки.Добавить("Право", Новый ОписаниеТипов("Строка"));
	//тз.Колонки.Добавить("Доступность");
	//тз.Колонки.Добавить("ОграничениеУсловием");
	
	Возврат тз;
	
КонецФункции

//==================================================================================== Уничкин_РА [05.03.2015 23:07:05]=
Функция свт_ПроверяемыеТаблицыПоПравамДоступа_ДеревоЗначений()
	
	дз = Новый ДеревоЗначений();
	дз.Колонки.Добавить("МетаТаблица");	// ур. 0
	дз.Колонки.Добавить("ПолноеИмя");	// ур. 0
	дз.Колонки.Добавить("Вид");			// ур. 0	
	дз.Колонки.Добавить("Имя");			// ур. 0	
	дз.Колонки.Добавить("ИмяПоля");		// ур. 1
	дз.Колонки.Добавить("ВидПоля");		// ур. 1
	дз.Колонки.Добавить("ПредставлениеОбъекта");	// ур. 1
	дз.Колонки.Добавить("ПорядокОбъекта");			// ур. 1
	дз.Колонки.Добавить("ПравоДоступа");// ур. 2
	
	Возврат дз;
	
КонецФункции

//==================================================================================== Уничкин_РА [15.01.2015 19:30:30]=
Функция свт_СписокМетаданных_ТаблицаЗначений()
	
	тз = Новый ТаблицаЗначений;
	тз.Колонки.Добавить("ИмяТаблицыМнЧ");
	тз.Колонки.Добавить("ИмяТаблицыЕдЧ");
	тз.Колонки.Добавить("Представление");
	тз.Колонки.Добавить("Порядок");
	
	Возврат тз;	
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ: программные перечисления (пп)

//==================================================================================== Уничкин_РА [05.03.2015 23:31:45]=
Функция пп_ВидыПроверяемыхПолей() Экспорт
	
	Возврат Новый Структура("О, ОП, К, СР, Р, СТЧ, ТЧ, РТЧ, ПУ, ПУС, И, РС, ПРР"
		, "Основная"
		, "Операция"
		, "Команды"
		, "СтандартныйРеквизит"
		, "Реквизиты"
		, "СтандартнаяТабличнаяЧасть"
		, "ТабличныеЧасти"
		, "РеквизитТабличнойЧасти"
		, "ПризнакУчета"
		, "ПризнакУчетаСубконто"
		, "Измерение"
		, "Ресурс"
		, "Перерасчет");
	
КонецФункции 

