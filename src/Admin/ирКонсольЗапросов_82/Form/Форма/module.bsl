// +++.КЛАСС.ПолеТекстовогоДокументаСКонтекстнойПодсказкой
Перем ПолеТекстовогоДокументаСКонтекстнойПодсказкой;
// ---.КЛАСС.ПолеТекстовогоДокументаСКонтекстнойПодсказкой

Перем мИмяФайла;                        // имя файла запросов
Перем мИмяПути;                         // путь к файлу запорсов

Перем мЗаголовокФормы;                  // заголовок формы

Перем мТекущаяСтрока;                   // текущая(прошлая) строка дерева запросов.
//Перем мИдетДобавление;                  // признак добавления
Перем мАктивизированаДобавляемаяЗапись; // признак активизации добавленной записи

Перем мРезультатЗапроса;                // результат 

Перем мТаблицаЗагружена;                // признак того, что рез-т запроса загружен в табличное поле
Перем мСводнаяТаблицаЗагружена;         // признак того, что рез-т запроса загружен в сводную таблицу
Перем мКэшПустыхЗначений;

Перем мСхемаКомпоновки;
Перем мМассивВременныхТаблицКомпоновщика;
Перем ФлагМаскировкиАвтоупорядочивание;
Перем мНаборДанных;
Перем Парсер;
Перем ТаблицаКоординат;
Перем РежимДереваЗапроса;
Перем РежимСворачивания;
Перем РежимРедактирования;
Перем мТекущаяСтрокаДереваЗапроса;
Перем СлужебноеПолеТекстовогоДокумента;
Перем ТекстЗапросаДерева;
Перем СравнительТабличныхДокументов;

// @@@.КЛАСС.ПолеТекстовогоДокументаСКонтекстнойПодсказкой
// Транслятор обработки событий нажатия на кнопки командной панели в компоненту.
//
// Параметры:
//  Кнопка       – КнопкаКоманднойПанели.
//
Процедура КлсПолеТекстовогоДокументаСКонтекстнойПодсказкойНажатие(Кнопка)
	
	// Специальная обработка команд компоненты ДО
	КомпонентаТекстаЗапроса = ПолеТекстовогоДокументаСКонтекстнойПодсказкой.ТекстЗапроса;
	Если Кнопка = ЛксПолучитьКнопкуКоманднойПанелиЭкземпляраКомпоненты(КомпонентаТекстаЗапроса, "Проверить")
	Тогда
		мОбъектЗапроса.Текст = ЭлементыФормы.ТекстЗапроса.ПолучитьТекст();
		Если Не ПолучитьПараметрыИзЗапроса() Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	Если РежимДереваЗапроса Тогда
		Развернули = Ложь;
		Если Кнопка = ЛксПолучитьКнопкуКоманднойПанелиЭкземпляраКомпоненты(КомпонентаТекстаЗапроса, "КонструкторЗапросов")
		Тогда
			КоманднаяПанельТекстЗапросаИзменить();
			Если РежимСворачивания Тогда 
				Если Не КоманднаяПанельТекстЗапросаСворачивать() Тогда 
					Возврат;
				КонецЕсли;
				Развернули = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если Кнопка = ЛксПолучитьКнопкуКоманднойПанелиЭкземпляраКомпоненты(КомпонентаТекстаЗапроса, "ПерейтиКОпределению") Тогда
		ТекущееВыражение = КомпонентаТекстаЗапроса.ПолучитьТекущееОбъектноеВыражение();
		Если Лев(ТекущееВыражение, 1) = "&" Тогда
			СтрокаПараметра = Параметры.Найти(Сред(ТекущееВыражение, 2));
			Если СтрокаПараметра <> Неопределено Тогда
				Если СтрокаПараметра.ЭтоВыражение = Истина Тогда
					Попытка 
						ЗначениеПараметра = Вычислить(СтрокаПараметра.ЗначениеПараметра);
						ОткрытьЗначение(ЗначениеПараметра);
					Исключение
						ЛксСообщитьСУчетомМодальности("Ошибка при вычислении параметра """ + СтрокаПараметра.ИмяПараметра + """"
							+ Символы.ПС + ОписаниеОшибки(), МодальныйРежим, СтатусСообщения.Важное);
					КонецПопытки;
				Иначе
					ЗначениеПараметра = СтрокаПараметра.ЗначениеПараметра;
					ОткрытьЗначение(ЗначениеПараметра);
				КонецЕсли;
			КонецЕсли; 
			Возврат;
		КонецЕсли; 
	КонецЕсли; 

	Если ПолеТекстовогоДокументаСКонтекстнойПодсказкой.Свойство(ТекущийЭлемент.Имя) Тогда
		Результат = ПолеТекстовогоДокументаСКонтекстнойПодсказкой[ТекущийЭлемент.Имя].Нажатие(Кнопка);
	КонецЕсли;
	
	// Специальная обработка команд компоненты ПОСЛЕ
	Если РежимДереваЗапроса Тогда
		Если Кнопка = ЛксПолучитьКнопкуКоманднойПанелиЭкземпляраКомпоненты(КомпонентаТекстаЗапроса, "ПерейтиКОпределению")
		Тогда
			СтрокаПодзапроса = ДеревоЗапроса.Строки.Найти(Результат, "Псевдоним", Истина);
			Если СтрокаПодзапроса <> Неопределено Тогда
				Если СохранитьТекущийПодзапрос() Тогда 
					СтрокаПодзапроса = ЭлементыФормы.ДеревоЗапроса.ТекущаяСтрока.Строки.Найти(Результат, "Псевдоним", Истина);
					ЭлементыФормы.ДеревоЗапроса.ТекущаяСтрока = СтрокаПодзапроса;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Кнопка = ЛксПолучитьКнопкуКоманднойПанелиЭкземпляраКомпоненты(КомпонентаТекстаЗапроса, "КонструкторЗапросов")
		Тогда
			Если Развернули Тогда 
				//Если КоманднаяПанельТекстЗапросаСворачивать() Тогда 
					КоманднаяПанельТекстЗапросаСворачивать();
					Если РежимРедактирования Тогда 
						КоманднаяПанельТекстЗапросаИзменить();
					КонецЕсли;
				//КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция вПолучитьПараметр(ИмяПараметра)
	
	НайденнаяСтрока = Параметры.Найти(ИмяПараметра,"ИмяПараметра");
	Возврат НайденнаяСтрока.ЗначениеПараметра;
	
КонецФункции

// Получает текст запроса из текстового поля
//
// Параметры:
//  СВыделением - признак получения только выделенного текста.
//
// Возвращаемое значение:
//	Текст запроса в виде строки.
//
Функция вПолучитьТекстЗапроса(ИспользоватьТекущийПодзапрос = Ложь)
	
	ТекстПоля = ЭлементыФормы.ТекстЗапроса.ПолучитьТекст();
	Если РежимДереваЗапроса Тогда
		Если ДеревоЗапроса.Строки.Количество() > 0 Тогда
			Если Истина
				И ИспользоватьТекущийПодзапрос
				И ЭлементыФормы.ДеревоЗапроса.ТекущаяСтрока <> Неопределено
			Тогда
				ТекстПоля = РазвернутьВложенныеЗапросы(ЭлементыФормы.ДеревоЗапроса.ТекущаяСтрока, ТекстПоля);
				Если ЭлементыФормы.ДеревоЗапроса.ТекущаяСтрока.ТипУзла = "<ChooseTable>" Тогда
					ТекстПоля = "ВЫБРАТЬ * ИЗ " + ТекстПоля + " КАК ВложенныйЗапрос";
				КонецЕсли;
			Иначе 
				ТекстПоля = РазвернутьВложенныеЗапросы(ДеревоЗапроса.Строки[0], ТекстЗапросаДерева);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли; 
		
	Возврат ТекстПоля;
		
КонецФункции // ПолучитьТекстЗапроса()

// Устанавливает текст запроса в текстовом поле
//
// Параметры:
//  Текст - устанавливаемый текст запроса.
//
Процедура вЗадатьТекстЗапроса(Текст)
	
	ЭлементыФормы.ТекстЗапроса.УстановитьТекст(Текст);
	
КонецПроцедуры // ЗадатьТекстЗапроса()

// Устанавливает заголовок формы по имени файла запросов
//
// Параметры:
//  Нет.
//
Процедура мУстановитьЗаголовокФормы()
	
	Если мИмяФайла <> "" Тогда
		Заголовок = мЗаголовокФормы + " : " + мИмяФайла;
	Иначе
		Заголовок = мЗаголовокФормы;
	КонецЕсли;
	
КонецПроцедуры // мУстановитьЗаголовокФормы()

// Предлагает сохранить текущий подзапрос, если он находился в режиме редактирования.
//
// Параметры:
//  Булево - Истина - если пользователь согласился не сохранять или сохранять, Ложь - если отказался.
//
Функция СохранитьТекущийПодзапрос()

	Если РежимРедактирования Тогда
		Возврат КоманднаяПанельТекстЗапросаЗакончитьРедактирование();
	КонецЕсли;
	Возврат Истина;
	
КонецФункции // СохранитьТекущийПодзапрос()


// Записывает в дерево запросов текст запроса из текстового поля
//
// Параметры:
//  Нет.
//
Процедура вСохранитьЗапросТекущейСтроки()
	
	Если ДеревоЗапросов.Строки.Количество() <> 0 И мТекущаяСтрока <> НеОпределено Тогда
		
		Если мТекущаяСтрока.ТекстЗапроса <> вПолучитьТекстЗапроса() Тогда
			Модифицированность = Истина;
		КонецЕсли;
		
		мТекущаяСтрока.ТекстЗапроса = вПолучитьТекстЗапроса();
		
		мТекущаяСтрока.ПараметрыЗапроса = Параметры.Скопировать();
		мТекущаяСтрока.КодПередВыполнениемЗапроса = ЭлементыФормы.КодПередВыполнениемЗапроса.ПолучитьТекст();
		мТекущаяСтрока.КодОбработкиСтрокиРезультата = ЭлементыФормы.КодОбработкиСтрокиРезультата.ПолучитьТекст();
		мТекущаяСтрока.КодОбработкиРезультата = ЭлементыФормы.КодОбработкиРезультата.ПолучитьТекст();
		мТекущаяСтрока.Настройка = Новый ХранилищеЗначения(Компоновщик.Настройки);
		
	КонецЕсли;
	
КонецПроцедуры // СохранитьЗапросТекущейСтроки()

// Очищает дерево запросов, текстовое поле, список параметров
//
// Параметры:
//  Нет.
//
Процедура вОчиститьЗначения()
	
	//// Для совместимости со старыми версиями
	//Если ДеревоЗапросов.Колонки.Найти("КодОбработкиСтрокиРезультата") = Неопределено Тогда
	//	ДеревоЗапросов.Колонки.Добавить("КодОбработкиСтрокиРезультата");
	//КонецЕсли;
	//Если ДеревоЗапросов.Колонки.Найти("КодПередВыполнениемЗапроса") = Неопределено Тогда
	//	ДеревоЗапросов.Колонки.Добавить("КодПередВыполнениемЗапроса");
	//КонецЕсли;
	//Если ДеревоЗапросов.Колонки.Найти("КодОбработкиРезультата") = Неопределено Тогда
	//	ДеревоЗапросов.Колонки.Добавить("КодОбработкиРезультата");
	//КонецЕсли;
	
	ДеревоЗапросов.Строки.Очистить();
	мТекущаяСтрока = Неопределено;
	ОчиститьДеревоЗапроса();
	вЗадатьТекстЗапроса("");
	Параметры.Очистить();
	
КонецПроцедуры // ОчиститьЗначения()

// Сохраняет имя файла и путь к нему для использования в последующих сеансах работы
//
// Параметры:
//  Нет.
//
Процедура СохранитьИмяФайла()
	
	СохранитьЗначение("КонсольЗапросов_ИмяФайла", мИмяФайла);
	СохранитьЗначение("КонсольЗапросов_ИмяПути",  мИмяПути);
	
КонецПроцедуры // СохранитьИмяФайла()

// Восстанавливает имя открывавшегося в предыдущем сеансе работы файла и путь к нему 
//
// Параметры:
//  Нет.
//
Процедура ВосстановитьИмяФайла()
	
	мИмяФайла = ВосстановитьЗначение("КонсольЗапросов_ИмяФайла");
	мИмяПути  = ВосстановитьЗначение("КонсольЗапросов_ИмяПути");
	
	Если мИмяФайла = НеОпределено Тогда
		мИмяФайла = "";
	КонецЕсли;
	
	Если мИмяПути = НеОпределено Тогда
		мИмяПути = "";
	КонецЕсли;
	
КонецПроцедуры // ВосстановитьИмяФайла()

// Копирует дерево запросов
//
// Параметры:
//  ИсходноеДерево
//	НовоеДерево.
//
Процедура вСкопироватьДеревоЗапросов(ИсходноеДерево, НовоеДерево)
	
	НовоеДерево.Строки.Очистить();
	
	Если ИсходноеДерево.Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаДерева из ИсходноеДерево.Строки Цикл
		
		НоваяСтрока = НовоеДерево.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
		вСкопироватьДеревоЗапросов(СтрокаДерева, НоваяСтрока);
		
	КонецЦикла;
	
КонецПроцедуры // СкопироватьДеревоЗапросов()

// Подготовка к созданию нового файла запросов
//
// Параметры:
//  Нет.
//
Процедура СоздатьНовыйФайлЗапросов(Отладка = Ложь)

	мИмяФайла = "";
	мИмяПути = "";
	Если Не Отладка Тогда 
		СохранитьИмяФайла();
	КонецЕсли;
	
	вОчиститьЗначения();
	мУстановитьЗаголовокФормы();
	мТекущаяСтрока = НеОпределено;
	
	мТекущаяСтрока = ДеревоЗапросов.Строки.Добавить();
	мТекущаяСтрока.Запрос = "Запросы";
	мТекущаяСтрока.ТекстЗапроса = "";
	//мИдетДобавление = Истина;
	мАктивизированаДобавляемаяЗапись = Истина;
	
	ПриИзмененииДереваЗапросов();
	Модифицированность = Ложь;
	
КонецПроцедуры // СоздатьНовыйФайлЗапросов()

// Загружает дерево запросов из файла
//
// Параметры:
//  Нет.
//
Процедура ЗагрузитьЗапросыИзФайла()
	
	//Проверим существование файла.
	ФайлЗначения = Новый Файл(мИмяФайла);
	ПолученноеЗначение = ?(ФайлЗначения.Существует(), ЗначениеИзФайла(мИмяФайла), Неопределено);
	
	Если ТипЗнч(ПолученноеЗначение) = Тип("ТаблицаЗначений") Тогда
		
		вОчиститьЗначения();
		Для каждого СтрокаВремТаблицы из ПолученноеЗначение Цикл
			НовСтрока = ДеревоЗапросов.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, СтрокаВремТаблицы);
		КонецЦикла;
		Модифицированность = Ложь;
		
	ИначеЕсли ТипЗнч(ПолученноеЗначение) = Тип("ДеревоЗначений") Тогда
		
		вОчиститьЗначения();
		вСкопироватьДеревоЗапросов(ПолученноеЗначение, ДеревоЗапросов);
		Модифицированность = Ложь;
		
	Иначе // Формат файла не опознан
		Предупреждение("Невозможно загрузить список запросов из указанного файла!
		|Выберите другой файл.");
		
	КонецЕсли;
	
	мУстановитьЗаголовокФормы();
	ПриИзмененииДереваЗапросов();
	
КонецПроцедуры // ЗагрузитьЗапросыИзФайла()

// Сохраняет дерево запросов в файл
//
// Параметры:
//  ЗапрашиватьСохранение - Булево, *Ложь - признак необходимости предупреждения перед сохранением;
//	ЗапрашиватьИмяФайла - Булево, *Ложь - признак необходимости запроса имени файла.
//
Функция вСохранитьЗапросыВФайл(ЗапрашиватьСохранение = Ложь, ЗапрашиватьИмяФайла = Ложь)
	
	Если Не СохранитьТекущийПодзапрос() Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	вСохранитьЗапросТекущейСтроки();
	
	Если Не ЗапрашиватьИмяФайла Тогда
		Если ЗапрашиватьСохранение Тогда
			Если Не Модифицированность Тогда
				Возврат Истина;
			Иначе
				Ответ = Вопрос("Сохранить текущие запросы?", РежимДиалогаВопрос.ДаНетОтмена);
				Если Ответ = КодВозвратаДиалога.Отмена Тогда
					Возврат Ложь;
				ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Истина
		И мРежимРедактора 
		И ВладелецФормы <> Неопределено
		И Не ЗапрашиватьИмяФайла
	Тогда
		мОбъектЗапроса.Текст = мТекущаяСтрока.ТекстЗапроса;
		ТекстЗапросаКорректен = Ложь;
		Если ПолучитьПараметрыИзЗапроса(, Ложь) Тогда
			Если УстановитьТипЗапроса(, Истина) Тогда 
				ТекстЗапросаКорректен = Истина;
			КонецЕсли;
		КонецЕсли;
		Если Не ТекстЗапросаКорректен Тогда 
			Ответ = Вопрос("Текст запроса содержит ошибки. Продолжить сохранение?", РежимДиалогаВопрос.ОКОтмена);
			Если Ответ = КодВозвратаДиалога.Отмена Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		//КонструкторЗапроса = Новый КонструкторЗапроса;
		//КонструкторЗапроса.РежимКомпоновкиДанных = Истина;
		//ТекстЗапроса = ЭлементыФормы.ТекстЗапроса.ПолучитьТекст();
		//Попытка
		//	КонструкторЗапроса.Текст = ТекстЗапроса;
		//Исключение
		//	ЛксПоказатьОшибкуВЗапросеИлиПрограммномКоде(ЭлементыФормы.ТекстЗапроса,,,, МодальныйРежим, ИнформацияОбОшибке());
		//	Возврат;
		//КонецПопытки;
		Если мТекущаяСтрока.ТипЗапроса = "Компоновка" Тогда
			СтруктураПараметров = Новый Структура("НаборДанных", мРедактируемыйНаборДанных);
			СтруктураПараметров.Вставить("Запрос", мТекущаяСтрока.ТекстЗапроса);
			ЗакрыватьПриВыборе = Ложь;
			ОповеститьОВыборе(СтруктураПараметров);
		ИначеЕсли мТекущаяСтрока.ТипЗапроса = "Построитель" Тогда
			СтруктураПараметров = Новый Структура("Параметры", Параметры);
			СтруктураПараметров.Вставить("ТекстЗапроса", мТекущаяСтрока.ТекстЗапроса);
			ЗакрыватьПриВыборе = Ложь;
			ОповеститьОВыборе(СтруктураПараметров);
		КонецЕсли;
	Иначе
		Если ПустаяСтрока(мИмяФайла) или ЗапрашиватьИмяФайла Тогда
			
			Длг = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
			
			Длг.ПолноеИмяФайла = мИмяФайла;
			Длг.Каталог = мИмяПути;
			Длг.Заголовок = "Укажите файл для сохранения списка запросов";
			Длг.Фильтр = "Файлы запросов (*.sel)|*.sel|Все файлы (*.*)|*.*";
			Длг.Расширение = "sel";
			
			Если Длг.Выбрать() Тогда
				мИмяФайла = Длг.ПолноеИмяФайла;
				мИмяПути = Длг.Каталог;
			Иначе
				Возврат Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		ЗначениеВФайл(мИмяФайла, ДеревоЗапросов);
		Если Не мРежимРедактора Тогда
			Модифицированность = Ложь;
			СохранитьИмяФайла();
			мУстановитьЗаголовокФормы();
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // СохранитьЗапросыВФайл()

// Загружает результат запроса в таблицу или сводную таблицу
//
// Параметры:
//  Нет.
//
Процедура вЗагрузитьРезультат()
	
	Состояние("Загрузка результата...");
	Если мРезультатЗапроса <> Неопределено Тогда
		
		Если ЭлементыФормы.ПанельРезультата.ТекущаяСтраница.Имя = "Таблица" Тогда
			Если РезультатТаблица.Колонки.Количество() = 0 Тогда
				РезультатТаблица = мРезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.Прямой);
				ЭлементыФормы.РезультатТаблица.Данные = "РезультатТаблица";
				ЭлементыФормы.РезультатТаблица.СоздатьКолонки();
				РазмерТаблицы = РезультатТаблица.Количество();
			КонецЕсли;
		ИначеЕсли ЭлементыФормы.ПанельРезультата.ТекущаяСтраница.Имя = "Дерево" Тогда
			Если РезультатДерево.Колонки.Количество() = 0 Тогда
				РезультатДерево = мРезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
				ЭлементыФормы.РезультатДерево.Данные = "РезультатДерево";
				ЭлементыФормы.РезультатДерево.СоздатьКолонки();
			КонецЕсли;
		ИначеЕсли ЭлементыФормы.ПанельРезультата.ТекущаяСтраница.Имя = "СводнаяТаблица" Тогда
			Если мСводнаяТаблицаЗагружена = Ложь Тогда
				Попытка
					ЭлементыФормы.РезультатТабДокСвод.ВстроенныеТаблицы.СводнаяТаблица.ИсточникДанных = мРезультатЗапроса;
				Исключение
				КонецПопытки;
				мСводнаяТаблицаЗагружена = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	Состояние();
	
КонецПроцедуры // ЗагрузитьРезультат()

// Добавляет строки при копировании строки дерева запросов
//
// Параметры:
//  ТекСтрока - текущая строка
//	ДобСтрока - добавляемая строка
//	Дерево - дерево значений.
//
Процедура вДобавитьСтроки(ТекСтрока, ДобСтрока, Дерево)
	
	Для Каждого Колонка Из Дерево.Колонки Цикл
		ДобСтрока[Колонка.Имя] = ЛксПолучитьКопиюОбъекта(ТекСтрока[Колонка.Имя]);
	КонецЦикла;
	
	Для Каждого Строка Из ТекСтрока.Строки Цикл
		НоваяСтрока = ДобСтрока.Строки.Добавить();
		вДобавитьСтроки(Строка, НоваяСтрока, Дерево);
	КонецЦикла;
	
КонецПроцедуры // ДобавитьСтроки()

// Включает или отключает запуск автосохранения.
//
// Параметры:
//  Нет.
//
Процедура вОбработкаАвтосохранения()
	
	Если ИспользоватьАвтосохранение Тогда
		ПодключитьОбработчикОжидания("АвтоСохранить", ИнтервалАвтосохранения);
	Иначе
		ОтключитьОбработчикОжидания("АвтоСохранить");
	КонецЕсли;
	
КонецПроцедуры // ОбработкаАвтосохранения()

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНОЙ ПАНЕЛИ

// Обработчик нажатия кнопки командной панели "Новый список запросов"
//
Процедура НовыйФайл()
	
	Если вСохранитьЗапросыВФайл(Истина) Тогда
		СоздатьНовыйФайлЗапросов();
	КонецЕсли;
	
КонецПроцедуры // НовыйФайл()

Процедура ПриИзмененииДереваЗапросов()

	ЭлементыФормы.ПанельЗапроса.Доступность = (ДеревоЗапросов.Строки.Количество() > 0);
	Если Истина
		И ДеревоЗапросов.Строки.Количество() > 0
		И ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока = Неопределено
	Тогда 
	    ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока = ДеревоЗапросов.Строки[0];
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииДереваЗапросов()

// Обработчик нажатия кнопки командной панели "Открыть файл запросов"
//
Процедура ОткрытьФайл()
	
	Если вСохранитьЗапросыВФайл(Истина) Тогда
		
		Длг = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		
		Длг.ПолноеИмяФайла = мИмяФайла;
		Длг.Каталог = мИмяПути;
		Длг.Заголовок = "Выберите файл для загрузки списка запросов";
		Длг.Фильтр = "Файлы запросов (*.sel)|*.sel|Все файлы (*.*)|*.*";
		Длг.Расширение = "sel";
		
		Если Длг.Выбрать() Тогда
			мИмяФайла = Длг.ПолноеИмяФайла;
			мИмяПути = Длг.Каталог;
			ЗагрузитьЗапросыИзФайла();
			СохранитьИмяФайла();
		КонецЕсли;
		
	КонецЕсли;
	ПриИзмененииДереваЗапросов();
	
КонецПроцедуры // ОткрытьФайл()

// Обработчик нажатия кнопки командной панели "Сохранить"
//
Процедура Сохранить()
	
	вСохранитьЗапросыВФайл();
	
КонецПроцедуры // Сохранить()

// Обработчик автоматического сохранения  
//
Процедура АвтоСохранить()
	
	Если Истина
		И РежимДереваЗапроса 
		И РежимРедактирования
	Тогда
		// Ничего не делаем
	Иначе
		вСохранитьЗапросыВФайл();
	КонецЕсли;
	
КонецПроцедуры // Сохранить()

// Обработчик нажатия кнопки командной панели "Сохранить как"
//
Процедура СохранитьКак()
	
	вСохранитьЗапросыВФайл(Ложь, Истина);
	
КонецПроцедуры // СохранитьКак()

// Обработчик нажатия кнопки командной панели "Настройка автосохранения"
//
Процедура НастройкаАвтосохранения()
	
	ФормаНастройкиАвтосохранения = ПолучитьФорму("ФормаНастройкиАвтосохранения");
	ФормаНастройкиАвтосохранения.ОткрытьМодально();
	
	вОбработкаАвтосохранения();
	
КонецПроцедуры // НастройкаАвтосохранения()

// Обработчик нажатия кнопки командной панели "Перенести в другую группу"
//
Процедура ПеренестиСтрокуДерева()
	
	ФормаВыбораСтрокиДереваЗапросов = ПолучитьФорму("ФормаВыбораСтрокиДереваЗапросов", ЭтаФорма);
	ФормаВыбораСтрокиДереваЗапросов.ЗакрыватьПриВыборе = Истина;
	
	ФормаВыбораСтрокиДереваЗапросов.ДеревоЗапросов = ДеревоЗапросов;
	ФормаВыбораСтрокиДереваЗапросов.ТекущаяСтрокаВладельца = ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока;
	ФормаВыбораСтрокиДереваЗапросов.ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока = ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока;
	
	ФормаВыбораСтрокиДереваЗапросов.ОткрытьМодально();
	
КонецПроцедуры // ПеренестиСтрокуДерева()

Процедура УстановитьПараметрыЗапроса(ОбъектЗапроса = Неопределено)

	Если ОбъектЗапроса = Неопределено Тогда
		ОбъектЗапроса = мОбъектЗапроса;
	КонецЕсли;
	Для каждого СтрокаПараметров Из Параметры Цикл
		Если СтрокаПараметров.ЭтоВыражение = Истина Тогда
			Попытка 
				ЗначениеПараметра = Вычислить(СтрокаПараметров.ЗначениеПараметра);
				ОбъектЗапроса.УстановитьПараметр(СтрокаПараметров.ИмяПараметра, ЗначениеПараметра);
			Исключение
				ЛксСообщитьСУчетомМодальности("Ошибка при вычислении параметра """ + СтрокаПараметров.ИмяПараметра + """"
					+ Символы.ПС + ОписаниеОшибки(), МодальныйРежим, СтатусСообщения.Важное);
			КонецПопытки;
		Иначе
			ОбъектЗапроса.УстановитьПараметр(СтрокаПараметров.ИмяПараметра, СтрокаПараметров.ЗначениеПараметра);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // УстановитьПараметрыЗапроса()


// Обработчик нажатия кнопки командной панели "Выполнить"
//
Процедура ВыполнитьЗапрос(Сохранять = Истина)
	
	вСохранитьЗапросТекущейСтроки();
		
	мОбъектЗапроса.Текст = вПолучитьТекстЗапроса(Истина);
	
	Если Не ПолучитьПараметрыИзЗапроса() Тогда 
		Возврат;
	КонецЕсли;
	
	УстановитьПараметрыЗапроса();
	
	МассивСоздаваемыхВременныхТаблиц = ПолучитьРезультирующийЗапрос(мОбъектЗапроса);
	Если МассивСоздаваемыхВременныхТаблиц.Количество() > 0 Тогда
		ИмяВременнойТаблицы = МассивСоздаваемыхВременныхТаблиц[МассивСоздаваемыхВременныхТаблиц.ВГраница()];
	КонецЕсли;
	
	Если Не ПолеТекстовогоДокументаСКонтекстнойПодсказкой.КодПередВыполнениемЗапроса.ВыполнитьПрограммныйКод() Тогда 
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = мОбъектЗапроса.Текст;
	Для Каждого ИмяСоздаваемойВременнойТаблицы Из МассивСоздаваемыхВременныхТаблиц Цикл
		Если Не ЗначениеЗаполнено(ИмяСоздаваемойВременнойТаблицы) Тогда
			Продолжить;
		КонецЕсли;
		мОбъектЗапроса.Текст = "УНИЧТОЖИТЬ " + ИмяСоздаваемойВременнойТаблицы;
		Попытка
			мОбъектЗапроса.Выполнить();
		Исключение КонецПопытки;
	КонецЦикла;
	мОбъектЗапроса.Текст = ТекстЗапроса;
	
	НачалоВыполнения = ЛксПолучитьТекущееВремяВМиллисекундах();
	Состояние("Выполняется запрос");
	Попытка 
		мРезультатЗапроса = мОбъектЗапроса.Выполнить();
	Исключение
		// Баг платформы. Зависает приложение, если пытаемся установить выделение на невидимой странице.
		ТекущийЭлемент = ЭлементыФормы.ТекстЗапроса;
		
		ЛксПоказатьОшибкуВЗапросеИлиПрограммномКоде(ЭлементыФормы.ТекстЗапроса, , , Истина, МодальныйРежим,
			ИнформацияОбОшибке());
		Возврат;
	КонецПопытки;
	Состояние("");
	
	Если ЛиЗамерВремени Тогда
		ЛксСообщитьСУчетомМодальности("Время формирования результата - " + Строка(ЛксПолучитьТекущееВремяВМиллисекундах() - НачалоВыполнения)
			+ " мс", МодальныйРежим);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяВременнойТаблицы) Тогда
		ТекстЗапроса = "ВЫБРАТЬ * ИЗ " + ИмяВременнойТаблицы;
		Если мТекущаяСтрока.ТипЗапроса = "Компоновка" Тогда
			СтрокаПорядка = ЛксПолучитьСтрокуПорядкаКомпоновки(Компоновщик.Настройки.Порядок);
			Если ЗначениеЗаполнено(СтрокаПорядка) Тогда
				ТекстЗапроса = ТекстЗапроса + Символы.ПС 
					+ "УПОРЯДОЧИТЬ ПО" + Символы.ПС + Символы.Таб + СтрокаПорядка;
			КонецЕсли;
		КонецЕсли;
		мОбъектЗапроса.Текст = ТекстЗапроса;
		мРезультатЗапроса = мОбъектЗапроса.Выполнить();
	КонецЕсли;
	
	ПолеТекстовогоДокументаСКонтекстнойПодсказкой.КодОбработкиРезультата.ОчиститьТаблицуСловЛокальногоКонтекста();
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(ТипЗнч(мРезультатЗапроса));
	ПолеТекстовогоДокументаСКонтекстнойПодсказкой.КодОбработкиРезультата.ДобавитьСловоЛокальногоКонтекста(
			"мРезультатЗапроса", "Свойство", Новый ОписаниеТипов(МассивТипов), мРезультатЗапроса);
			
	ПолеТекстовогоДокументаСКонтекстнойПодсказкой.КодОбработкиСтрокиРезультата.ОчиститьТаблицуСловЛокальногоКонтекста();
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СтрокаТаблицыЗначений"));
	ПолеТекстовогоДокументаСКонтекстнойПодсказкой.КодОбработкиСтрокиРезультата.ДобавитьСловоЛокальногоКонтекста(
			"СтрокаРезультата", "Свойство", Новый ОписаниеТипов(МассивТипов), мРезультатЗапроса);

	ЭлементыФормы.ТекстЗапросаРезультата.УстановитьТекст(мОбъектЗапроса.Текст);
	
	РезультатТаблица.Колонки.Очистить();
	РезультатДерево.Колонки.Очистить();
	мСводнаяТаблицаЗагружена = Ложь;
	
	вЗагрузитьРезультат();
	
КонецПроцедуры // ВыполнитьЗапрос()

// Обработчик нажатия кнопки командной панели "Сохранить в табличный документ"
//
Процедура СохранитьРезультат()
	Перем ЗаголовокКолонки;
	
	Если мРезультатЗапроса <> Неопределено Тогда
		ТабДок = Новый ТабличныйДокумент;
		КоличествоКолонок = мРезультатЗапроса.Колонки.Количество();
		
		Выборка = мРезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
		
		ДетальнаяСтрока = ТабДок.ПолучитьОбласть(1, , 1, );
		ОбластьОбщихИтогов = ТабДок.ПолучитьОбласть(1, , 1, );
		ОбластьОбщихИтогов.Область().Шрифт = Новый Шрифт(ОбластьОбщихИтогов.Область().Шрифт, , , Истина, , ,);
		ОбластьИерархическихЗаписей = ТабДок.ПолучитьОбласть(1, , 1, );
		ОбластьИерархическихЗаписей.Область().Шрифт = Новый Шрифт(ОбластьИерархическихЗаписей.Область().Шрифт, , , Истина, , ,);
		ОбластьГрупповыхЗаписей = ТабДок.ПолучитьОбласть(1, , 1, );
		ОбластьГрупповыхЗаписей.Область().Шрифт = Новый Шрифт(ОбластьГрупповыхЗаписей.Область().Шрифт, , , Истина, , ,);
		ОбластьЗаголвка = ТабДок.ПолучитьОбласть(1, , 1, );
		
		Для ТекущееПоле = 0 По КоличествоКолонок - 1 Цикл
			Область = ОбластьЗаголвка.Область(1, ТекущееПоле + 1);
			Область.Текст = мРезультатЗапроса.Колонки[ТекущееПоле].Имя;
			Область.ШиринаКолонки = мРезультатЗапроса.Колонки[ТекущееПоле].Ширина;
		КонецЦикла;
		ТабДок.Вывести(ОбластьЗаголвка);
		ОбластьЗаголвка = ТабДок.Область(1, 1, 1, КоличествоКолонок);
		
		ОбластьЗаголвка.Шрифт = Новый Шрифт(ОбластьЗаголвка.Шрифт, , , Истина, , ,);
		ОбластьЗаголвка.ЦветФона = Новый Цвет(255, 255, 0);
		ОбластьЗаголвка.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
		
		ТабДок.НачатьАвтогруппировкуСтрок();
		Пока Выборка.Следующий() Цикл
			Если Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоГруппировке Тогда 
				ИсходнаяСтрока = ОбластьГрупповыхЗаписей;
			ИначеЕсли Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоИерархии Тогда 
				ИсходнаяСтрока = ОбластьИерархическихЗаписей;
			ИначеЕсли Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ОбщийИтог Тогда 
				ИсходнаяСтрока = ОбластьОбщихИтогов;
			Иначе
				ИсходнаяСтрока = ДетальнаяСтрока;
			КонецЕсли;
			
			Для ТекущееПоле = 0 По КоличествоКолонок - 1 Цикл
				Область = ИсходнаяСтрока.Область(1, ТекущееПоле + 1);
				Область.Текст = Выборка[ТекущееПоле];
			КонецЦикла;
			ТабДок.Вывести(ИсходнаяСтрока, Выборка.Уровень());
		КонецЦикла;
		ТабДок.ЗакончитьАвтогруппировкуСтрок();
		
		ТабДок.Показать();
	КонецЕсли;
	
КонецПроцедуры // СохранитьРезультат()

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ

// Обработчик выбора строки в дереве запросов
//
Процедура ДеревоЗапросовВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыполнитьЗапрос();
	
КонецПроцедуры // ДеревоЗапросовВыбор()

// Обработчик активизации строки в дереве запросов
//
Процедура ДеревоЗапросовПриАктивизацииСтроки(Элемент)
	
	НадоСохранять = Истина;
	
	//Если мИдетДобавление Тогда
	//	Если мАктивизированаДобавляемаяЗапись Тогда
	//		
	//		// Произошла отмена добавления записи.
	//		НадоСохранять = Ложь;
	//		мАктивизированаДобавляемаяЗапись = Ложь;
	//	Иначе
	//		мАктивизированаДобавляемаяЗапись = Истина;
	//	КонецЕсли;
	//КонецЕсли;
	
	Если НадоСохранять Тогда
		вСохранитьЗапросТекущейСтроки();
	КонецЕсли;
	
	мТекущаяСтрока = ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока;
	
	Если ДеревоЗапросов.Строки.Количество() <> 0 И мТекущаяСтрока <> НеОпределено Тогда
		
		ЭлементыФормы.КодОбработкиСтрокиРезультата.УстановитьТекст(мТекущаяСтрока.КодОбработкиСтрокиРезультата);
		ЭлементыФормы.КодПередВыполнениемЗапроса.УстановитьТекст(мТекущаяСтрока.КодПередВыполнениемЗапроса);
		ЭлементыФормы.КодОбработкиРезультата.УстановитьТекст(мТекущаяСтрока.КодОбработкиРезультата);
		
		вЗадатьТекстЗапроса(мТекущаяСтрока.ТекстЗапроса);
		ИсходнаяТаблицаПараметров = мТекущаяСтрока.ПараметрыЗапроса;
		Параметры.Очистить();
		Если Не ИсходнаяТаблицаПараметров = Неопределено Тогда
			Для каждого СтрокаИсходнойТаблицы из ИсходнаяТаблицаПараметров Цикл
				НоваяСтрока = Параметры.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсходнойТаблицы);
			КонецЦикла;
		КонецЕсли;
		Если мТекущаяСтрока.СпособВыгрузки = Неопределено Тогда
			мТекущаяСтрока.СпособВыгрузки = 1;
		КонецЕсли;
		СпособВыгрузки = мТекущаяСтрока.СпособВыгрузки;
		Если ТипЗнч(мТекущаяСтрока.Настройка) = Тип("ХранилищеЗначения") Тогда
			Компоновщик.ЗагрузитьНастройки(мТекущаяСтрока.Настройка.Получить());
		КонецЕсли;
		УстановитьТипЗапроса();
	Иначе
		вЗадатьТекстЗапроса("");
		Параметры.Очистить();
	КонецЕсли;
	
	ОчиститьДеревоЗапроса();

	Если РежимДереваЗапроса Тогда 
		Если Не РазобратьТекстЗапроса(ЭлементыФормы.ТекстЗапроса) Тогда 
			КоманднаяПанельФормыРежимДереваЗапроса(ЭлементыФормы.КоманднаяПанельФормы.Кнопки.РежимДереваЗапроса);
		КонецЕсли;
	КонецЕсли;
	ЭлементыФормы.ПанельЗапроса.Доступность = Истина;
	
КонецПроцедуры // ДеревоЗапросовПриАктивизацииСтроки()

Процедура УничтожитьВременныеТаблицыПодзапроса(СтрокаДереваЗапроса)

	Если Не РежимСворачивания Тогда
		Возврат;
	КонецЕсли;
	// Уничтожим служебные временные таблицы
	Для Каждого ДочерняяСтрока Из СтрокаДереваЗапроса.Строки Цикл
		Если ДочерняяСтрока.ТипУзла = "<InUnion>" Тогда 
			Продолжить;
		КонецЕсли;
		Если ДочерняяСтрока.ТипУзла <> "<FromUnion>" Тогда 
			УничтожитьВременныеТаблицыПодзапроса(ДочерняяСтрока);
		Иначе
			ИмяВременнойТаблицы = ДочерняяСтрока.Псевдоним;
			Если ИмяВременнойТаблицы <> Неопределено Тогда 
				мОбъектЗапроса.Текст = "УНИЧТОЖИТЬ " + ИмяВременнойТаблицы;
				Попытка
					мОбъектЗапроса.Выполнить();
				Исключение КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // УничтожитьВременныеТаблицыПодзапроса()

Процедура ОчиститьДеревоЗапроса()

	Если мТекущаяСтрокаДереваЗапроса <> Неопределено Тогда
		УничтожитьВременныеТаблицыПодзапроса(мТекущаяСтрокаДереваЗапроса);
	КонецЕсли;
	мТекущаяСтрокаДереваЗапроса = Неопределено;
	ДеревоЗапроса.Строки.Очистить();

КонецПроцедуры // ОчиститьДеревоЗапроса()


// Обработчик события перед началом добавления строки в дереве запросов
//
Процедура ДеревоЗапросовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель)
	
	Если Копирование Тогда
		Отказ = Истина;
		вСохранитьЗапросТекущейСтроки();
		ТекСтрока = Элемент.ТекущаяСтрока;
		Если ТекСтрока.Родитель <> Неопределено Тогда
			НоваяСтрока = ТекСтрока.Родитель.Строки.Добавить();
		Иначе
			НоваяСтрока = Элемент.Значение.Строки.Добавить();
		КонецЕсли; 
		вДобавитьСтроки(ТекСтрока, НоваяСтрока, Элемент.Значение);
		Элемент.ТекущаяСтрока = НоваяСтрока;
		
	КонецЕсли; 
	
	//мИдетДобавление = Истина;
	
КонецПроцедуры // ДеревоЗапросовПередНачаломДобавления()

// Обработчик события перед удалением строки в дереве запросов
//
Процедура ДеревоЗапросовПередУдалением(Элемент, Отказ)
	
	//Если Истина
	//	И Элемент.ТекущаяСтрока.Родитель = Неопределено
	//	И ДеревоЗапросов.Строки.Количество() = 1
	//Тогда
	//	Отказ = Истина;
	//	Возврат;
	//КонецЕсли;
	//Модифицированность = Истина;
	мТекущаяСтрока = Неопределено;
	
КонецПроцедуры // ДеревоЗапросовПередУдалением()

// Обработчик события при окончании редактирования строки в дереве запросов
//
Процедура ДеревоЗапросовПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		мТекущаяСтрока = Неопределено;
		Возврат;
	КонецЕсли;
	Если ПустаяСтрока(Элемент.ТекущиеДанные.Запрос) Тогда 
		Элемент.ТекущиеДанные.Запрос = "Запрос";
	КонецЕсли;
	
	// Здесь уже в дереве есть сама строка почему то
	//НовоеИмя = Элемент.ТекущиеДанные.Запрос;
	//Пока ДеревоЗапросов.Строки.Найти(НовоеИмя, "Запрос", Истина) <> Неопределено Цикл
	//	НовоеИмя = НовоеИмя + "1";
	//КонецЦикла;
	//Элемент.ТекущиеДанные.Запрос = НовоеИмя;
	
	Если НоваяСтрока и Элемент.ТекущаяСтрока.СпособВыгрузки = НеОпределено Тогда
		Элемент.ТекущаяСтрока.СпособВыгрузки = 1;
	КонецЕсли;
	
	//ДеревоЗапросовПриАктивизацииСтроки(Элемент);
	
	//Если мИдетДобавление Тогда
	//	
	//	Если ОтменаРедактирования Тогда
	//		мТекущаяСтрока = Неопределено;
	//	КонецЕсли;
	//	
	//	мИдетДобавление = Ложь;
	//КонецЕсли;
	
	//Модифицированность = Истина;
	
КонецПроцедуры // ДеревоЗапросовПриОкончанииРедактирования()

// Обработчик изменения способа выгрузки
//
Процедура СпособВыгрузкиПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры // СпособВыгрузкиПриИзменении()

// Обработчик выбора строки в таблице результата
//
Процедура ТаблицаРезультатаВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СодержимоеЯчейки = ВыбраннаяСтрока[Колонка.Имя];
	
	Если ТипЗнч(СодержимоеЯчейки) = Тип("ТаблицаЗначений") Тогда
		ФормаВложеннойТаблицы = Обработка.ПолучитьФорму("ФормаВложеннойТаблицы", ЭтаФорма);
		ФормаВложеннойТаблицы.ВложеннаяТаблица = СодержимоеЯчейки;
		ФормаВложеннойТаблицы.ЭлементыФормы.ВложеннаяТаблица.СоздатьКолонки();
		ФормаВложеннойТаблицы.Открыть();
		
	Иначе
		ОткрытьЗначение(СодержимоеЯчейки);
	КонецЕсли;
	
КонецПроцедуры // ТаблицаРезультатаВыбор()

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события при открытии формы
//
Процедура ПриОткрытии()
	
	Если ирПлатформа.ВерсияПлатформы >= 8001012 Тогда
		ЭлементыФормы.ПанельНастройкиПостроителя.Видимость = Истина;
	КонецЕсли;
	
	Если мРежимРедактора Тогда
		ЭлементыФормы.ДеревоЗапросов.ТолькоПросмотр = Истина;
		ЭлементыФормы.МенюДереваЗапроса.Кнопки.МенюСтруктурыЗапроса.Кнопки.СкопироватьВНовыйЗапрос.Доступность = Ложь;
		Для Каждого лКнопка Из ЭлементыФормы.КоманднаяПанельФормы.Кнопки.ТипЗапроса.Кнопки Цикл
			лКнопка.Доступность = Ложь;
		КонецЦикла;
		Заголовок = мЗаголовокФормы + " : " + " Редактирование";
		ВладелецФормы.Панель.Доступность = Ложь;
		
		Кнопки = ЭлементыФормы.КоманднаяПанельФормы.Кнопки;
		Кнопки.НовыйФайл.Доступность = Ложь;
		Кнопки.ОткрытьФайл.Доступность = Ложь;
		Кнопки.Сохранить.Доступность = Ложь;
		Кнопки.НастройкаАвтосохранения.Доступность = Ложь;
		Кнопки.ПеренестиСтрокуДерева.Доступность = Ложь;
		
		Кнопки = ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Разделитель.Кнопки;
		Кнопки.НовыйФайл.Доступность = Ложь;
		Кнопки.ОткрытьФайл.Доступность = Ложь;
		Кнопки.Сохранить.Доступность = Ложь;
		Кнопки.НастройкаАвтосохранения.Доступность = Ложь;
		Кнопки.ПеренестиСтрокуДерева.Доступность = Ложь;
	КонецЕсли;
	
	Если мОбъектЗапроса.МенеджерВременныхТаблиц = Неопределено Тогда
		мОбъектЗапроса.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	КонецЕсли;
	
	Если Не (мРежимОтладки Или мРежимРедактора) Тогда
		// Попытаемся загрузить последний открывавшийся файл запросов
		ВосстановитьИмяФайла();
		Если ПустаяСтрока(мИмяФайла) Тогда
			СоздатьНовыйФайлЗапросов();
		Иначе
			ЗагрузитьЗапросыИзФайла();
		КонецЕсли;
		
		ИспользоватьАвтосохранение = ВосстановитьЗначение("КонсольЗапросов_ИспользоватьАвтосохранение");
		ИнтервалАвтосохранения = ВосстановитьЗначение("КонсольЗапросов_ИнтервалАвтосохранения");
		Если Ложь
			Или ИнтервалАвтосохранения < 1
			Или ИнтервалАвтосохранения = Неопределено
		Тогда
			ИнтервалАвтосохранения = 1;
		КонецЕсли;
		вОбработкаАвтосохранения();
	Иначе
		ПриИзмененииДереваЗапросов();
	КонецЕсли;
	
	// +++.КЛАСС.ПолеТекстовогоДокументаСКонтекстнойПодсказкой
	ПолеТекстовогоДокументаСКонтекстнойПодсказкой = Новый Структура;
	
	ПолучитьФорму("ирКлсПолеТекстовогоДокументаСКонтекстнойПодсказкой",, "1").Инициализировать(ПолеТекстовогоДокументаСКонтекстнойПодсказкой,
		ЭтаФорма, ЭлементыФормы.ТекстЗапроса, ЭлементыФормы.КоманднаяПанельТекстЗапроса, Истина, , мОбъектЗапроса);
	//Обработки.ирКлсПолеТекстовогоДокументаСКонтекстнойПодсказкой.Создать().Инициализировать(ПолеТекстовогоДокументаСКонтекстнойПодсказкой,
	//	ЭтаФорма, ЭлементыФормы.ТекстЗапроса, ЭлементыФормы.КоманднаяПанельТекстЗапроса, Истина, , мОбъектЗапроса);

	ПолучитьФорму("ирКлсПолеТекстовогоДокументаСКонтекстнойПодсказкой",, "2").Инициализировать(ПолеТекстовогоДокументаСКонтекстнойПодсказкой,
		ЭтаФорма, ЭлементыФормы.КодПередВыполнениемЗапроса, , Ложь, "ВыполнитьЛокально", ЭтаФорма);
	//Обработки.ирКлсПолеТекстовогоДокументаСКонтекстнойПодсказкой.Создать().Инициализировать(ПолеТекстовогоДокументаСКонтекстнойПодсказкой,
	//	ЭтаФорма, ЭлементыФормы.КодПередВыполнениемЗапроса, , Ложь, "ВыполнитьЛокально", ЭтаФорма);
		
	ПолучитьФорму("ирКлсПолеТекстовогоДокументаСКонтекстнойПодсказкой",, "3").Инициализировать(ПолеТекстовогоДокументаСКонтекстнойПодсказкой,
		ЭтаФорма, ЭлементыФормы.КодОбработкиРезультата, , Ложь, "ВыполнитьЛокально", ЭтаФорма);
	//Обработки.ирКлсПолеТекстовогоДокументаСКонтекстнойПодсказкой.Создать().Инициализировать(ПолеТекстовогоДокументаСКонтекстнойПодсказкой,
	//	ЭтаФорма, ЭлементыФормы.КодОбработкиРезультата, , Ложь, "ВыполнитьЛокально", ЭтаФорма);
		
	ПолучитьФорму("ирКлсПолеТекстовогоДокументаСКонтекстнойПодсказкой",, "4").Инициализировать(ПолеТекстовогоДокументаСКонтекстнойПодсказкой,
		ЭтаФорма, ЭлементыФормы.КодОбработкиСтрокиРезультата, , Ложь, "ВыполнитьЛокальноКодОбработкиСтрокиРезультата", ЭтаФорма);
	//Обработки.ирКлсПолеТекстовогоДокументаСКонтекстнойПодсказкой.Создать().Инициализировать(ПолеТекстовогоДокументаСКонтекстнойПодсказкой,
	//	ЭтаФорма, ЭлементыФормы.КодОбработкиСтрокиРезультата, , Ложь, "ВыполнитьЛокальноКодОбработкиСтрокиРезультата", ЭтаФорма);
		
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(ТипЗнч(мОбъектЗапроса));
	ПолеТекстовогоДокументаСКонтекстнойПодсказкой.КодПередВыполнениемЗапроса.ДобавитьСловоЛокальногоКонтекста(
			"мОбъектЗапроса", "Свойство", Новый ОписаниеТипов(МассивТипов));
			
	ПолеТекстовогоДокументаСКонтекстнойПодсказкой.КодПередВыполнениемЗапроса.ДобавитьСловоЛокальногоКонтекста(
			"вПолучитьПараметр", "Метод", Новый ОписаниеТипов);
	//// ---.КЛАСС.ПолеТекстовогоДокументаСКонтекстнойПодсказкой
	
	Если мРежимРедактора Тогда
		ПолеТекстовогоДокументаСКонтекстнойПодсказкой.ТекстЗапроса.РежимКомпоновкиДанных = (мТекущаяСтрока.ТипЗапроса = "Компоновка");
	КонецЕсли;
	Если мРежимОтладки Тогда
		КоманднаяПанельФормыРежимДереваЗапроса();
	КонецЕсли;
	
КонецПроцедуры // ПриОткрытии()

// Обработчик события выбора в подчиненной форме
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если Ложь
		Или ЗначениеВыбора = ДеревоЗапросов
		Или ТипЗнч(ЗначениеВыбора) = Тип("СтрокаДереваЗначений")
	Тогда 
		вСохранитьЗапросТекущейСтроки();
		НоваяСтрока = ЗначениеВыбора.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, мТекущаяСтрока);
		вСкопироватьДеревоЗапросов(мТекущаяСтрока, НоваяСтрока);
		РодительТекущейСтроки = ?(мТекущаяСтрока.Родитель = НеОпределено, ДеревоЗапросов, мТекущаяСтрока.Родитель);
		РодительТекущейСтроки.Строки.Удалить(РодительТекущейСтроки.Строки.Индекс(мТекущаяСтрока));
		мТекущаяСтрока = НеОпределено;
		ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока = НоваяСтрока;
		Модифицированность = Истина;
	ИначеЕсли ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		Если ЗначениеВыбора.Свойство("Формула") Тогда
			ЭлементыФормы.Параметры.ТекущаяСтрока.ЗначениеПараметра = ЗначениеВыбора.Формула;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаВыбора()

// Обработчик события преред закрытием формы
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если РежимДереваЗапроса Тогда 
		мОбъектЗапроса.Текст = ТекстЗапросаДерева;
	КонецЕсли;
	Если вСохранитьЗапросыВФайл(Истина) Тогда
		СохранитьЗначение("КонсольЗапросов_ИспользоватьАвтосохранение", ИспользоватьАвтосохранение);
		СохранитьЗначение("КонсольЗапросов_ИнтервалАвтосохранения", ИнтервалАвтосохранения);
	Иначе
		СтандартнаяОбработка = Ложь;
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры // ПередЗакрытием()

// Обработчик события при смене страницы панели
//
Процедура ПанельРезультатаПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	вЗагрузитьРезультат();
	
КонецПроцедуры // ПанельРезультатаПриСменеСтраницы()

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>;
//  <Параметр2>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>.
//
Процедура ВыполнитьОбработкуСтрокРезультата(ТекстДляВыполнения)

	Если флРаботатьВТранзакции Тогда
		НачатьТранзакцию();
	КонецЕсли;
	Продолжать = Истина;
	ВремяНачалаОбработки = ТекущаяДата();
	ТаблицаСРезультатом = ЭлементыФормы.РезультатТаблица.Значение;
	Индикатор = ЛксПолучитьИндикаторПроцесса(ТаблицаСРезультатом.Количество(), , Истина);
	Для Каждого СтрокаРезультата Из ТаблицаСРезультатом Цикл
		ЛксОбработатьИндикатор(Индикатор);
		НомерСтроки = ТаблицаСРезультатом.Индекс(СтрокаРезультата) + 1;
		Если Не флПропускатьОшибки Тогда 
			Выполнить(ТекстДляВыполнения);
		Иначе
			Попытка
				Выполнить(ТекстДляВыполнения);
			Исключение
				ЛксСообщитьСУчетомМодальности("Строка №" + НомерСтроки + ": " + ОписаниеОшибки(), МодальныйРежим);
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	Если флРаботатьВТранзакции Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;

КонецПроцедуры // ВыполнитьОбработкуСтрокРезультата()

Процедура КнопкаВыполнитьОбработкуТаблицыРезультата(Элемент)
	
	ПолеТекстовогоДокументаСКонтекстнойПодсказкой.КодОбработкиСтрокиРезультата.ВыполнитьПрограммныйКод();
	
КонецПроцедуры

Процедура КнопкаВыполнитьОбработкуРезультата(Элемент)
	
	ПолеТекстовогоДокументаСКонтекстнойПодсказкой.КодОбработкиРезультата.ВыполнитьПрограммныйКод();
	
КонецПроцедуры

Процедура ДеревоЗначенийСвернуть(ДЗ, Свернуть=истина)
	
	Если ТипЗнч(ДЗ.Значение) = Тип("ДеревоЗначений") Тогда
		ДеревоЗначенийСвернутьСлуж(ДЗ, Свернуть, ДЗ.Значение.Строки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДеревоЗначенийСвернутьСлуж(ДЗ, Свернуть, Строки)
	
	Для Каждого Стр Из Строки Цикл
		Если Свернуть Тогда
			ДЗ.Свернуть(Стр);
		Иначе
			ДЗ.Развернуть(Стр);
		КонецЕсли;
		ДеревоЗначенийСвернутьСлуж(ДЗ, Свернуть, Стр.Строки);
	КонецЦикла;
	
КонецПроцедуры

Процедура СвернутьНажатие(Элемент)
	
	ДеревоЗначенийСвернуть(ЭлементыФормы.РезультатДерево, истина);
	
КонецПроцедуры

Процедура РазвернутьНажатие(Элемент)
	
	// Вставить содержимое обработчика.
	ДеревоЗначенийСвернуть(ЭлементыФормы.РезультатДерево, Ложь);
	
КонецПроцедуры

Процедура ПриЗакрытии()
	
	Если мТекущаяСтрокаДереваЗапроса <> Неопределено Тогда
		СтарыйТекстЗапроса = мОбъектЗапроса.Текст;
		УничтожитьВременныеТаблицыПодзапроса(мТекущаяСтрокаДереваЗапроса);
		мОбъектЗапроса.Текст = СтарыйТекстЗапроса;
	КонецЕсли;
	
	Если мРежимРедактора Тогда
		// Иногда здесь может быть уже отсутствующая форма
		Если ВладелецФормы <> Неопределено Тогда
			ВладелецФормы.Панель.Доступность = Истина;
		КонецЕсли;
	КонецЕсли;

	// +++.КЛАСС.ПолеТекстовогоДокументаСКонтекстнойПодсказкой
	// Уничтожение всех экземпляров компоненты. Обязательный блок.
	Для Каждого Экземпляр Из ПолеТекстовогоДокументаСКонтекстнойПодсказкой Цикл
		Экземпляр.Значение.Уничтожить();
	КонецЦикла;
	// ---.КЛАСС.ПолеТекстовогоДокументаСКонтекстнойПодсказкой
	
КонецПроцедуры

Процедура КоманднаяПанельФормыЗамерВремени(Кнопка)
	
	Кнопка.Пометка = Не Кнопка.Пометка;
	ЛиЗамерВремени = Кнопка.Пометка;
	
КонецПроцедуры

// @@@.КЛАСС.ПолеТекстовогоДокументаСКонтекстнойПодсказкой
// Процедура служит для выполнения программы поля текстового документа в локальном контексте.
// Вызывается из компоненты ирКлсПолеТекстовогоДокументаСКонтекстнойПодсказкой в режиме внутреннего языка.
//
// Параметры:
//  ТекстДляВыполнения – Строка;
//  *ЛиСинтаксическийКонтроль - Булево, *Ложь - признак вызова только для синтаксического контроля.
//
Процедура ВыполнитьЛокальноКодОбработкиСтрокиРезультата(ТекстДляВыполнения, ЛиСинтаксическийКонтроль = Ложь) Экспорт
	
	Если ЛиСинтаксическийКонтроль Тогда
		Выполнить(ТекстДляВыполнения);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуСтрокРезультата(ТекстДляВыполнения);
	
КонецПроцедуры // ВыполнитьЛокальноКодОбработкиСтрокиРезультата()

// @@@.КЛАСС.ПолеТекстовогоДокументаСКонтекстнойПодсказкой
// Процедура служит для выполнения программы поля текстового документа в локальном контексте.
// Вызывается из компоненты ирКлсПолеТекстовогоДокументаСКонтекстнойПодсказкой в режиме внутреннего языка.
//
// Параметры:
//  ТекстДляВыполнения – Строка;
//  *ЛиСинтаксическийКонтроль - Булево, *Ложь - признак вызова только для синтаксического контроля.
//
Процедура ВыполнитьЛокально(ТекстДляВыполнения, ЛиСинтаксическийКонтроль = Ложь) Экспорт
	
	Выполнить(ТекстДляВыполнения);
	
КонецПроцедуры // ВыполнитьЛокальноКодОбработкиРезультата()

Процедура УправлениеКолонкамиПараметры()

	ЭлементыФормы.Параметры.Колонки.ЗначениеПараметра.ЭлементУправления.ВыбиратьТип = (ЭлементыФормы.Параметры.ТекущаяСтрока.ЭтоВыражение = Ложь);
	
КонецПроцедуры

Процедура ПараметрыЭтоВыражениеПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.Параметры.ТекущиеДанные;
	
	Если ТекущиеДанные.ЭтоВыражение = Истина Тогда
		Если Не ТипЗнч(ТекущиеДанные.ЗначениеПараметра) = Тип("Строка") Тогда
			ТекущиеДанные.ЗначениеПараметра = "";
		КонецЕсли;
		
	ИначеЕсли ТекущиеДанные.ЭтоВыражение = Ложь Тогда
		Если ТекущиеДанные.ТипЗначения <> Неопределено Тогда
			ТекущиеДанные.ЗначениеПараметра = ТекущиеДанные.ТипЗначения.ПривестиЗначение(ТекущиеДанные.ЗначениеПараметра);
		КонецЕсли;
			
	ИначеЕсли ТекущиеДанные.ЭтоВыражение = 2 Тогда
		Если Не ТипЗнч(ТекущиеДанные.ЗначениеПараметра) = Тип("СписокЗначений") Тогда
			ЗначениеПараметра = ТекущиеДанные.ЗначениеПараметра;
			ТекущиеДанные.ЗначениеПараметра = Новый СписокЗначений;
			Если Не ТекущиеДанные.НеИспользоватьОграничениеТипа Тогда
				Если ТекущиеДанные.ТипЗначения <> Неопределено Тогда
					ТекущиеДанные.ЗначениеПараметра.ТипЗначения = ТекущиеДанные.ТипЗначения;
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеПараметра <> Неопределено Тогда
				ТекущиеДанные.ЗначениеПараметра.Добавить(ЗначениеПараметра);
			КонецЕсли;
		КонецЕсли; 
	Иначе
		Если ТипЗнч(ТекущиеДанные.ЗначениеПараметра) = Тип("СписокЗначений") Тогда
			Если ТекущиеДанные.ЗначениеПараметра.Количество() <> 0 Тогда
				ТекущиеДанные.ЗначениеПараметра = ТекущиеДанные.ЗначениеПараметра[0].Значение;
			Иначе
				ТекущиеДанные.ЗначениеПараметра = Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	УправлениеКолонкамиПараметры();
	
КонецПроцедуры

Процедура КоманднаяПанельФормыУдалитьВременныеТаблицы(Кнопка)
	
	мОбъектЗапроса.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
КонецПроцедуры

Функция ПолучитьПараметрыИзЗапроса(ЛиДобавлятьНовые = Истина, ОбновитьНастройки = Истина, СтартоваяСтрока = 0)

	Попытка
		ПараметрыЗапроса = мОбъектЗапроса.НайтиПараметры();
	Исключение
		// Баг платформы. Зависает приложение, если пытаемся установить выделение на невидимой странице.
		ТекущийЭлемент = ЭлементыФормы.ТекстЗапроса;
		
		ЛксПоказатьОшибкуВЗапросеИлиПрограммномКоде(ЭлементыФормы.ТекстЗапроса, СтартоваяСтрока, , Истина, МодальныйРежим,
			ИнформацияОбОшибке());
		Возврат Ложь;
	КонецПопытки;
	Если ЛиДобавлятьНовые Тогда
		Для каждого ПараметрЗапроса Из ПараметрыЗапроса Цикл
			ИмяПараметра =  ПараметрЗапроса.Имя;
			СтрокаПараметров = Параметры.Найти(ИмяПараметра,"ИмяПараметра");
			Если СтрокаПараметров <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			СтрокаПараметров = Параметры.Найти("#" + ИмяПараметра,"ИмяПараметра");
			Если СтрокаПараметров <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			СтрокаПараметров = Параметры.Добавить();
			СтрокаПараметров.ИмяПараметра = ИмяПараметра;
			СтрокаПараметров.ЭтоВыражение = Ложь;
			СтрокаПараметров.ТипЗначения = ПараметрЗапроса.ТипЗначения;
			СтрокаПараметров.ЗначениеПараметра = ПараметрЗапроса.ТипЗначения.ПривестиЗначение(СтрокаПараметров.ЗначениеПараметра);
		КонецЦикла;
	КонецЕсли;

	Если ОбновитьНастройки Тогда
		УстановитьТипЗапроса();
	КонецЕсли; 
	Возврат Истина;

КонецФункции // ПолучитьПараметрыИзЗапроса()

Функция ОбновитьКомпоновщик(ТекстЗапроса, ПоказыватьОшибки = Ложь)

	Успех = Истина;
	мМассивВременныхТаблицКомпоновщика = Новый Массив;
	Попытка
		ТекстЗапроса = ирПлатформа.ЗамаскироватьВременныеТаблицы(мОбъектЗапроса, ТекстЗапроса, мМассивВременныхТаблицКомпоновщика);
	Исключение
		ТекстЗапроса = "";
		Если ПоказыватьОшибки Тогда
			// Баг платформы. Зависает приложение, если пытаемся установить выделение на невидимой странице.
			ТекущийЭлемент = ЭлементыФормы.ТекстЗапроса;
		
			ЛксПоказатьОшибкуВЗапросеИлиПрограммномКоде(ЭлементыФормы.ТекстЗапроса, , , Истина, МодальныйРежим,
				ИнформацияОбОшибке());
		КонецЕсли;
	КонецПопытки;
	мНаборДанных.Запрос = ТекстЗапроса;
	Попытка
		Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(мСхемаКомпоновки));
		ФлагМаскировкиАвтоупорядочивание = Ложь;
	Исключение
		// Печальная ситуация. Кривость платформы привела к такому коду.
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ОписаниеОшибки = ИнформацияОбОшибке.Причина.Причина.Причина.Причина.Описание;
		Диагноз = ЛксПолучитьПоследнийФрагмент(ОписаниеОшибки, "<<?>>");
		МаркерАвтоупорядочивание = "АВТОУПОРЯДОЧИВАНИЕ";
		Если Диагноз = МаркерАвтоупорядочивание Тогда
			Координаты = ЛксПолучитьМассивИзСтрокиСРазделителем(ЛксПолучитьСтрокуМеждуМаркерами(ОписаниеОшибки, "{(", ")}"), ",");
			СлужебноеПолеТекстовогоДокумента.УстановитьТекст(ТекстЗапроса);
			СлужебноеПолеТекстовогоДокумента.УстановитьГраницыВыделения(Число(Координаты[0]), Число(Координаты[1]),
				Число(Координаты[0]), Число(Координаты[1]) + СтрДлина(МаркерАвтоупорядочивание));
			СлужебноеПолеТекстовогоДокумента.ВыделенныйТекст = "";
			мНаборДанных.Запрос = СлужебноеПолеТекстовогоДокумента.ПолучитьТекст();
			ФлагМаскировкиАвтоупорядочивание = Истина;
			Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(мСхемаКомпоновки));
		Иначе
			Успех = Ложь;
			Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Новый СхемаКомпоновкиДанных));
			Если ПоказыватьОшибки Тогда
				// Баг платформы. Зависает приложение, если пытаемся установить выделение на невидимой странице.
				ТекущийЭлемент = ЭлементыФормы.ТекстЗапроса;
			
				ЛксПоказатьОшибкуВЗапросеИлиПрограммномКоде(ЭлементыФормы.ТекстЗапроса, , , Истина, МодальныйРежим,
					ИнформацияОбОшибке.Причина.Причина.Причина.Причина);
			КонецЕсли;
		КонецЕсли;
	КонецПопытки;
	Компоновщик.Восстановить();
	Возврат Успех;

КонецФункции // ОбновитьКомпоновщик()

Функция ОбновитьПостроитель(ТекстЗапроса, ПоказыватьОшибки = Ложь)

	Успех = Истина;
	мМассивВременныхТаблицКомпоновщика = Новый Массив;
	Попытка
		ТекстЗапроса = ирПлатформа.ЗамаскироватьВременныеТаблицы(мОбъектЗапроса, ТекстЗапроса, мМассивВременныхТаблицКомпоновщика);
	Исключение
		ТекстЗапроса = "";
		Успех = Ложь;
		Если ПоказыватьОшибки Тогда
			// Баг платформы. Зависает приложение, если пытаемся установить выделение на невидимой странице.
			ТекущийЭлемент = ЭлементыФормы.ТекстЗапроса;
			
			ЛксПоказатьОшибкуВЗапросеИлиПрограммномКоде(ЭлементыФормы.ТекстЗапроса, , , Истина, МодальныйРежим,
				ИнформацияОбОшибке());
		КонецЕсли;
	КонецПопытки;
	//ВосстанавливатьПорядок = (Построитель.Порядок.Количество() > 0);
	ВосстанавливатьПорядок = Ложь;
	СтарыеНастройки = Построитель.ПолучитьНастройки(Истина, ВосстанавливатьПорядок, Ложь, Ложь, Ложь);
	Попытка
		
		Построитель.Текст = ТекстЗапроса;
		Построитель.ЗаполнитьНастройки();
		Построитель.УстановитьНастройки(СтарыеНастройки, Истина, ВосстанавливатьПорядок, Ложь, Ложь, Ложь);
	Исключение
		Успех = Ложь;
		Если ПоказыватьОшибки Тогда
			// Баг платформы. Зависает приложение, если пытаемся установить выделение на невидимой странице.
			ТекущийЭлемент = ЭлементыФормы.ТекстЗапроса;
			
			ЛксПоказатьОшибкуВЗапросеИлиПрограммномКоде(ЭлементыФормы.ТекстЗапроса, , , Истина, МодальныйРежим,
				ИнформацияОбОшибке());
		КонецЕсли;
	КонецПопытки;
	Возврат Успех;

КонецФункции // ОбновитьПостроитель()

// Обработчик нажатия кнопки командной панели "Дополнить из запроса"
//
Процедура КоманднаяПанельФормыПолучитьИзЗапроса(Кнопка)
	
	// Истина или Ложь - здесь спорный вопрос
	мОбъектЗапроса.Текст = вПолучитьТекстЗапроса(Истина);
	Если Не ПолучитьПараметрыИзЗапроса() Тогда 
		Возврат;
	КонецЕсли;
		
КонецПроцедуры

Функция СкопироватьТекущийПодзапросВНовыйЗапрос(Смещение = Неопределено)

	ТекстПодзапроса = вПолучитьТекстЗапроса(Истина);
	ИмяПодзапроса = ЭлементыФормы.ДеревоЗапроса.ТекущаяСтрока.Имя;
	вСохранитьЗапросТекущейСтроки();
	ТекущаяСтрока = ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока;
	Если ТекущаяСтрока.Родитель <> Неопределено Тогда
		КоллекцияСтрокДерева = ТекущаяСтрока.Родитель.Строки;
	Иначе
		КоллекцияСтрокДерева = ТекущаяСтрока.Владелец().Строки;
	КонецЕсли;
	Если Смещение = Неопределено Тогда
		НоваяСтрокаЗапроса = КоллекцияСтрокДерева.Добавить();
	Иначе
		НоваяСтрокаЗапроса = КоллекцияСтрокДерева.Вставить(КоллекцияСтрокДерева.Индекс(ТекущаяСтрока) + Смещение);
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(НоваяСтрокаЗапроса, ТекущаяСтрока);
	НоваяСтрокаЗапроса.ТекстЗапроса = ТекстПодзапроса;
	НоваяСтрокаЗапроса.Запрос = ИмяПодзапроса;
	Возврат НоваяСтрокаЗапроса;

КонецФункции // СкопироватьТекущийПодзапросВНовыйЗапрос()

Процедура МенюДереваЗапросаСкопироватьВНовыйЗапрос(Кнопка = Неопределено)
	
	НоваяСтрокаЗапроса = СкопироватьТекущийПодзапросВНовыйЗапрос(-1);
	ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока = НоваяСтрокаЗапроса;
	
КонецПроцедуры

Процедура ПараметрыЗначениеПараметраНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = ЭлементыФормы.Параметры.ТекущиеДанные;
	Если ТекущиеДанные.ЭтоВыражение = Истина Тогда
		ОбработкаВводаФормулы = Обработки.ирВводВыраженияВнутреннегоЯзыка.Создать();
		ОбработкаВводаФормулы.Инициализировать(ЭтаФорма, ТекущиеДанные.ЗначениеПараметра);
		ФормаВводаВыражения = ОбработкаВводаФормулы.ПолучитьФорму(, ЭтаФорма);
		ФормаВводаВыражения.Открыть();
	КонецЕсли;
	
	Если Не ТекущиеДанные.НеИспользоватьОграничениеТипа Тогда
		Если ТекущиеДанные.ЭтоВыражение = Ложь Тогда
			Элемент.ОграничениеТипа = ТекущиеДанные.ТипЗначения;
		ИначеЕсли ТекущиеДанные.ЭтоВыражение = 2 Тогда 
			Элемент.Значение.ТипЗначения = ТекущиеДанные.ТипЗначения;
		КонецЕсли;
	Иначе
		Если ТекущиеДанные.ЭтоВыражение = 2 Тогда 
			Элемент.Значение.ТипЗначения = Новый ОписаниеТипов;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПараметрыТипЗначенияПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.Параметры.ТекущиеДанные;
	Если Не ТекущиеДанные.НеИспользоватьОграничениеТипа Тогда
		Если ЭлементыФормы.Параметры.ТекущиеДанные.ЭтоВыражение = Ложь Тогда 
			ТекущиеДанные.ЗначениеПараметра = ТекущиеДанные.ТипЗначения.ПривестиЗначение(ЭлементыФормы.Параметры.ТекущиеДанные.ЗначениеПараметра); 
		ИначеЕсли ЭлементыФормы.Параметры.ТекущиеДанные.ЭтоВыражение = 2 Тогда
			ЭлементыФормы.Параметры.ТекущиеДанные.ЗначениеПараметра.ТипЗначения = ТекущиеДанные.ТипЗначения;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПараметрыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = ЭлементыФормы.Параметры.ТекущиеДанные;
	Если НоваяСтрока Тогда 
		ТекущиеДанные.ЭтоВыражение = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПараметрыЭтоВыражениеОчистка(Элемент, СтандартнаяОбработка)
	
	Отказ = Истина;
	
КонецПроцедуры

Процедура ПараметрыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Перем ЭлементСписка;
	
	ЭлементСписка = Элемент.Колонки.ЭтоВыражение.ЭлементУправления.СписокВыбора.НайтиПоЗначению(ДанныеСтроки.ЭтоВыражение);
	
	Если ЭлементСписка <> Неопределено Тогда 
		ОформлениеСтроки.Ячейки.ЭтоВыражение.Текст = ЭлементСписка.Представление;
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельПараметрыОчистить(Кнопка)
	
	Параметры.Очистить();

КонецПроцедуры

Процедура ПоказатьТекстПодзапроса()

	ТекущаяСтрока = ЭлементыФормы.ДеревоЗапроса.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		ТекстЗапроса = ТекущаяСтрока.Текст;
		ЭлементыФормы.ТекстЗапроса.УстановитьТекст(ТекстЗапроса);
	КонецЕсли; 

КонецПроцедуры

Процедура СоздатьВременныеТаблицы(СтрокаДереваЗапроса)

	// Создадим служебные временные таблицы
	Для Каждого ДочерняяСтрока Из СтрокаДереваЗапроса.Строки Цикл
		Если ДочерняяСтрока.ТипУзла = "<InUnion>" Тогда 
			Продолжить;
		КонецЕсли;
		Если ДочерняяСтрока.ТипУзла <> "<FromUnion>" Тогда 
			СоздатьВременныеТаблицы(ДочерняяСтрока);
		Иначе
			ВременныйПостроительЗапроса = Новый ПостроительЗапроса;
			Попытка
				ТекстЗапроса = ирПлатформа.ЗамаскироватьВременныеТаблицы(мОбъектЗапроса, РазвернутьВложенныеЗапросы(ДочерняяСтрока));
			Исключение
				// Баг платформы. Зависает приложение, если пытаемся установить выделение на невидимой странице.
				ТекущийЭлемент = ЭлементыФормы.ТекстЗапроса;
				
				ЛксПоказатьОшибкуВЗапросеИлиПрограммномКоде(ЭлементыФормы.ТекстЗапроса, , , Истина, МодальныйРежим,
					ИнформацияОбОшибке());
				Возврат;
			КонецПопытки;
			Попытка 
				ВременныйПостроительЗапроса.Текст = ТекстЗапроса;
			Исключение
				// Сюда попадаем в случае временной таблицы без псевдонима
				ЛксСообщитьСУчетомМодальности("Возможно в запросе присутствуют временные таблицы без псевдонимов. "
					+ "Корректная работа программы возможна только при наличии у каждой временной таблицы псевдонима",
					МодальныйРежим, СтатусСообщения.Внимание);
				Продолжить;
			КонецПопытки;
			ВременныйПостроительЗапроса.ЗаполнитьНастройки();
			КоллекцияПолей = Новый Массив;
			Для Каждого ВыбранноеПоле Из ВременныйПостроительЗапроса.ВыбранныеПоля Цикл
				ДоступноеПоле = ЛксНайтиПолеНастройкиПоПутиКДанным(ВременныйПостроительЗапроса.ДоступныеПоля, ВыбранноеПоле.ПутьКДанным);
				Поле = Новый Структура;
				Поле.Вставить("Имя", ВыбранноеПоле.Имя);
				Поле.Вставить("ТипЗначения", ДоступноеПоле.ТипЗначения);
				КоллекцияПолей.Добавить(Поле);
			КонецЦикла;
			мОбъектЗапроса.Текст = ЛксПолучитьЗапросИмитаторКоллекцииПолей(КоллекцияПолей) + " ПОМЕСТИТЬ " + ДочерняяСтрока.Псевдоним;
			мОбъектЗапроса.Выполнить();
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // СоздатьВременныеТаблицы()


Процедура ДеревоЗапросаПриАктивизацииСтроки(Элемент = Неопределено)
	
	Перем НачальнаяСтрока, НачальнаяКолонка, КонечнаяСтрока, КонечнаяКолонка; 
	
	Элемент = ЭлементыФормы.ДеревоЗапроса;
	Если мТекущаяСтрокаДереваЗапроса <> Неопределено Тогда
		ЭлементыФормы.ТекстЗапроса.ПолучитьГраницыВыделения(НачальнаяСтрока, НачальнаяКолонка, КонечнаяСтрока, КонечнаяКолонка);
		мТекущаяСтрокаДереваЗапроса.ТекущееВыделение = Новый Структура("НачальнаяСтрока, НачальнаяКолонка, КонечнаяСтрока, КонечнаяКолонка",
			НачальнаяСтрока, НачальнаяКолонка, КонечнаяСтрока, КонечнаяКолонка);
			
		УничтожитьВременныеТаблицыПодзапроса(мТекущаяСтрокаДереваЗапроса);
	КонецЕсли;
	
	ТекущаяСтрока = Элемент.ТекущаяСтрока;
	
	ДоступностьКомандПодзапроса = Истина
		И ТекущаяСтрока <> Неопределено
		И (Ложь
			Или ТекущаяСтрока.ТипУзла = "<FromUnion>"
			//Или ТекущаяСтрока.ТипУзла = "<InUnion>"
			);
	КнопкиПодменю = ЭлементыФормы.МенюДереваЗапроса.Кнопки.МенюСтруктурыЗапроса.Кнопки;
	КнопкиПодменю.ПеренестиВНовыйЗапрос.Доступность = ДоступностьКомандПодзапроса;
	
	ДоступностьКомандТаблицы = Истина
		И ТекущаяСтрока <> Неопределено
		И (Ложь
			Или ТекущаяСтрока.ТипУзла = "<ChooseTable>"
			Или ТекущаяСтрока.ТипУзла = "<FromUnion>"
			Или ТекущаяСтрока.ТипУзла = "<SelectRoot>");
	КнопкиПодменю = ЭлементыФормы.МенюДереваЗапроса.Кнопки.МенюСтруктурыЗапроса.Кнопки;
	КнопкиПодменю.ПреобразоватьВПодзапрос.Доступность = ДоступностьКомандТаблицы;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Баг платформы
	ТекущийЭлемент = ЭлементыФормы.ТекстЗапроса;
	
	ПоказатьТекстПодзапроса();
	
	мТекущаяСтрокаДереваЗапроса = ТекущаяСтрока;
	ТекущееВыделение = мТекущаяСтрокаДереваЗапроса.ТекущееВыделение;
	Если ТекущееВыделение <> Неопределено Тогда
		ЭлементыФормы.ТекстЗапроса.УстановитьГраницыВыделения(ТекущееВыделение.НачальнаяСтрока, ТекущееВыделение.НачальнаяКолонка,
			ТекущееВыделение.КонечнаяСтрока, ТекущееВыделение.КонечнаяКолонка);
	КонецЕсли;
	
	Если РежимСворачивания Тогда
		СоздатьВременныеТаблицы(мТекущаяСтрокаДереваЗапроса);
	КонецЕсли;
	
КонецПроцедуры // ДеревоЗапросаПриАктивизацииСтроки()

Процедура УстановитьДоступностьКнопокКоманднойПанели(Кнопки, Доступность)
	
	Для Каждого Кнопка Из Кнопки Цикл 
		Если Кнопка.ТипКнопки = ТипКнопкиКоманднойПанели.Действие Тогда
			Если Кнопка.ИзменяетДанные Тогда
				Кнопка.Доступность = Доступность;
			КонецЕсли;
		ИначеЕсли Кнопка.ТипКнопки = ТипКнопкиКоманднойПанели.Подменю Тогда
			УстановитьДоступностьКнопокКоманднойПанели(Кнопка.Кнопки, Доступность);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаблокироватьРедактированиеТекстаЗапроса(Флаг)

	ЭлементыФормы.ТекстЗапроса.ТолькоПросмотр = Флаг;
	УстановитьДоступностьКнопокКоманднойПанели(ЭлементыФормы.КоманднаяПанельТекстЗапроса.Кнопки, Не Флаг);
	ЭлементыФормы.КоманднаяПанельТекстЗапроса.Кнопки.Изменить.Доступность = Флаг;
	ЭлементыФормы.ДеревоЗапросов.ТолькоПросмотр = Не Флаг Или мРежимРедактора;
	УстановитьДоступностьКнопокКоманднойПанели(ЭлементыФормы.КоманднаяПанельФормы.Кнопки, Флаг);
	ЭлементыФормы.ДеревоЗапросов.Доступность = Флаг;
	ЭлементыФормы.ДеревоЗапроса.Доступность = Флаг;
	Если Флаг Тогда
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.РежимДереваЗапроса.Доступность = Истина;
	КонецЕсли;
	РежимРедактирования = Не Флаг;
	
КонецПроцедуры

Процедура ДеревоЗапросаВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элемент.ТекущаяСтрока;
	СтандартнаяОбработка = Ложь;
	ВыполнитьЗапрос();
	
КонецПроцедуры

// Проверяет корректность текущего подзапроса.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//   Булево - корректность запроса.
//
Функция ПроверитьТекстПодзапроса()

	ТекстЗапроса = ЭлементыФормы.ТекстЗапроса.ПолучитьТекст();
	Если ЭлементыФормы.ДеревоЗапроса.ТекущаяСтрока.ТипУзла = "<ChooseTable>" Тогда
		ТекстЗапроса = "ВЫБРАТЬ * ИЗ " + ТекстЗапроса + " КАК ВложенныйЗапрос";
	КонецЕсли;
	ТекущийПодзапрос = ЭлементыФормы.ДеревоЗапроса.ТекущаяСтрока;
	СтартоваяСтрока = 0;
	Если ТекущийПодзапрос <> Неопределено Тогда
		ТекущийПодзапрос = ТекущийПодзапрос.Родитель;
		Пока Истина
			И ТекущийПодзапрос <> Неопределено
			И ТекущийПодзапрос.ТипУзла <> "<FromUnion>"
			И ТекущийПодзапрос.ТипУзла <> "<InUnion>"
		Цикл
			ТекущийПодзапрос = ТекущийПодзапрос.Родитель;
		КонецЦикла;
		Если ТекущийПодзапрос <> Неопределено Тогда
			ТекстЗапроса = "ВЫБРАТЬ * ИЗ (" + Символы.ПС + ТекстЗапроса + Символы.ПС + ") КАК ВложенныйЗапрос";
			СтартоваяСтрока = -1;
		КонецЕсли;
	КонецЕсли;
	мОбъектЗапроса.Текст = ТекстЗапроса;
	Возврат ПолучитьПараметрыИзЗапроса(Ложь, , СтартоваяСтрока);
	
КонецФункции // ПроверитьТекстПодзапроса()

Функция КоманднаяПанельТекстЗапросаЗакончитьРедактирование(Кнопка = Неопределено, НовыйРежимСворачивания = Неопределено)
	
	СтрокаДанных = Неопределено;
	ТекущийПодзапрос = ЭлементыФормы.ДеревоЗапроса.ТекущаяСтрока;
	Если РежимРедактирования Тогда
		Если Не ПроверитьТекстПодзапроса() Тогда 
			Если Кнопка = Неопределено Тогда 
				Ответ = Вопрос("Обнаружена ошибка в тексте подзапроса. Продолжить не сохраняя изменения?", РежимДиалогаВопрос.ОКОтмена);
				Если Ответ = КодВозвратаДиалога.ОК Тогда 
					ЭлементыФормы.ТекстЗапроса.УстановитьТекст(ТекущийПодзапрос.Текст);
				КонецЕсли;
				Если Ответ = КодВозвратаДиалога.Отмена Тогда 
					Возврат Ложь;
				КонецЕсли;
			Иначе
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ПутьВДереве = ЛксПолучитьСтрокуПутиВДереве(ТекущийПодзапрос, "Псевдоним");
	СвернутыйТекстНовогоПодзапроса = ЭлементыФормы.ТекстЗапроса.ПолучитьТекст();
	РазвернутыйТекстНовогоПодзапроса = РазвернутьВложенныеЗапросы(ТекущийПодзапрос, СвернутыйТекстНовогоПодзапроса);
	СлужебноеПолеТекстовогоДокумента.УстановитьТекст(ТекстЗапросаДерева);
	СтрокаДанных = ТекущийПодзапрос.СтрокаДанных;
	Если РежимРедактирования Тогда
		Если СтрокаДанных <> Неопределено Тогда
			СтрокаДанных = ТекущийПодзапрос.СтрокаДанных;
			СлужебноеПолеТекстовогоДокумента.УстановитьГраницыВыделения(
				СтрокаДанных.НачальнаяСтрока,
				СтрокаДанных.НачальнаяКолонка,
				СтрокаДанных.КонечнаяСтрока,
				СтрокаДанных.КонечнаяКолонка);
			Если Ложь
				Или ТекущийПодзапрос.ТипУзла = "<InUnion>"
				Или ТекущийПодзапрос.ТипУзла = "<FromUnion>"
			Тогда
				СлужебноеПолеТекстовогоДокумента.ВыделенныйТекст = "(" + РазвернутыйТекстНовогоПодзапроса + ")";
			Иначе
				СлужебноеПолеТекстовогоДокумента.ВыделенныйТекст = РазвернутыйТекстНовогоПодзапроса;
			КонецЕсли;
		Иначе
			СлужебноеПолеТекстовогоДокумента.УстановитьТекст(РазвернутыйТекстНовогоПодзапроса);
		КонецЕсли;
		мОбъектЗапроса.Текст = СлужебноеПолеТекстовогоДокумента.ПолучитьТекст();
		// **** Этот же блок можно выполнить по результату РазобратьТекстЗапроса()
		Попытка
			ПараметрыЗапроса = мОбъектЗапроса.НайтиПараметры();
		Исключение
			ЛксСообщитьСУчетомМодальности("Сохранение изменений невозможно, т.к. они приводят к ошибкам в вышестоящих подзапросах:"
				+ Символы.ПС + ОписаниеОшибки(), МодальныйРежим, СтатусСообщения.Важное);
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;

	ОчиститьДеревоЗапроса();
	Если НовыйРежимСворачивания <> Неопределено Тогда
		РежимСворачивания = НовыйРежимСворачивания;
	КонецЕсли;
	СтарыйОбработчик = ЭлементыФормы.ДеревоЗапроса.ПолучитьДействие("ПриАктивизацииСтроки");
	ЭлементыФормы.ДеревоЗапроса.УстановитьДействие("ПриАктивизацииСтроки", Неопределено);
	РазобратьТекстЗапроса(СлужебноеПолеТекстовогоДокумента);
	НоваяТекущаяСтрока = ЛксНайтиПоСтрокеПутиВДереве(ДеревоЗапроса, "Псевдоним", ПутьВДереве);
	Если НоваяТекущаяСтрока <> ДеревоЗапроса Тогда 
		ЭлементыФормы.ДеревоЗапроса.ТекущаяСтрока = НоваяТекущаяСтрока;
	КонецЕсли;
	ДеревоЗапросаПриАктивизацииСтроки();
	ЭлементыФормы.ДеревоЗапроса.УстановитьДействие("ПриАктивизацииСтроки", СтарыйОбработчик);
	Если НовыйРежимСворачивания = Неопределено Тогда
		ЗаблокироватьРедактированиеТекстаЗапроса(Истина);
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

Процедура КоманднаяПанельТекстЗапросаОтменитьРедактирование(Кнопка)
	
	ПоказатьТекстПодзапроса();
	ЗаблокироватьРедактированиеТекстаЗапроса(Истина);
	
КонецПроцедуры

Процедура КоманднаяПанельТекстЗапросаИзменить(Кнопка = Неопределено)
	
	ЗаблокироватьРедактированиеТекстаЗапроса(Ложь);
	ЭлементыФормы.КоманднаяПанельФормы.Кнопки.РежимДереваЗапроса.Доступность = Ложь;
	
КонецПроцедуры

Процедура КоманднаяПанельФормыРежимДереваЗапроса(Кнопка = Неопределено)
	
	Если Кнопка = Неопределено Тогда
		Кнопка = ЭлементыФормы.КоманднаяПанельФормы.Кнопки.РежимДереваЗапроса;
	КонецЕсли;
	Если Парсер = Неопределено Тогда
		Если Не ИнициализироватьПарсерЗапроса() Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	Если Кнопка.Пометка Тогда 
		Если ДеревоЗапроса.Строки.Количество() > 0 Тогда 
			ЭлементыФормы.ТекстЗапроса.УстановитьТекст(РазвернутьВложенныеЗапросы(ДеревоЗапроса.Строки[0], ТекстЗапросаДерева));
		КонецЕсли;
	КонецЕсли;
	
	ОчиститьДеревоЗапроса();
	Если Не Кнопка.Пометка Тогда 
		Если Не РазобратьТекстЗапроса(ЭлементыФормы.ТекстЗапроса) Тогда 
			Возврат;
		КонецЕсли;
		ЗаблокироватьРедактированиеТекстаЗапроса(Истина);
	Иначе
		ЭлементыФормы.ТекстЗапроса.ТолькоПросмотр = Ложь;
		УстановитьДоступностьКнопокКоманднойПанели(ЭлементыФормы.КоманднаяПанельТекстЗапроса.Кнопки, Истина);
		ЭлементыФормы.КоманднаяПанельТекстЗапроса.Кнопки.ЗакончитьРедактирование.Доступность = Ложь;
		ЭлементыФормы.КоманднаяПанельТекстЗапроса.Кнопки.ОтменитьРедактирование.Доступность = Ложь;
		РежимРедактирования = Ложь;
	КонецЕсли;
		
	РежимДереваЗапроса = Не Кнопка.Пометка;
	Кнопка.Пометка = РежимДереваЗапроса;
	
	ЭлементыФормы.КоманднаяПанельТекстЗапроса.Кнопки.Изменить.Доступность = РежимДереваЗапроса;
	//ЭлементыФормы.КоманднаяПанельТекстЗапроса.Кнопки.Сворачивать.Доступность = РежимДереваЗапроса;
	ЭлементыФормы.КоманднаяПанельФормы.Кнопки.УдалитьВременныеТаблицы.Доступность = Не РежимДереваЗапроса;
	
КонецПроцедуры

Процедура КоманднаяПанельФормыНоваяКонсоль(Кнопка)
	
	НоваяКонсоль = ЛксПолучитьМенеджер(ЭтотОбъект).Создать();
	НоваяКонсоль.ПолучитьФорму().Открыть();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПАРСЕР

Функция ИнициализироватьПарсерЗапроса()

	Парсер = ирПлатформа.мПолучитьПарсер("ГрамматикаЯзыкаЗапросов");
	Если Парсер <> Неопределено Тогда 
		ДеревоЗапроса.Колонки.Добавить("СтрокаДанных");
		ДеревоЗапроса.Колонки.Добавить("ТекущееВыделение");
		ДеревоЗапроса.Колонки.Добавить("Псевдоним");
	КонецЕсли;
	Возврат Парсер <> Неопределено;

КонецФункции // ИнициализироватьПарсерЗапроса()

Функция ПолучитьГраничныйТерминалПравила(Сокращение, ИндексГраницы = 0)

	НовыйУзел = Неопределено;
	НовыеДанные = Сокращение;
	Пока НовыеДанные <> Неопределено Цикл 
		Данные = НовыеДанные;
		Узел = НовыйУзел;
		НовыеДанные = Неопределено;
		НовыйУзел = Неопределено;
		Для Сч1 = 1 По Данные.TokenCount Цикл
			Если ИндексГраницы = 1  Тогда
				УзелКандидат = Данные.Tokens(Данные.TokenCount - Сч1);
			Иначе
				УзелКандидат = Данные.Tokens(Сч1 - 1);
			КонецЕсли; 
			Если ТипЗнч(УзелКандидат.Data) = Тип("Строка") Тогда
				Узел = УзелКандидат;
				НовыеДанные = Неопределено;
				Прервать;
			КонецЕсли;
			Если ТипЗнч(УзелКандидат.Data) = Тип("COMОбъект") Тогда
				Если УзелКандидат.Data.TokenCount > 0 Тогда
					НовыйУзел = УзелКандидат;
					НовыеДанные = УзелКандидат.Data;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Возврат Узел;

КонецФункции // ПолучитьГраничныйТерминалПравила()

Функция РазобратьТекстЗапроса(ПолеТекстовогоДокумента, СтроитьДеревоЗапроса = Истина)
	
	Если Парсер = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстЗапроса = ПолеТекстовогоДокумента.ПолучитьТекст();
	мОбъектЗапроса.Текст = ТекстЗапроса;
	Если Не ПолучитьПараметрыИзЗапроса(, Ложь) Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Состояние("Идет анализ текста запроса...");
	
	Если СтроитьДеревоЗапроса Тогда 
		СлужебноеПолеТекстовогоДокумента.УстановитьТекст(ТекстЗапроса);
		ТаблицаКоординат.Очистить();
	КонецЕсли;
	
	gpMsgTokenRead			= 1;
	gpMsgReduction			= 2;
	gpMsgAccept				= 3;
	gpMsgNotLoadedError		= 4;
	gpMsgLexicalError		= 5;
	gpMsgSyntaxError 		= 6;
	gpMsgCommentError		= 7;
	gpMsgInternalError		= 8;
	gpMsgCommentBlockRead	= 9;
	gpMsgCommentLineRead	= 10;
	
	Парсер.OpenTextString(ТекстЗапроса);

	Закончили = Ложь;

	Пока Не Закончили Цикл 
		Ответ = Парсер.Parse();
		Если Ответ = gpMsgLexicalError Тогда
			Парсер.PopInputToken();
			Закончили = Истина;
			ЛксСообщитьСУчетомМодальности(ПолучитьКоординатыВТекстеЗапроса(ПолеТекстовогоДокумента) + "Ошибка лексического анализатора!",
				МодальныйРежим, СтатусСообщения.Важное);
			ПоказатьТекущиеКоординаты();
		ИначеЕсли Ответ = gpMsgSyntaxError Тогда
			ЛксСообщитьСУчетомМодальности(ПолучитьКоординатыВТекстеЗапроса(ПолеТекстовогоДокумента) + ": Синтаксическая ошибка """ 
				+ Парсер.CurrentToken().Data + """"
				//+ ", ожидается: " + ПолучитьСтрокуОжидаемыхТокенов()
				, МодальныйРежим, СтатусСообщения.Важное);
			Парсер.PushInputToken(Парсер.Tokens(0));
			ПоказатьТекущиеКоординаты();
			Закончили = Истина;
		ИначеЕсли Ответ = gpMsgReduction Тогда
		ИначеЕсли Ответ = gpMsgAccept Тогда
			Закончили = Истина;
		ИначеЕсли Ответ = gpMsgCommentError Тогда
		ИначеЕсли Ответ = gpMsgTokenRead Тогда
		ИначеЕсли Ответ = gpMsgInternalError Тогда
			Закончили = Истина;
		ИначеЕсли Ответ = gpMsgNotLoadedError Тогда
			Закончили = Истина;
		ИначеЕсли Ответ = gpMsgCommentBlockRead Тогда
		ИначеЕсли Ответ = gpMsgCommentLineRead Тогда
		КонецЕсли;
	КонецЦикла;
	
	Если СтроитьДеревоЗапроса Тогда 
		ПостроитьНисходящееЗапросы(ДеревоЗапроса, Парсер.CurrentReduction);
		Если ДеревоЗапроса.Строки.Количество() > 0 Тогда
			ОбработатьДеревоЗапроса(ДеревоЗапроса.Строки[0], ДеревоЗапроса.Строки[0].СтрокаДанных.НачальнаяСтрока,
				ДеревоЗапроса.Строки[0].СтрокаДанных.НачальнаяКолонка);
			ДеревоЗапроса.Строки.Сортировать("Порядок Убыв", Истина);
			ПолеТекстовогоДокумента.УстановитьГраницыВыделения(1, 1, 1, 1);
			ЭлементыФормы.ДеревоЗапроса.ТекущаяСтрока = ДеревоЗапроса.Строки[0];
			ЭлементыФормы.ДеревоЗапроса.Развернуть(ДеревоЗапроса.Строки[0], Истина);
			ТекстЗапросаДерева = ТекстЗапроса;
		КонецЕсли;
	КонецЕсли;
	Состояние();
	Возврат (Ответ = gpMsgAccept);
	
КонецФункции // РазобратьТекстЗапроса

Процедура ПоказатьТекущиеКоординаты()

	// Баг платформы
	ТекущийЭлемент = ЭлементыФормы.ТекстЗапроса;
	
	ЭлементыФормы.ТекстЗапроса.УстановитьГраницыВыделения(Парсер.CurrentLineNumber(), 1,
		Парсер.CurrentLineNumber(), 1024);

КонецПроцедуры // ПоказатьКоординаты()

Функция ПолучитьКоординатыВТекстеЗапроса(ПолеТекстовогоДокумента)
	
	Возврат ЛксПолучитьПредставлениеИзИдентификатора(ПолеТекстовогоДокумента.Имя)
		+ ": Строка " + Парсер.CurrentLineNumber() + ": {(" + Парсер.CurrentLineNumber() + "," + Парсер.CurrentColumnNumber() + ")}";
		
КонецФункции // ПолучитьКоординатыВТекстеЗапроса()

Функция ПолучитьСтрокуОжидаемыхТокенов()

	СтрокаОжидаемыхТокенов = "";
	Для й = 0 по Парсер.TokenCount() - 1 Цикл
		Токен = Парсер.Tokens(й);
		СтрокаОжидаемыхТокенов = СтрокаОжидаемыхТокенов + ", " + Токен.Text;
	КонецЦикла;
	Возврат Сред(СтрокаОжидаемыхТокенов, 3);

КонецФункции // ПолучитьСтрокуОжидаемыхТокенов()

Функция ПостроитьНисходящееЗапросы(СтрокаДерева, Данные, ЭтоВыборТаблицы = Ложь, ПсевдонимСверху = Неопределено)
	
	Если Данные = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	СтрокаВниз = СтрокаДерева;
	РодительскоеПравило = Данные.ParentRule.RuleNonterminal.Text;
	СоздатьУзелСразу = Ложь
		Или ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений")
		Или РодительскоеПравило = "<CreateUnion>"
		Или РодительскоеПравило = "<SelectUnion>"
		Или РодительскоеПравило = "<SimpleUnion>"
		Или (Истина
			И СтрокаДерева.ТипУзла = "<Packet>"
			И РодительскоеПравило <> "<Packet>")
		Или (Истина
			И (Ложь 
				Или РодительскоеПравило = "<SelectQuery>"
				Или РодительскоеПравило = "<CreateQuery>"
				Или РодительскоеПравило = "<Query>")
			И (Ложь
				Или СтрокаДерева.ТипУзла = "<Packet>"
				Или СтрокаДерева.ТипУзла = "<SelectUnion>"
				Или СтрокаДерева.ТипУзла = "<CreateUnion>"
				Или СтрокаДерева.ТипУзла = "<SimpleUnion>"))
		;
	Если СоздатьУзелСразу Тогда 
		НоваяСтрока = СтрокаДерева.Строки.Добавить();
		НоваяСтрока.ТипУзла = РодительскоеПравило;
		СтрокаВниз = НоваяСтрока;
	КонецЕсли;
	Если Ложь
		//Или (Истина
		//	И СтрокаВниз.Имя = ""
		//	И (Ложь
		//		Или СтрокаВниз.Родитель = Неопределено
		//		Или СтрокаВниз.Родитель.ТипУзла = "<Packet>"))
		//Или РодительскоеПравило = "<Packet>"
		Или СоздатьУзелСразу
		Или РодительскоеПравило = "<EmbededQuery>"
		Или (Истина
			И РодительскоеПравило = "<Packet>"
			И СтрокаВниз.ТипУзла <> "<Packet>")
		Или (Истина
			И РодительскоеПравило = "<TableName>"
			И СтрокаВниз.ТипУзла = "<ChooseTable>")
		Или (Истина
			И ЭтоВыборТаблицы
			И РодительскоеПравило = "<TableAS>")
	Тогда
		Если Не ЗначениеЗаполнено(СтрокаВниз.Имя) Тогда 
			Если Ложь
				Или СтрокаВниз.Родитель = Неопределено
				Или СтрокаВниз.Родитель.ТипУзла = "<Packet>"
			Тогда 
				СтрокаВниз.Имя = "Запрос";
			КонецЕсли;
			Если РодительскоеПравило = "<Packet>" Тогда 
				СтрокаВниз.Имя = "Пакет";
			ИначеЕсли РодительскоеПравило = "<EmbededQuery>" Тогда 
				СтрокаВниз.Имя = "Подзапрос";
			ИначеЕсли Ложь
				Или РодительскоеПравило = "<SelectUnion>"
				Или РодительскоеПравило = "<CreateUnion>"
				Или РодительскоеПравило = "<SimpleUnion>"
			Тогда 
				СтрокаВниз.Имя = "Объединение";
			ИначеЕсли Ложь
				Или РодительскоеПравило = "<SelectQuery>"
				Или РодительскоеПравило = "<CreateQuery>"
				Или РодительскоеПравило = "<Query>"
			Тогда
				СтрокаВниз.Имя = "Выборка";
			КонецЕсли;
		КонецЕсли;
		СтрокаВниз.Псевдоним = СтрокаВниз.Имя;
		
		ИмяПравила = Данные.ParentRule.RuleNonterminal.Text;
		СтрокаЗапроса = ТаблицаКоординат.Добавить();
		НачальныйТокен = ПолучитьГраничныйТерминалПравила(Данные, 0);
		СтрокаЗапроса.НачальнаяКолонка = НачальныйТокен.ColumnNumber;
		СтрокаЗапроса.НачальнаяСтрока = НачальныйТокен.LineNumber;
		КонечныйТокен = ПолучитьГраничныйТерминалПравила(Данные, 1);
		СтрокаЗапроса.КонечнаяКолонка = КонечныйТокен.ColumnNumber + СтрДлина(КонечныйТокен.Data);
		СтрокаЗапроса.КонечнаяСтрока = КонечныйТокен.LineNumber;

		Порядок = ТаблицаКоординат.Индекс(СтрокаЗапроса);
		СтрокаВниз.СтрокаДанных = СтрокаЗапроса;
		СтрокаВниз.Порядок = Порядок;
		СлужебноеПолеТекстовогоДокумента.УстановитьГраницыВыделения(
			СтрокаЗапроса.НачальнаяСтрока, СтрокаЗапроса.НачальнаяКолонка, СтрокаЗапроса.КонечнаяСтрока, СтрокаЗапроса.КонечнаяКолонка);
		Текст = СлужебноеПолеТекстовогоДокумента.ВыделенныйТекст;
		Текст = СокрЛП(Текст);
		Если РодительскоеПравило = "<EmbededQuery>" Тогда 
			СтрокаВниз.Текст = Сред(Текст, 2, СтрДлина(Текст) - 2);
		Иначе 
			СтрокаВниз.Текст = Текст;
		КонецЕсли;
	КонецЕсли;
	Если Не СоздатьУзелСразу Тогда 
		Если Ложь
			Или РодительскоеПравило = "<FromUnion>"
			Или РодительскоеПравило = "<InUnion>"
			Или РодительскоеПравило = "<ChooseTable>"
		Тогда 
			НоваяСтрока = СтрокаДерева.Строки.Добавить();
			НоваяСтрока.ТипУзла = РодительскоеПравило;
			СтрокаВниз = НоваяСтрока;
		КонецЕсли;
	КонецЕсли;
	Псевдоним = ПсевдонимСверху;
	Для ИндексТокена = 0 По Данные.TokenCount - 1 Цикл
		Токен = Данные.Tokens(Данные.TokenCount - 1 - ИндексТокена);
		Если Токен.Kind = 0 Тогда
			// Не терминальный токен
			ПсевдонимСнизу = ПостроитьНисходящееЗапросы(СтрокаВниз, Токен.Data,
				((Данные.TokenCount - 1 - ИндексТокена) = 0) И (РодительскоеПравило = "<ChooseTable>"), Псевдоним);
			Если ПсевдонимСнизу <> Неопределено Тогда 
				Если Ложь
					Или РодительскоеПравило = "<FromUnion>"
					Или РодительскоеПравило = "<ChooseTable>"
				Тогда 
					НоваяСтрока.Имя = ПсевдонимСнизу;
				ИначеЕсли Ложь
					Или РодительскоеПравило = "<Into>"
					Или РодительскоеПравило = "<DropRoot>"
				Тогда
					СтрокаТекущегоЗапроса = СтрокаВниз;
					//Пока Истина
					//	И СтрокаТекущегоЗапроса.Родитель <> Неопределено
					//	И СтрокаТекущегоЗапроса.Родитель.ТипУзла <> "<Packet>"
					//Цикл 
					//	СтрокаТекущегоЗапроса = СтрокаТекущегоЗапроса.Родитель;
					//КонецЦикла;
					КорневаяСтрока = СтрокаТекущегоЗапроса;
					КорневаяСтрока.ТипУзла = РодительскоеПравило;
					Если РодительскоеПравило = "<DropRoot>" Тогда
						КорневаяСтрока.Имя = "Удаление_" + ПсевдонимСнизу;
					Иначе
						КорневаяСтрока.Имя = "Создание_" + ПсевдонимСнизу;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Ложь
			Или РодительскоеПравило = "<TableID>"
			Или (Истина
				И Не ЭтоВыборТаблицы
				И РодительскоеПравило = "<TableAS>")
		Тогда 
			ПсевдонимВверх = Токен.Data;
		КонецЕсли;
	КонецЦикла;
	Возврат ПсевдонимВверх;
	
КонецФункции

Процедура СвернутьПодзапросы(СтрокаДерева, НачальнаяСтрока, НачальнаяКолонка)

	Если Ложь
		Или СтрокаДерева.ТипУзла = "<InUnion>"
		Или СтрокаДерева.ТипУзла = "<FromUnion>"
	Тогда
		СтрокаДанных = СтрокаДерева.СтрокаДанных;
		Если НачальнаяСтрока = СтрокаДанных.НачальнаяСтрока Тогда 
			лНачальнаяКолонка = НачальнаяКолонка;
		Иначе
			лНачальнаяКолонка = 1;
		КонецЕсли;
		Если СтрокаДанных.КонечнаяСтрока = СтрокаДанных.НачальнаяСтрока Тогда
			лКонечнаяКолонка = лНачальнаяКолонка;
		Иначе
			лКонечнаяКолонка = 1;
		КонецЕсли;
		СлужебноеПолеТекстовогоДокумента.УстановитьГраницыВыделения(
			СтрокаДанных.НачальнаяСтрока - НачальнаяСтрока + 1,
			СтрокаДанных.НачальнаяКолонка - лНачальнаяКолонка + 1,
			СтрокаДанных.КонечнаяСтрока - НачальнаяСтрока + 1,
			СтрокаДанных.КонечнаяКолонка - лКонечнаяКолонка + 1);
		Если СтрокаДерева.ТипУзла = "<InUnion>" Тогда
			мОбъектЗапроса.УстановитьПараметр("_" + СтрокаДерева.Имя + "_",);
			СлужебноеПолеТекстовогоДокумента.ВыделенныйТекст = "(&" + СтрокаДерева.Псевдоним + ")";
		ИначеЕсли СтрокаДерева.ТипУзла = "<FromUnion>" Тогда
			СлужебноеПолеТекстовогоДокумента.ВыделенныйТекст = СтрокаДерева.Псевдоним;
		КонецЕсли;
	Иначе
		Для Каждого ДочерняяСтрока Из СтрокаДерева.Строки Цикл
			СвернутьПодзапросы(ДочерняяСтрока, НачальнаяСтрока, НачальнаяКолонка);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // СвернутьПодзапросы()

Процедура ОбработатьДеревоЗапроса(СтрокаДерева, НачальнаяСтрока = 1, НачальнаяКолонка = 1)

	// Нормализация динамических имен
	МассивДинамическихИмен = ЛксБыстрыйМассив("Выборка", "Подзапрос", "Запрос");
	Для Каждого ДинамическоеИмя Из МассивДинамическихИмен Цикл
		СтрокиДинамическогоИмени = СтрокаДерева.Строки.НайтиСтроки(Новый Структура("Имя", ДинамическоеИмя));
		ВГраница = СтрокиДинамическогоИмени.ВГраница();
		Для Счетчик = 0 По ВГраница Цикл
			ДочерняяСтрока = СтрокиДинамическогоИмени[ВГраница - Счетчик];
			ДочерняяСтрока.Имя = ДочерняяСтрока.Имя + Строка(Счетчик + 1);
		КонецЦикла;
	КонецЦикла;
	Для Каждого ДочерняяСтрока Из СтрокаДерева.Строки Цикл
		ПсевдонимПодзапроса = "_" + СтрокаДерева.Имя + "_" + ДочерняяСтрока.Имя + "_";
		ДочерняяСтрока.Псевдоним = ПсевдонимПодзапроса;
		СтрокаДанных = ДочерняяСтрока.СтрокаДанных;
		Если Ложь
			Или ДочерняяСтрока.ТипУзла = "<InUnion>"
			Или ДочерняяСтрока.ТипУзла = "<FromUnion>"
		Тогда
			СмещениеКолонки = 1;
		Иначе
			СмещениеКолонки = 0;
		КонецЕсли;
		Если СтрокаДанных = Неопределено Тогда
			// ВЫБРАТЬ * ИЗ &ТТ
			Продолжить;
		КонецЕсли;
		ОбработатьДеревоЗапроса(ДочерняяСтрока, СтрокаДанных.НачальнаяСтрока, СтрокаДанных.НачальнаяКолонка + СмещениеКолонки);
	КонецЦикла;
	
	Если Не РежимСворачивания Тогда
		Возврат;
	КонецЕсли;
	СлужебноеПолеТекстовогоДокумента.УстановитьТекст(СтрокаДерева.Текст);
	Для Каждого ДочерняяСтрока Из СтрокаДерева.Строки Цикл
		СвернутьПодзапросы(ДочерняяСтрока, НачальнаяСтрока, НачальнаяКолонка);
	КонецЦикла;
	СтрокаДерева.Текст = СлужебноеПолеТекстовогоДокумента.ПолучитьТекст();

КонецПроцедуры // ОбработатьДеревоЗапроса()

Процедура лРазвернутьВложенныеПодзапросы(Текст, СтрокаДерева)

	Если Ложь
		Или СтрокаДерева.ТипУзла = "<InUnion>"
		Или СтрокаДерева.ТипУзла = "<FromUnion>"
	Тогда
		Если СтрокаДерева.ТипУзла = "<InUnion>" Тогда
			Текст = СтрЗаменить(Текст, "(&" + СтрокаДерева.Псевдоним + ")", "(" + РазвернутьВложенныеЗапросы(СтрокаДерева) + ")");
		ИначеЕсли СтрокаДерева.ТипУзла = "<FromUnion>" Тогда
			Текст = СтрЗаменить(Текст, СтрокаДерева.Псевдоним, "(" + РазвернутьВложенныеЗапросы(СтрокаДерева) + ")");
		КонецЕсли;
	Иначе
		Для Каждого СубДочерняяСтрока Из СтрокаДерева.Строки Цикл
			лРазвернутьВложенныеПодзапросы(Текст, СубДочерняяСтрока);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // лРазвернутьВложенныеПодзапросы()

Функция РазвернутьВложенныеЗапросы(СтрокаДерева, Текст = "")
	
	Если Текст = "" Тогда 
		Текст = СтрокаДерева.Текст;
	КонецЕсли; 
	Если РежимСворачивания Тогда 
		Для Каждого ДочерняяСтрока Из СтрокаДерева.Строки Цикл
			лРазвернутьВложенныеПодзапросы(Текст, ДочерняяСтрока);
		КонецЦикла;
	КонецЕсли;
	Возврат Текст;

КонецФункции // РазвернутьВложенныеЗапросы()

Процедура ДеревоЗапросаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОформлениеСтроки.Ячейки.Имя.ОтображатьКартинку = Истина;
	Если ДанныеСтроки.ТипУзла = "<FromUnion>" Тогда 
		ОформлениеСтроки.Ячейки.Имя.ИндексКартинки = 0;
	ИначеЕсли ДанныеСтроки.ТипУзла = "<InUnion>" Тогда 
		ОформлениеСтроки.Ячейки.Имя.ИндексКартинки = 1;
	ИначеЕсли ДанныеСтроки.ТипУзла = "<Into>" Тогда 
		ОформлениеСтроки.Ячейки.Имя.ИндексКартинки = 13;
	ИначеЕсли ДанныеСтроки.ТипУзла = "<DropRoot>" Тогда 
		ОформлениеСтроки.Ячейки.Имя.ИндексКартинки = 26;
	ИначеЕсли Ложь 
		Или ДанныеСтроки.ТипУзла = "<SelectUnion>"
		Или ДанныеСтроки.ТипУзла = "<CreateUnion>"
		Или ДанныеСтроки.ТипУзла = "<SimpleUnion>"
	Тогда 
		ОформлениеСтроки.Ячейки.Имя.ИндексКартинки = 16;
	ИначеЕсли Ложь
		Или ДанныеСтроки.ТипУзла = "<SelectQuery>"
		Или ДанныеСтроки.ТипУзла = "<CreateQuery>"
	Тогда 
		ОформлениеСтроки.Ячейки.Имя.ИндексКартинки = 15;
	ИначеЕсли ДанныеСтроки.ТипУзла = "<Query>" Тогда 
		ОформлениеСтроки.Ячейки.Имя.ИндексКартинки = 15;
	ИначеЕсли ДанныеСтроки.ТипУзла = "<ChooseTable>" Тогда 
		ТипТаблицы = ЛксПолучитьПервыйФрагмент(ДанныеСтроки.Текст);
		Если ЛксЛиКорневойТипОбъектаБД(ТипТаблицы) Тогда
			ПолноеИмяТаблицы = ЛксПолучитьПервыйФрагмент(ДанныеСтроки.Текст, "(");
			МассивФрагментов = ЛксПолучитьМассивИзСтрокиСРазделителем(ПолноеИмяТаблицы);
			Если МассивФрагментов.Количество() = 3 Тогда
				ОформлениеСтроки.Ячейки.Имя.ИндексКартинки = 20;
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		ОформлениеСтроки.Ячейки.Имя.ИндексКартинки = 14;
		Если ТипТаблицы = "Константы" Тогда
			ОформлениеСтроки.Ячейки.Имя.ИндексКартинки = 2;
		ИначеЕсли ТипТаблицы = "Справочник" Тогда
			ОформлениеСтроки.Ячейки.Имя.ИндексКартинки = 3;
		ИначеЕсли ТипТаблицы = "Перечисление" Тогда
			ОформлениеСтроки.Ячейки.Имя.ИндексКартинки = 4;
		ИначеЕсли ТипТаблицы = "Документ" Тогда
			ОформлениеСтроки.Ячейки.Имя.ИндексКартинки = 5;
		ИначеЕсли ТипТаблицы = "ЖурналДокументов" Тогда
			ОформлениеСтроки.Ячейки.Имя.ИндексКартинки = 6;
		ИначеЕсли ТипТаблицы = "Последовательность" Тогда
			ОформлениеСтроки.Ячейки.Имя.ИндексКартинки = 7;
		ИначеЕсли ТипТаблицы = "РегистрНакопления" Тогда
			ОформлениеСтроки.Ячейки.Имя.ИндексКартинки = 8;
		ИначеЕсли ТипТаблицы = "РегистрСведений" Тогда
			ОформлениеСтроки.Ячейки.Имя.ИндексКартинки = 9;
		ИначеЕсли ТипТаблицы = "РегистрБухгалтерии" Тогда
			ОформлениеСтроки.Ячейки.Имя.ИндексКартинки = 10;
		ИначеЕсли ТипТаблицы = "РегистрРасчета" Тогда
			ОформлениеСтроки.Ячейки.Имя.ИндексКартинки = 11;
		ИначеЕсли ТипТаблицы = "ПланОбмена" Тогда
			ОформлениеСтроки.Ячейки.Имя.ИндексКартинки = 19;
		ИначеЕсли ТипТаблицы = "Задача" Тогда
			ОформлениеСтроки.Ячейки.Имя.ИндексКартинки = 17;
		ИначеЕсли ТипТаблицы = "БизнесПроцесс" Тогда
			ОформлениеСтроки.Ячейки.Имя.ИндексКартинки = 18;
		ИначеЕсли ТипТаблицы = "РегистрРасчета" Тогда
			ОформлениеСтроки.Ячейки.Имя.ИндексКартинки = 26;
		ИначеЕсли ТипТаблицы = "ПланВидовРасчета" Тогда
			ОформлениеСтроки.Ячейки.Имя.ИндексКартинки = 25;
		ИначеЕсли ТипТаблицы = "ПланВидовХарактеристик" Тогда
			ОформлениеСтроки.Ячейки.Имя.ИндексКартинки = 22;
		ИначеЕсли ТипТаблицы = "Перечисление" Тогда
			ОформлениеСтроки.Ячейки.Имя.ИндексКартинки = 23;
		ИначеЕсли ТипТаблицы = "ПланСчетов" Тогда
			ОформлениеСтроки.Ячейки.Имя.ИндексКартинки = 24;
		КонецЕсли;
	КонецЕсли;
		
	
КонецПроцедуры

Функция КоманднаяПанельТекстЗапросаСворачивать(Кнопка = Неопределено)
	
	Кнопка = ЭлементыФормы.КоманднаяПанельТекстЗапроса.Кнопки.Сворачивать;
	Если Не РежимДереваЗапроса Тогда
		Кнопка.Пометка = Не Кнопка.Пометка;
		РежимСворачивания = Кнопка.Пометка;
		Возврат Истина;
	Иначе
		НовыйРежимСворачивания = Не Кнопка.Пометка;
		Если КоманднаяПанельТекстЗапросаЗакончитьРедактирование(, НовыйРежимСворачивания) Тогда 
			Кнопка.Пометка = НовыйРежимСворачивания;
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли; 
	
КонецФункции

Процедура ПараметрыЗначениеПараметраОчистка(Элемент, СтандартнаяОбработка)
	
	Если ЭлементыФормы.Параметры.ТекущаяСтрока.ЭтоВыражение = 2 Тогда
		СтандартнаяОбработка = Ложь;
		ЭлементыФормы.Параметры.ТекущаяСтрока.ЗначениеПараметра.Очистить();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПараметрыЗначениеПараметраПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.Параметры.ТекущиеДанные;
	ТекущиеДанные.ПредставлениеПараметра = Строка(ТекущиеДанные.ЗначениеПараметра);
	ТекущиеДанные.ВнутреннееЗначение     = ЗначениеВСтрокуВнутр(ТекущиеДанные.ЗначениеПараметра);
	
КонецПроцедуры

Процедура ПанельЗапросаПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = ЭлементыФормы.ПанельЗапроса.Страницы.Индекс(ЭлементыФормы.ПанельЗапроса.Страницы.Настройки) Тогда 
		мОбъектЗапроса.Текст = вПолучитьТекстЗапроса(Истина);
		Если Не ПолучитьПараметрыИзЗапроса() Тогда 
			Возврат;
		КонецЕсли;
		УстановитьТипЗапроса(, Истина, мОбъектЗапроса.Текст);
	КонецЕсли;
	
КонецПроцедуры

Функция УстановитьТипЗапроса(НовыйТип = "", ПоказыватьОшибки = Ложь, ТекстЗапроса = "")

	Если мТекущаяСтрока = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	Если НовыйТип = "" Тогда
		НовыйТип = мТекущаяСтрока.ТипЗапроса;
	КонецЕсли;
	Если НовыйТип = "" Тогда
		НовыйТип = "Построитель";
	КонецЕсли;
	Если мТекущаяСтрока.ТипЗапроса <> НовыйТип Тогда
		Модифицированность = Истина;
	КонецЕсли;
	мТекущаяСтрока.ТипЗапроса = НовыйТип;
	Для Каждого лКнопка Из ЭлементыФормы.КоманднаяПанельФормы.Кнопки.ТипЗапроса.Кнопки Цикл
		лКнопка.Пометка = Ложь;
	КонецЦикла;
	ЭлементыФормы.КоманднаяПанельФормы.Кнопки.ТипЗапроса.Кнопки[НовыйТип].Пометка = Истина;
	Если ТекстЗапроса = "" Тогда
		ТекстЗапроса = вПолучитьТекстЗапроса(Истина);
	КонецЕсли;
	БезОшибок = Истина;
	
	Если ирПлатформа.ВерсияПлатформы >= 8001011 Тогда
		МассивСоздаваемыхВременныхТаблиц = ПолучитьМассивСоздаваемыхВременныхТаблицПакета();
		Если МассивСоздаваемыхВременныхТаблиц.Количество() > 0 Тогда
			ИмяВременнойТаблицы = МассивСоздаваемыхВременныхТаблиц[МассивСоздаваемыхВременныхТаблиц.ВГраница()];
			Если ИмяВременнойТаблицы <> Неопределено Тогда
				ТекстЗапроса = ТекстЗапроса + Символы.ПС + "; ВЫБРАТЬ * ИЗ " + ИмяВременнойТаблицы;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если НовыйТип = "Компоновка" Тогда
		БезОшибок = ОбновитьКомпоновщик(ТекстЗапроса, ПоказыватьОшибки);
	ИначеЕсли НовыйТип = "Построитель" Тогда
		БезОшибок = ОбновитьПостроитель(ТекстЗапроса, ПоказыватьОшибки);
	КонецЕсли;
	Если ПолеТекстовогоДокументаСКонтекстнойПодсказкой <> Неопределено Тогда
		ПолеТекстовогоДокументаСКонтекстнойПодсказкой.ТекстЗапроса.РежимКомпоновкиДанных = (НовыйТип = "Компоновка");
	КонецЕсли;
	ЭлементыФормы.ПанельНастройки.ТекущаяСтраница = ЭлементыФормы.ПанельНастройки.Страницы[НовыйТип];
	Возврат БезОшибок;

КонецФункции // УстановитьТипЗапроса()

Процедура ИзменитьТипЗапроса(Кнопка)
	
	УстановитьТипЗапроса(Кнопка.Имя);
	 
КонецПроцедуры

Функция ПолучитьМассивСоздаваемыхВременныхТаблицПакета()

	МассивТаблиц = ирПлатформа.ПолучитьМассивСоздаваемыхВременныхТаблицПакета(мОбъектЗапроса.Текст);
	Возврат МассивТаблиц;

КонецФункции // ПолучитьМассивСоздаваемыхВременныхТаблицПакета()

Функция ПолучитьРезультирующийЗапрос(пЗапрос)

	ТекстЗапроса = мОбъектЗапроса.Текст;
	МассивСоздаваемыхВременныхТаблиц = ПолучитьМассивСоздаваемыхВременныхТаблицПакета();

	Если мТекущаяСтрока.ТипЗапроса = "Компоновка" Тогда 
		//Если ирПлатформа.ВерсияПлатформы >= 8001012 Тогда
		//	Компоновщик.Настройки.Структура.Очистить();
		//	ЭлементСтруктуры = Компоновщик.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		//	ЭлементСтруктуры.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		//	Компоновщик.Настройки.Выбор.Элементы.Очистить();
		//	Для Каждого ДоступноеПоле Из Компоновщик.Настройки.ДоступныеПоляВыбора.Элементы Цикл
		//		// Чтобы пропустить системные папки
		//		Если Не ДоступноеПоле.Папка Тогда
		//			НовоеВыбранноеПоле = Компоновщик.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		//			НовоеВыбранноеПоле.Поле = ДоступноеПоле.Поле;
		//			НовоеВыбранноеПоле.Использование = Истина;
		//		КонецЕсли;
		//	КонецЦикла;
		//	//КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		//	//Попытка
		//	//	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(мСхемаКомпоновки, Компоновщик.Настройки, , ,
		//	//		Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		//	//	КомпоновкаУдалась = Истина;
		//	//Исключение
		//	//	// Исключение может произойти в случае удаления временной таблицы
		//	//	КомпоновкаУдалась = Ложь;
		//	//	ИнформацияОбОшибке = ИнформацияОбОшибке();
		//	//КонецПопытки;
		//Иначе
			//// Установим использование параметров
			//Для Каждого ЭлементПараметра Из Компоновщик.Настройки.ПараметрыДанных.Элементы Цикл
			//	ЭлементПараметра.Использование = Истина;
			//КонецЦикла;
			
			Компоновщик.Настройки.УсловноеОформление.Элементы.Очистить();
			ЭлементОформления = Компоновщик.Настройки.УсловноеОформление.Элементы.Добавить();
			Для Каждого ДоступноеПоле Из Компоновщик.Настройки.ДоступныеПоляВыбора.Элементы Цикл
				// Чтобы пропустить системные папки
				Если Не ДоступноеПоле.Папка Тогда
					НовыйЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					НовыйЭлементОтбора.ЛевоеЗначение = ДоступноеПоле.Поле;
					НовыйЭлементОтбора.Использование = Истина;
				КонецЕсли;
			КонецЦикла;
			
		//КонецЕсли;
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		Попытка
			МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(мСхемаКомпоновки, Компоновщик.Настройки);
			КомпоновкаУдалась = Истина;
		Исключение
			// Исключение может произойти в случае создания/удаления временной таблицы
			КомпоновкаУдалась = Ложь;
			ИнформацияОбОшибке = ИнформацияОбОшибке();
		КонецПопытки;
		Если КомпоновкаУдалась Тогда
			Если МакетКомпоновкиДанных.НаборыДанных.Количество() > 0 Тогда
				ТекстЗапроса = МакетКомпоновкиДанных.НаборыДанных[0].Запрос;
				Для Каждого лПараметр Из МакетКомпоновкиДанных.ЗначенияПараметров Цикл
					Если Параметры.Найти(лПараметр.Имя, "ИмяПараметра") <> Неопределено Тогда
						Продолжить;
					КонецЕсли;
					пЗапрос.УстановитьПараметр(лПараметр.Имя, лПараметр.Значение);
				КонецЦикла;
				Если МассивСоздаваемыхВременныхТаблиц.Количество() > 0 Тогда
					ИмяВременнойТаблицы = МассивСоздаваемыхВременныхТаблиц[МассивСоздаваемыхВременныхТаблиц.ВГраница()];
				КонецЕсли;
				Если Не ЗначениеЗаполнено(ИмяВременнойТаблицы) Тогда 
					СтрокаПорядка = ЛксПолучитьСтрокуПорядкаКомпоновки(Компоновщик.Настройки.Порядок);
					Если ЗначениеЗаполнено(СтрокаПорядка) Тогда
						Если Найти(ТекстЗапроса, "УПОРЯДОЧИТЬ ПО") = 0 Тогда
							ТекстЗапроса = ТекстЗапроса + Символы.ПС + "УПОРЯДОЧИТЬ ПО";
						Иначе
							ТекстЗапроса = ТекстЗапроса + ", ";
						КонецЕсли;
						ТекстЗапроса = ТекстЗапроса + Символы.ПС + Символы.Таб + СтрокаПорядка;
					КонецЕсли;
					Если ФлагМаскировкиАвтоупорядочивание = Истина Тогда
						ТекстЗапроса = ТекстЗапроса + Символы.ПС + "АВТОУПОРЯДОЧИВАНИЕ";
					КонецЕсли;
				КонецЕсли;
			Иначе
				// Такое происходит если нет ни одного запроса на выборку
			КонецЕсли; 
		КонецЕсли;
	ИначеЕсли мТекущаяСтрока.ТипЗапроса = "Построитель" Тогда 
		Попытка
			ЗапросИзПостроителя = Построитель.ПолучитьЗапрос();
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			//ЛксПоказатьОшибкуВЗапросеИлиПрограммномКоде(ЭлементыФормы.ТекстЗапроса,,,, МодальныйРежим, ИнформацияОбОшибке);
			Возврат МассивСоздаваемыхВременныхТаблиц;
		КонецПопытки;
		Если ЗапросИзПостроителя.Текст <> "" Тогда
			ТекстЗапроса = ЗапросИзПостроителя.Текст;
			Для Каждого лПараметр Из ЗапросИзПостроителя.Параметры Цикл
				Если Параметры.Найти(лПараметр.Ключ, "ИмяПараметра") <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				пЗапрос.УстановитьПараметр(лПараметр.Ключ, лПараметр.Значение);
			КонецЦикла;
		Иначе
			// Такое происходит если нет ни одного запроса на выборку
		КонецЕсли;
	КонецЕсли;
	пЗапрос.Текст = ирПлатформа.РазмаскироватьВременныеТаблицы(ТекстЗапроса, мМассивВременныхТаблицКомпоновщика);
	
	Возврат МассивСоздаваемыхВременныхТаблиц;

КонецФункции // ПолучитьРезультирующийЗапрос()

Процедура КоманднаяПанельФормыИсполняемыйЗапрос(Кнопка)
	
	// @@@@ Тут доделать в 8.1.11
	мОбъектЗапроса.Текст = вПолучитьТекстЗапроса(Истина);
	
	лЗапрос = Новый Запрос;
	ЗаполнитьЗначенияСвойств(лЗапрос, мОбъектЗапроса, "Текст, МенеджерВременныхТаблиц");
	
	Если Не ПолучитьПараметрыИзЗапроса() Тогда 
		Возврат;
	КонецЕсли;
	
	// @@@@ Тут еще перед выполнением запроса обработчик 
	УстановитьПараметрыЗапроса(лЗапрос);
		
	ПолучитьРезультирующийЗапрос(лЗапрос);
	Обработки.ирКонсольЗапросов.Создать().ОткрытьДляОтладки(лЗапрос, мТекущаяСтрока.ТипЗапроса, мТекущаяСтрока.Запрос + "- Исполняемый");
	
КонецПроцедуры

Процедура МенюДереваЗапросаПеренестиВНовыйЗапрос(Кнопка)
	
	вСохранитьЗапросТекущейСтроки();
	ПутьВДеревеЗапроса = ЛксПолучитьСтрокуПутиВДереве(мТекущаяСтрокаДереваЗапроса, "Псевдоним");
	СтараяСтрокаДереваЗапросов = мТекущаяСтрока;
	ТекстЗапроса = СтараяСтрокаДереваЗапросов.ТекстЗапроса;
	СтрокаДанных = мТекущаяСтрокаДереваЗапроса.СтрокаДанных;
	СлужебноеПолеТекстовогоДокумента.УстановитьТекст(ТекстЗапроса);
	СлужебноеПолеТекстовогоДокумента.УстановитьГраницыВыделения(
		СтрокаДанных.НачальнаяСтрока,
		СтрокаДанных.НачальнаяКолонка,
		СтрокаДанных.КонечнаяСтрока,
		СтрокаДанных.КонечнаяКолонка);
	СлужебноеПолеТекстовогоДокумента.ВыделенныйТекст = мТекущаяСтрокаДереваЗапроса.Имя + " ";
	НовыйТекстСтарогоЗапроса = СлужебноеПолеТекстовогоДокумента.ПолучитьТекст();
	НоваяСтрокаЗапроса = СкопироватьТекущийПодзапросВНовыйЗапрос(-1);
	НоваяСтрокаЗапроса.Запрос = "*" + НоваяСтрокаЗапроса.Запрос;
	ТекстЗапросаПоместить = ирПлатформа.ДобавитьПредложениеПоместитьВЗапрос(НоваяСтрокаЗапроса.ТекстЗапроса, мТекущаяСтрокаДереваЗапроса.Имя);
	НоваяСтрокаЗапроса.ТекстЗапроса = ТекстЗапросаПоместить;
	ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока = НоваяСтрокаЗапроса;
	ВыполнитьЗапрос();
	СтараяСтрокаДереваЗапросов.ТекстЗапроса = НовыйТекстСтарогоЗапроса;
	ЭлементыФормы.ДеревоЗапросов.ТекущаяСтрока = СтараяСтрокаДереваЗапросов;
	ЭлементыФормы.ДеревоЗапроса.ТекущаяСтрока = ЛксНайтиПоСтрокеПутиВДереве(ДеревоЗапроса, "Псевдоним", ПутьВДеревеЗапроса);
	
КонецПроцедуры

Процедура МенюДереваЗапросаПреобразоватьВПодзапрос(Кнопка)
	
	вСохранитьЗапросТекущейСтроки();
	ПутьВДеревеЗапроса = ЛксПолучитьСтрокуПутиВДереве(мТекущаяСтрокаДереваЗапроса, "Псевдоним");
	СтрокаДанных = мТекущаяСтрокаДереваЗапроса.СтрокаДанных;
	СлужебноеПолеТекстовогоДокумента.УстановитьТекст(ТекстЗапросаДерева);
	СлужебноеПолеТекстовогоДокумента.УстановитьГраницыВыделения(
	СтрокаДанных.НачальнаяСтрока,
	СтрокаДанных.НачальнаяКолонка,
	СтрокаДанных.КонечнаяСтрока,
	СтрокаДанных.КонечнаяКолонка);
	НовыйВыделенныйТекст = РазвернутьВложенныеЗапросы(ЭлементыФормы.ДеревоЗапроса.ТекущаяСтрока, мТекущаяСтрокаДереваЗапроса.Текст);
	ТипУзла = мТекущаяСтрокаДереваЗапроса.ТипУзла;
	Если ТипУзла = "<ChooseTable>" Тогда
		НовыйВыделенныйТекст = "(ВЫБРАТЬ * ИЗ " + НовыйВыделенныйТекст + " КАК " + мТекущаяСтрокаДереваЗапроса.Имя + ") ";
	ИначеЕсли ТипУзла = "<FromUnion>" Тогда 
		НовыйВыделенныйТекст = "(ВЫБРАТЬ * ИЗ (" + НовыйВыделенныйТекст + ") КАК " + мТекущаяСтрокаДереваЗапроса.Имя + ") ";
	ИначеЕсли ТипУзла = "<SelectRoot>" Тогда 
		НовыйВыделенныйТекст = "ВЫБРАТЬ * ИЗ (" + НовыйВыделенныйТекст + ") КАК " + мТекущаяСтрокаДереваЗапроса.Имя;
	КонецЕсли;
	СлужебноеПолеТекстовогоДокумента.ВыделенныйТекст = НовыйВыделенныйТекст;
	
	// Данная проверка нужна только для корня
	мОбъектЗапроса.Текст = СлужебноеПолеТекстовогоДокумента.ПолучитьТекст();
	Если Не ПолучитьПараметрыИзЗапроса(Ложь, Ложь) Тогда 
		Возврат;
	КонецЕсли;
	
	ОчиститьДеревоЗапроса();
	РазобратьТекстЗапроса(СлужебноеПолеТекстовогоДокумента);
	ЭлементыФормы.ДеревоЗапроса.ТекущаяСтрока = ЛксНайтиПоСтрокеПутиВДереве(ДеревоЗапроса, "Псевдоним", ПутьВДеревеЗапроса);
	
КонецПроцедуры

Процедура ДеревоЗапросовПослеУдаления(Элемент)

	ПриИзмененииДереваЗапросов();
	
КонецПроцедуры

Процедура ПриПолученииДанныхДоступныхПолей(Элемент, ОформленияСтрок)

	ЛксПриПолученииДанныхДоступныхПолейКомпоновки(ОформленияСтрок);

КонецПроцедуры // ПриПолученииДанныхДоступныхПолей()

Процедура ПараметрыПриИзмененииФлажка(Элемент, Колонка)
	
	Если Колонка.Имя = "НеИспользоватьОграничениеТипа" Тогда
		Элемент.Колонки.ЗначениеПараметра.ЭлементУправления.ОграничениеТипа = Новый ОписаниеТипов; 
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельТаблицаКолонки(Кнопка)
	
	Обработки.ирИсследовательОбъектов.Создать().ИсследоватьКоллекцию(РезультатТаблица.Колонки);
	
КонецПроцедуры

Процедура КоманднаяПанельДеревоКолонки(Кнопка)
	
	Обработки.ирИсследовательОбъектов.Создать().ИсследоватьКоллекцию(РезультатДерево.Колонки);
	
КонецПроцедуры

Процедура ОтобразитьПустыеЗначенияВЯчейкахТабличногоПоля(ОформлениеСтроки)

	Для Каждого Ячейка Из ОформлениеСтроки.Ячейки Цикл
		ЗначениеЯчейки = Ячейка.Значение;
		Если Не ЗначениеЗаполнено(ЗначениеЯчейки) Тогда
			Ячейка.УстановитьТекст(ирПлатформа.мПолучитьПредставлениеПустогоЗначения(ЗначениеЯчейки));
			Ячейка.ЦветФона = WebЦвета.Роса;
		КонецЕсли;
	КонецЦикла; 

КонецПроцедуры // ОтобразитьПустыеЗначенияВЯчейкахТабличногоПоля()

Процедура РезультатТаблицаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ЭлементыФормы.КоманднаяПанельТаблица.Кнопки.Пустые.Пометка Тогда
		ОтобразитьПустыеЗначенияВЯчейкахТабличногоПоля(ОформлениеСтроки);
	КонецЕсли; 
	
КонецПроцедуры

Процедура КоманднаяПанельТаблицаПустые(Кнопка)
	
	Кнопка.Пометка = Не Кнопка.Пометка;
	ЭлементыФормы.РезультатТаблица.ОбновитьСтроки();
	
КонецПроцедуры

Процедура КоманднаяПанельДеревоПустые(Кнопка)
	
	Кнопка.Пометка = Не Кнопка.Пометка;
	ЭлементыФормы.РезультатДерево.ОбновитьСтроки();
	
КонецПроцедуры

Процедура РезультатДеревоПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ЭлементыФормы.КоманднаяПанельДерево.Кнопки.Пустые.Пометка Тогда
		ОтобразитьПустыеЗначенияВЯчейкахТабличногоПоля(ОформлениеСтроки);
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельТаблицаШиринаКолонок(Кнопка)
	
	ЛксВвестиИУстановитьШиринуКолонокТабличногоПоля(ЭлементыФормы.РезультатТаблица);
	
КонецПроцедуры

Процедура КоманднаяПанельТаблицаСжатьКолонки(Кнопка)
	
	ЛксСжатьКолонкиТабличногоПоля(ЭлементыФормы.РезультатТаблица);
	
КонецПроцедуры

Процедура КоманднаяПанельДеревоСжатьКолонки(Кнопка)
	
	ЛксСжатьКолонкиТабличногоПоля(ЭлементыФормы.РезультатДерево);
	
КонецПроцедуры

Процедура КоманднаяПанельДеревоШиринаКолонок(Кнопка)
	
	ЛксВвестиИУстановитьШиринуКолонокТабличногоПоля(ЭлементыФормы.РезультатДерево);
	
КонецПроцедуры

Функция ДобавитьПараметрЗначение(ЗначениеПараметра, ИмяПараметра = Неопределено)

	Строки = Параметры.НайтиСтроки(Новый Структура("ЗначениеПараметра", ЗначениеПараметра));
	Если Строки.Количество() > 0 Тогда
		Результат = Строки[0];
	Иначе
		ОбъектМД = ЗначениеПараметра.Метаданные();
		//Префикс = НРег(Лев(ОбъектМД.Имя, 1));
		Префикс = "";
		Если ИмяПараметра = Неопределено Тогда
			ИмяПараметра = "" + ЗначениеПараметра;
		КонецЕсли; 
		ИмяПараметра = Префикс + ирПлатформа.ПолучитьИдентификаторИзПредставления(ИмяПараметра);
		СтруктураСвойствПараметра = Новый Структура;
		СтруктураСвойствПараметра.Вставить("ИмяПараметра", ИмяПараметра);
		
		Счетчик = 0;
		Пока Параметры.НайтиСтроки(СтруктураСвойствПараметра).Количество() > 0 Цикл
			Счетчик = Счетчик + 1;
			СтруктураСвойствПараметра.ИмяПараметра = ИмяПараметра + Счетчик;
		КонецЦикла;
		
		СтруктураСвойствПараметра.Вставить("ЭтоВыражение", Ложь);
		СтруктураСвойствПараметра.Вставить("ЗначениеПараметра", ЗначениеПараметра);
		ЗаполнитьЗначенияСвойств(Параметры.Добавить(), СтруктураСвойствПараметра);
		Результат = СтруктураСвойствПараметра;
	КонецЕсли;
	Возврат Результат;

КонецФункции // ДобавитьПараметрЗначение()

Процедура КоманднаяПанельТекстЗапросаСсылкаНаОбъектБД(Кнопка)
	
	// ++
	//Форма = ирПлатформа.ПолучитьФорму("ФормаВыбораОбъекта", ЭтаФорма, ЭтаФорма);
	Форма = ПолучитьФорму("ирПлатформа_ФормаВыбораОбъекта", ЭтаФорма, ЭтаФорма);
	// --
	Форма.НачальноеЗначениеВыбора = Новый Структура("ОтображатьСсылочныеОбъекты", Истина);
	Результат = Форма.ОткрытьМодально();
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Менеджер = ЛксПолучитьМенеджер(Метаданные.НайтиПоПолномуИмени(Результат.ПолноеИмяОбъекта));
	ФормаВыбора = Менеджер.ПолучитьФормуВыбора();
	ЗначениеПараметра = ФормаВыбора.ОткрытьМодально();
	Если ЗначениеПараметра = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЭтаФорма.Модифицированность = Истина;
	
	СтруктураСвойствПараметра = ДобавитьПараметрЗначение(ЗначениеПараметра);
	ЭтаФорма.ЭлементыФормы.ТекстЗапроса.ВыделенныйТекст = "&" + СтруктураСвойствПараметра.ИмяПараметра;
	
КонецПроцедуры

Процедура МенюДереваЗапросаШагнутьЧерез(Кнопка)
	
	Если Ложь
		Или Не РежимДереваЗапроса
		Или Не СохранитьТекущийПодзапрос()
	Тогда 
		Возврат;
	КонецЕсли;
	ВыполнитьЗапрос();
	ТекущаяСтрокаДереваЗапроса = ЭлементыФормы.ДеревоЗапроса.ТекущаяСтрока;
	РодительУровня = ТекущаяСтрокаДереваЗапроса.Родитель;
	Если РодительУровня = Неопределено Тогда
		РодительУровня = ДеревоЗапроса;
	КонецЕсли; 
	СтрокиУровня = РодительУровня.Строки;
	ТекущийИндекс = СтрокиУровня.Индекс(ТекущаяСтрокаДереваЗапроса);
	Если СтрокиУровня.Количество() = ТекущийИндекс + 1 Тогда
		Возврат;
	КонецЕсли; 
	ЭлементыФормы.ДеревоЗапроса.ТекущаяСтрока = СтрокиУровня[ТекущийИндекс + 1];
	
КонецПроцедуры

Процедура ОбновлениеОтображения()
	
	СоответствиеСтраниц = Новый Соответствие;
	СоответствиеСтраниц.Вставить(ЭлементыФормы.ПанельЗапроса.Страницы.Параметры, ЭлементыФормы.Параметры);
	Для Каждого КлючИЗначение Из СоответствиеСтраниц Цикл
		Страница = КлючИЗначение.Ключ;
		ТабличноеПоле = КлючИЗначение.Значение;
		
		ЗначениеЭУ = ТабличноеПоле.Значение;
		Количество = Неопределено;
		Суффикс = "";
		Попытка
			Количество = ЗначениеЭУ.Количество();
		Исключение
			Попытка
				Количество = ЗначениеЭУ.Элементы.Количество();
				//Суффикс = "*";
			Исключение
				Попытка
					Количество = ЗначениеЭУ.Строки.Количество();
					Суффикс = "*";
				Исключение
				КонецПопытки;
			КонецПопытки;
		КонецПопытки;
		ЛксОбновитьТекстПослеМаркераВСтроке(Страница.Заголовок, , "" + Количество + Суффикс + ")", "(");
	КонецЦикла; 
	
КонецПроцедуры

Процедура КоманднаяПанельТаблицаСравнить(Кнопка)
	
	ЛксСравнитьСодержимоеЭлементаУправления(СравнительТабличныхДокументов, ЭлементыФормы.РезультатТаблица);
	
КонецПроцедуры

Процедура КоманднаяПанель4Код1(Кнопка)
	
	Текст =
	"Объект = СтрокаРезультата.Ссылка.ПолучитьОбъект();
	|Объект.
	|Объект.ОбменДанными.Загрузка = Истина;
	|Объект.Записать();";
	
	ЭлементыФормы.КодОбработкиСтрокиРезультата.УстановитьТекст(Текст);
	
КонецПроцедуры

Процедура КоманднаяПанель3Код2(Кнопка)
	
	Текст =
	"Объект = СтрокаРезультата.Ссылка.ПолучитьОбъект();
	|Объект.ОбменДанными.Загрузка = Истина;
	|Объект.Удалить();";
	
	ЭлементыФормы.КодОбработкиСтрокиРезультата.УстановитьТекст(Текст);
	
КонецПроцедуры

Процедура Надпись2Нажатие(Элемент)
	
	НачалоСтроки  = 0;
	КонецСтроки   = 0;
	НачалоКолонки = 0;
	КонецКолонки  = 0;
	
	ЭлементыФормы.КодОбработкиСтрокиРезультата.ПолучитьГраницыВыделения(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки);
	ЭлементыФормы.КодОбработкиСтрокиРезультата.ВставитьСтроку(НачалоСтроки, "СтрокаРезультата");
	
КонецПроцедуры

Процедура КоманднаяПанель4ВставитьОбработкаРезультата_ОбработкаПроводок(Кнопка)
	
	Текст = 
	"Дерево  = мРезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	|Колво   = Дерево.Строки.Количество();
	|Счетчик = 0;
	|Для каждого Строка1 Из Дерево.Строки Цикл
	|	
	|	Счетчик = Счетчик + 1;
	|	ОбработкаПрерыванияПользователя();
	|	Состояние(Строка(Счетчик) + "" из "" + Строка(Колво) + "" "" + Строка(Строка1.Регистратор));
	|	
	|	НаборЗаписей = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
	|	НаборЗаписей.Отбор.Регистратор.Установить(Строка1.Регистратор);
	|	НаборЗаписей.Прочитать();
	|	
	|	Для каждого Строка2 Из Строка1.Строки Цикл
	|		
	|		Запись = НаборЗаписей[Строка2.НомерСтроки - 1];
	|		
	|		Если Строка2.ДтКт = ""Дт"" Тогда
	|		Иначе
	|		КонецЕсли;	
	|		
	|	КонецЦикла;	
	|	
	|	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	|	НаборЗаписей.Записать();
	|	
	|КонецЦикла;";
	
	ЭлементыФормы.КодОбработкиРезультата.УстановитьТекст(Текст);
	
КонецПроцедуры

Процедура КоманднаяПанель3ОбъектПровести(Кнопка)
	
	Текст =
	"Объект = СтрокаРезультата.Ссылка.ПолучитьОбъект();
	|Объект.Записать(РежимЗаписиДокумента.Проведение);";
	
	ЭлементыФормы.КодОбработкиСтрокиРезультата.УстановитьТекст(Текст);
	
	флПропускатьОшибки = Истина;
	
КонецПроцедуры

Процедура КоманднаяПанель3УдалитьЗаписиРС(Кнопка)
	
	Текст =
	"Запись = РегистрыСведений.ААА.СоздатьМенеджерЗаписи();
	|ЗаполнитьЗначенияСвойств(Запись, СтрокаРезультата);
	|Запись.Удалить();";
	
	ЭлементыФормы.КодОбработкиСтрокиРезультата.УстановитьТекст(Текст);
	
	флПропускатьОшибки = Истина;
	
КонецПроцедуры

Процедура КоманднаяПанель4ОбработкаДокумента(Кнопка)
	
	Текст = 
	"Дерево  = мРезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	|Колво   = Дерево.Строки.Количество();
	|Счетчик = 0;
	|Для каждого Строка1 Из Дерево.Строки Цикл
	|	
	|	Счетчик = Счетчик + 1;
	|	ОбработкаПрерыванияПользователя();
	|	Состояние(Строка(Счетчик) + "" из "" + Строка(Колво) + "" "" + Строка(Строка1.Ссылка));
	|	
	|	ДокументОбъект = Строка1.Ссылка.ПолучитьОбъект();
	|	
	|	Для каждого Строка2 Из Строка1.Строки Цикл
	|		
	|		СтрокаТЧ = ДокументОбъект.Товары[Строка2.НомерСтроки - 1];
	|		
	|		
	|	КонецЦикла;	
	|	
	|	ДокументОбъект.ОбменДанными.Загрузка = Истина;
	|	ДокументОбъект.Записать();
	|	
	|	Если ДокументОбъект.Проведен Тогда
	|	
	|		ДокументОбъект.ОбменДанными.Загрузка = Ложь;
	|		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	|
	|	КонецЕсли;
	|	
	|КонецЦикла;";
	
	ЭлементыФормы.КодОбработкиРезультата.УстановитьТекст(Текст);
	
КонецПроцедуры

Процедура КоманднаяПанель4ОбработкаРегистров(Кнопка)
	
	Текст = 
	"Дерево  = мРезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	|Колво   = Дерево.Строки.Количество();
	|Счетчик = 0;
	|Для каждого Строка1 Из Дерево.Строки Цикл
	|	
	|	Счетчик = Счетчик + 1;
	|	ОбработкаПрерыванияПользователя();
	|	Состояние(Строка(Счетчик) + "" из "" + Строка(Колво) + "" "" + Строка(Строка1.Регистратор));
	|	
	|	НаборЗаписей = РегистрыНакопления.ААА.СоздатьНаборЗаписей();
	|	НаборЗаписей.Отбор.Регистратор.Установить(Строка1.Регистратор);
	|	НаборЗаписей.Прочитать();
	|	
	|	Для каждого Строка2 Из Строка1.Строки Цикл
	|		
	|		Запись = НаборЗаписей[Строка2.НомерСтроки - 1];
	|		
	|		
	|	КонецЦикла;	
	|	
	|	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	|	НаборЗаписей.Записать();
	|	
	|КонецЦикла;";
	
	ЭлементыФормы.КодОбработкиРезультата.УстановитьТекст(Текст);
	
КонецПроцедуры

ирПлатформа    = ПолучитьФорму("ирПлатформа");
ирНеглобальный = ПолучитьФорму("ирНеглобальный");
	
ЛксПодключитьОбработчикиСобытийДоступныхПолейКомпоновки(ЭлементыФормы.КомпоновщикДоступныеПоляОтбора);
ЛксПодключитьОбработчикиСобытийДоступныхПолейКомпоновки(ЭлементыФормы.КомпоновщикДоступныеПоляПорядка);
////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мИмяФайла = "";
мИмяПути = "";
//мРезультатЗапроса = Новый ТаблицаЗначений;

мЗаголовокФормы = Заголовок;
мТекущаяСтрока = НеОпределено;
//мИдетДобавление = Ложь;
мАктивизированаДобавляемаяЗапись = Ложь;

мТаблицаЗагружена = Ложь;
мСводнаяТаблицаЗагружена = Ложь;

ТаблицаКоординат = Новый ТаблицаЗначений;
ТаблицаКоординат.Колонки.Добавить("Правило");
ТаблицаКоординат.Колонки.Добавить("НачальнаяСтрока");
ТаблицаКоординат.Колонки.Добавить("НачальнаяКолонка");
ТаблицаКоординат.Колонки.Добавить("КонечнаяСтрока");
ТаблицаКоординат.Колонки.Добавить("КонечнаяКолонка");

ДеревоЗапросов.Колонки.Добавить("СтрокаДанных");
РежимДереваЗапроса = Ложь;
РежимСворачивания = Истина;
РежимРедактирования = Ложь;
СлужебноеПолеТекстовогоДокумента = ирПлатформа.СлужебноеПолеТекстовогоДокумента;

мСхемаКомпоновки = Новый СхемаКомпоновкиДанных;
ИсточникДанных = ЛксДобавитьЛокальныйИсточникДанных(мСхемаКомпоновки);
мНаборДанных = ЛксДобавитьНаборДанныхЗапрос(мСхемаКомпоновки.НаборыДанных, ИсточникДанных);