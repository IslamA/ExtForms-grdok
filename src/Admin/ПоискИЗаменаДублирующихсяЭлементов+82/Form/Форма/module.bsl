////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мРезультатыПоиска Экспорт;
Перем мМетаданныеОбъекта Экспорт;
Перем мКорневойТипОбъекта Экспорт;
Перем мПутьКДаннымПоляНечеткогоСравнения;
Перем мСтруктураКлючаПоиска;
Перем мСтруктураПредставлений;
Перем мТекущаяГруппа;
Перем мСтрокаРеквизитов;
Перем мСписокРеквизитов;

Перем мФормаИндикатора;
Перем мЗависимыеМетаданные;

Перем мПостроительЗапросаОтбора;


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Процедура ОбновитьТекущуюГруппуРезультатовПоиска()
	
	Если мТекущаяГруппа <> Неопределено Тогда
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("НомерГруппы", мТекущаяГруппа.НомерГруппы);
		МассивСтрок = мРезультатыПоиска.НайтиСтроки(СтруктураПоиска);
		Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
			мРезультатыПоиска.Удалить(СтрокаТаблицы);
		КонецЦикла;
		лЗагрузитьВТаблицуЗначений(ЭлементыТекущейГруппы, мРезультатыПоиска);
		мТекущаяГруппа.КоличествоЭлементовВГруппе = ЭлементыТекущейГруппы.Количество();
	КонецЕсли;
	
КонецПроцедуры // () 

Функция ПолучитьТаблицуРезультатовПоиска(МассивСсылок)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Ссылка";
	Для каждого Реквизит Из мСписокРеквизитов Цикл
		Запрос.Текст = Запрос.Текст + ",
		|ПРЕДСТАВЛЕНИЕ(_Таблица." + Реквизит.Значение + ") КАК Р_" + Реквизит.Значение;
	КонецЦикла;
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	" + ПолноеИмяОбъекта + " КАК _Таблица
	|ГДЕ
	|	_Таблица.Ссылка В(&МассивСсылок)";
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // () 

Процедура ВывестиГруппу(НоваяТекущаяГруппа = Неопределено)
	
	Если НоваяТекущаяГруппа <> Неопределено Тогда
		мТекущаяГруппа = НоваяТекущаяГруппа;
	КонецЕсли;
	ЭлементыТекущейГруппы.Очистить();
	ЭлементыФормы.ЭлементыТекущейГруппы.ТолькоПросмотр = (мТекущаяГруппа = Неопределено);
	Если мТекущаяГруппа = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СоставТекущейГруппы = мРезультатыПоиска.Скопировать(Новый Структура("НомерГруппы", мТекущаяГруппа.НомерГруппы));
	лЗагрузитьВТаблицуЗначений(СоставТекущейГруппы, ЭлементыТекущейГруппы);
	МассивСсылок = ЭлементыТекущейГруппы.ВыгрузитьКолонку("Ссылка");
	РезультатПоиска = ПолучитьТаблицуРезультатовПоиска(МассивСсылок);
	Для Каждого НайденныйОбъект Из ЭлементыТекущейГруппы Цикл
		СтрокаРезультатовПоиска = РезультатПоиска.Найти(НайденныйОбъект.Ссылка, "Ссылка");
		ЗаполнитьЗначенияСвойств(НайденныйОбъект, СтрокаРезультатовПоиска, , "Ссылка");
	КонецЦикла;
	СброситьДоступность();
	ЭлементыФормы.НайденныеГруппы.ТекущаяСтрока = мТекущаяГруппа;
	
КонецПроцедуры

Функция ПолучитьЗначениеНастройки(ИмяНастройки) 
	
	Возврат Неопределено;
	
КонецФункции

Процедура НайтиПоРавенствуРеквизитов(ОтборПоиска)
	
	ПостроительОтчетаПоиска = Новый ПостроительОтчета;
	
	ТекстГДЕ = "";
	ТекстВЫБРАТЬ = "";
	ТекстСГРУППИРОВАТЬ = "";
	ТекстИдексов = "";
	ТекстУсловия = "";
	Для Каждого ПолеСравнения Из ПостроительОтчетаОтбора.Порядок Цикл
		Если ПолеСравнения.ПутьКДанным = "КоличествоЭлементовВГруппе" Тогда
			Продолжить;
		КонецЕсли;
		ИмяПоля = ЛксПолучитьИдентификаторИзСтроки(ПолеСравнения.ПутьКДанным);
		мСтруктураПредставлений.Вставить(ИмяПоля, ПолеСравнения.Представление);
		ТекстИдексов       = ТекстИдексов       + ", " + ИмяПоля;
		ТекстВЫБРАТЬ       = ТекстВЫБРАТЬ       + ", " + ПолеСравнения.ПутьКДанным + " КАК " + ИмяПоля;
		ТекстСГРУППИРОВАТЬ = ТекстСГРУППИРОВАТЬ + ", " + ПолеСравнения.ПутьКДанным;
		ТекстУсловия       = ТекстУсловия       + "И " + ПолеСравнения.ПутьКДанным + " ЕСТЬ НЕ NULL ";
	КонецЦикла;
	мСтруктураКлючаПоиска = Новый Структура(Сред(ТекстИдексов, 2));
	
	ТекстЗапросаПоиска = "
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(Ссылка) КАК КоличествоЭлементовВГруппе" + ТекстВЫБРАТЬ + "
	|{ВЫБРАТЬ КоличествоЭлементовВГруппе" + ТекстИдексов + "}
	|ИЗ " + ПолноеИмяОбъекта + " КАК Объект
	|ГДЕ ИСТИНА " + ТекстУсловия + "
	|{ГДЕ "  + Сред(мСтрокаРеквизитов, 2) + "}
	|СГРУППИРОВАТЬ ПО " + Сред(ТекстСГРУППИРОВАТЬ, 2) + " 
	|{УПОРЯДОЧИТЬ ПО 
	|	0 КАК КоличествоЭлементовВГруппе
	|	" + мСтрокаРеквизитов + "}
	|ИМЕЮЩИЕ КОЛИЧЕСТВО(Ссылка) > 1
	|";
	ПостроительЗапросаПоиска = Новый ПостроительЗапроса;
	ПостроительЗапросаПоиска.Текст = ТекстЗапросаПоиска;
	ЛксСкопироватьОтборСтатический(ПостроительЗапросаПоиска.Отбор, ОтборПоиска, Истина);
	ПостроительЗапросаПоиска.ВыбранныеПоля.Очистить();
	Для Каждого ПолеСравнения Из ПостроительОтчетаОтбора.Порядок Цикл
		ПостроительЗапросаПоиска.ВыбранныеПоля.Добавить(ПолеСравнения.ПутьКДанным, ПолеСравнения.Имя);
	КонецЦикла;
	ПостроительЗапросаПоиска.ВыбранныеПоля.Добавить("КоличествоЭлементовВГруппе");
	ЗапросПоиска = ПостроительЗапросаПоиска.ПолучитьЗапрос();
	ЗапросПоиска.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ЗапросПоиска.Текст = СтрЗаменить(ЗапросПоиска.Текст, Символы.ПС + "ИЗ" + Символы.ПС,
		Символы.ПС + " ПОМЕСТИТЬ НайденныеГруппы ИЗ" + Символы.ПС);
	ЗапросПоиска.Выполнить();
	ЗапросПоиска.Текст = "ВЫБРАТЬ * ИЗ НайденныеГруппы";
	НайденныеГруппы = ЗапросПоиска.Выполнить().Выгрузить();
	НайденныеГруппы.Колонки.Добавить("НомерГруппы");
	НайденныеГруппы.Индексы.Добавить(Сред(ТекстИдексов, 2));
	МассивСтроковыхПолейСравнения = Новый Массив;
	Для Каждого ЭлементСравнения Из мСтруктураКлючаПоиска Цикл
		Если НайденныеГруппы.Колонки[ЭлементСравнения.Ключ].ТипЗначения.СодержитТип(Тип("Строка")) Тогда
			МассивСтроковыхПолейСравнения.Добавить(ЭлементСравнения.Ключ);
		КонецЕсли;
	КонецЦикла;
	НомерГруппы = 1;
	Для Каждого СтрокаГруппы Из НайденныеГруппы Цикл
		Для Каждого СтроковоеПоле Из МассивСтроковыхПолейСравнения Цикл
			СтрокаГруппы[СтроковоеПоле] = Нрег(СокрП(СтрокаГруппы[СтроковоеПоле]));
		КонецЦикла;
		СтрокаГруппы.НомерГруппы = НомерГруппы;
		НомерГруппы = НомерГруппы + 1;
	КонецЦикла;
		
	ТекстЗапросаЭлементы = "
	|ВЫБРАТЬ Объект.Ссылка КАК Ссылка" + ТекстВЫБРАТЬ + "
	|ИЗ " + ПолноеИмяОбъекта  + " КАК Объект
	|ГДЕ ИСТИНА
	|";

	МенеджерВременныхТаблиц = ЗапросПоиска.МенеджерВременныхТаблиц;
	ПостроительЗапросаПоиска.Текст = ТекстЗапросаЭлементы;
	ПостроительЗапросаПоиска.ЗаполнитьНастройки();
	ЛксСкопироватьОтборСтатический(ПостроительЗапросаПоиска.Отбор, ОтборПоиска, Истина);
	ЗапросПоиска = ПостроительЗапросаПоиска.ПолучитьЗапрос();
	ЗапросПоиска.Текст = ЗапросПоиска.Текст + " И (" + Сред(ТекстСГРУППИРОВАТЬ, 2) + ")
	|В (ВЫБРАТЬ " + Сред(ТекстИдексов, 2) + " ИЗ НайденныеГруппы)";
	ЗапросПоиска.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	мРезультатыПоиска = ЗапросПоиска.Выполнить().Выгрузить();
	МенеджерВременныхТаблиц.Закрыть();
	мРезультатыПоиска.Колонки.Добавить("НомерГруппы");
	мРезультатыПоиска.Колонки.Добавить("Правильный", Новый ОписаниеТипов("Булево"));
	мРезультатыПоиска.Колонки.Добавить("КоличествоСсылок");
		
	Для Каждого СтрокаПоиска ИЗ мРезультатыПоиска Цикл
		ЗаполнитьЗначенияСвойств(мСтруктураКлючаПоиска, СтрокаПоиска);
		Для Каждого СтроковоеПоле Из МассивСтроковыхПолейСравнения Цикл
			мСтруктураКлючаПоиска[СтроковоеПоле] = Нрег(СокрП(мСтруктураКлючаПоиска[СтроковоеПоле]));
		КонецЦикла;
		СтрокаПоиска.НомерГруппы = НайденныеГруппы.НайтиСтроки(мСтруктураКлючаПоиска)[0].НомерГруппы;
		ЗаполнитьЗначенияСвойств(СтрокаПоиска, мСтруктураКлючаПоиска);
	КонецЦикла;
	
	НайденныеГруппы.Сортировать(ЛксПолучитьСтрокуПорядка(ПостроительОтчетаОтбора.Порядок));
	Если мРезультатыПоиска.Количество() > 0 Тогда
		ВывестиГруппу(НайденныеГруппы[0]);
	КонецЕсли;
		
КонецПроцедуры

Процедура НайтиПоСовпадающимСловам(ОтборПоиска)
	
	ЕСли мФормаИндикатора<>Неопределено Тогда
		мФормаИндикатора.КомментарийОбработкиДанных = "Поиск элементов";
		мФормаИндикатора.КомментарийЗначения = "Получение элементов объекта";
		мФормаИндикатора.ВладелецФормы = ЭтаФорма;
		мФормаИндикатора.Открыть();
	КонецЕсли;
	
	ТекстВЫБРАТЬ = "";
	ТекстИдексов = "";
	ТаблицаСлов = Новый ТаблицаЗначений;
	мРезультатыПоиска = Новый ТаблицаЗначений;
	мСтруктураКлючаПоиска = Новый Структура;
	Для Каждого ПолеСравнения Из ПостроительОтчетаОтбора.Порядок Цикл
		Если ПолеСравнения.ПутьКДанным = "КоличествоЭлементовВГруппе" Тогда
			Продолжить;
		КонецЕсли;
		ИмяПоля = ЛксПолучитьИдентификаторИзСтроки(ПолеСравнения.ПутьКДанным);
		Если ПолеСравнения.ПутьКДанным = мПутьКДаннымПоляНечеткогоСравнения Тогда
			ИмяПоляНечеткогоСравнения = ИмяПоля;
		Иначе
			мСтруктураКлючаПоиска.Вставить(ИмяПоля);
		КонецЕсли;
		мСтруктураПредставлений.Вставить(ИмяПоля, ПолеСравнения.Представление);
		ТекстИдексов = ТекстИдексов + ", " + ИмяПоля;
		ТекстВЫБРАТЬ = ТекстВЫБРАТЬ + ", " + ПолеСравнения.ПутьКДанным;
		ТаблицаСлов.Колонки.Добавить(ИмяПоля);
		мРезультатыПоиска.Колонки.Добавить(ИмяПоля);
		НайденныеГруппы.Колонки.Добавить(ИмяПоля);
	КонецЦикла;
	
	ПостроительОтчетаПоиска = Новый ПостроительОтчета;
	ТекстЗапроса = "
	|ВЫБРАТЬ Ссылка" + ТекстВЫБРАТЬ + ", NULL КАК КоличествоЭлементовВГруппе
	|Из " + ПолноеИмяОбъекта + " КАК Объект
	|";
		
	ПостроительОтчетаПоиска.Текст = ТекстЗапроса;
	ПостроительОтчетаПоиска.ЗаполнитьНастройки();
	
	ЛксСкопироватьОтборСтатический(ПостроительОтчетаПоиска.Отбор, ОтборПоиска, Истина);
	ЛксСкопироватьПорядок(ПостроительОтчетаПоиска.Порядок, ПостроительОтчетаОтбора.Порядок);
	ПостроительОтчетаПоиска.Выполнить();
	ТаблицаОбъекта = ПостроительОтчетаПоиска.Результат.Выгрузить();
	
	ТаблицаСлов.Колонки.Добавить("Ссылка");
	ТаблицаСлов.Колонки.Добавить("СписокСлов");
	
	СписокСлов = Новый СписокЗначений;
	
	ЕСли мФормаИндикатора <> Неопределено Тогда
		мФормаИндикатора.КомментарийОбработкиДанных = "Разбивка значения на отдельные слова";
		мФормаИндикатора.МаксимальноеЗначение = ТаблицаОбъекта.Количество();
	КонецЕсли;
	
	Для Каждого СтрокаСсылки ИЗ ТаблицаОбъекта Цикл
		ЕСли мФормаИндикатора <> Неопределено Тогда
			мФормаИндикатора.Значение = ТаблицаОбъекта.Индекс(СтрокаСсылки)+1;
		КонецЕсли;
		
		ЗначениеРеквизита = СтрокаСсылки[ИмяПоляНечеткогоСравнения];
		СписокСлов = ПолучитьСписокСлов(ЗначениеРеквизита);
		
		НовСтр = ТаблицаСлов.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, СтрокаСсылки);
		НовСтр.СписокСлов = СписокСлов.Скопировать();
	КонецЦикла;
	
	ЕСли мФормаИндикатора <> Неопределено Тогда
		мФормаИндикатора.КомментарийОбработкиДанных = "Выполняется анализ значений реквизита";
		мФормаИндикатора.Значение = 0;
		мФормаИндикатора.МаксимальноеЗначение = ТаблицаСлов.Количество();
	КонецЕсли;
	
	ТаблицаОбъекта = 0;
	
	мРезультатыПоиска.Колонки.Добавить("Ссылка");
	мРезультатыПоиска.Колонки.Добавить("НомерГруппы");
	мРезультатыПоиска.Колонки.Добавить("Правильный", Новый ОписаниеТипов("Булево"));
	мРезультатыПоиска.Колонки.Добавить("КоличествоСсылок");
	
	НомерГруппы = 1;
		
	Пока ТаблицаСлов.Количество() > 0 Цикл
		ЕСли мФормаИндикатора <> Неопределено Тогда
			мФормаИндикатора.Значение = мФормаИндикатора.ЭлементыФормы.Индикатор.МаксимальноеЗначение - ТаблицаСлов.Количество();
		КонецЕсли;
		
		ОбработкаПрерыванияПользователя();
		
		КоличествоСтрок = ТаблицаСлов.Количество();
		СписокСтрок = Новый СписокЗначений;
		
		ОбрабатываемаяСтрока = ТаблицаСлов[0];
		СписокСтрок.Добавить(ОбрабатываемаяСтрока);
		ТекущийСписокСлов = ОбрабатываемаяСтрока.СписокСлов.Скопировать();
		
		Для индекс = 1 по КоличествоСтрок - 1 Цикл
			СтрокаСравнения = ТаблицаСлов[индекс];
			ЭтоНоваяГруппа = Ложь;
			Для Каждого ПолеСравнения Из мСтруктураКлючаПоиска Цикл
				Если СтрокаСравнения[ПолеСравнения.Ключ] = ОбрабатываемаяСтрока[ПолеСравнения.Ключ] Тогда 
					ЭтоНоваяГруппа = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если Не ЭтоНоваяГруппа Тогда 
				Продолжить;
			КонецЕсли;
			СписокСловСравнения = СтрокаСравнения.СписокСлов.Скопировать();
			СписокНеНайденных = Новый СписокЗначений;
			
			ОдинаковыхСлов = 0;
			Для Каждого Слово Из ТекущийСписокСлов Цикл
				ЭлементСпискаСравнения = СписокСловСравнения.НайтиПоЗначению(Слово.Значение);
				Если ЭлементСпискаСравнения = Неопределено Тогда
					СписокНеНайденных.Добавить(Слово.Значение);
				Иначе
					СписокСловСравнения.Удалить(ЭлементСпискаСравнения);
					ОдинаковыхСлов = ОдинаковыхСлов + 1;
				КонецЕсли;
			КонецЦикла;
			
			Если СписокНеНайденных.Количество()=0 И СписокСловСравнения.Количество()=0 Тогда
				ЕстьОтличия = Ложь;
			Иначе
				ЕСли ОдинаковыхСлов>0 Тогда
					ЕстьОтличия = АнализРазличийВСловах(СписокНеНайденных, СписокСловСравнения, ТекущийСписокСлов, ОдинаковыхСлов, ДопустимоеРазличиеСлов);
				Иначе
					ЕстьОтличия = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЕстьОтличия Тогда
				СписокСтрок.Добавить(СтрокаСравнения);
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого СтрокаИзСписка ИЗ СписокСтрок Цикл
			Если СписокСтрок.Количество() > 1 Тогда
				СтрокаРезультата = мРезультатыПоиска.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаРезультата, СтрокаИзСписка.Значение);
				СтрокаРезультата.НомерГруппы = НомерГруппы;
			Иначе
				НомерГруппы = НомерГруппы - 1;
			КонецЕсли;
			ТаблицаСлов.Удалить(СтрокаИзСписка.Значение);
		КонецЦикла;
		НомерГруппы = НомерГруппы + 1;
		
	КонецЦикла;
	
	ЕСли мФормаИндикатора<>Неопределено Тогда
		мФормаИндикатора.КомментарийОбработкиДанных = "Обработка результатов";
	КонецЕсли;
	
	НайденныеГруппы.Колонки.Добавить("КоличествоЭлементовВГруппе");
	НайденныеГруппы.Колонки.Добавить("НомерГруппы");
	Если мРезультатыПоиска.Количество() > 0 Тогда
		
		мРезультатыПоиска.Сортировать("НомерГруппы УБЫВ");
		СтруктураПоиска = Новый Структура;
		ВсегоГрупп = мРезультатыПоиска[0].НомерГруппы;
		Для Индекс = 1 по ВсегоГрупп Цикл
			СтруктураПоиска.Вставить("НомерГруппы",  ВсегоГрупп - Индекс + 1);
			МассивСтрок = мРезультатыПоиска.НайтиСтроки(СтруктураПоиска);
			СтрокаГруппы = НайденныеГруппы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаГруппы, МассивСтрок[0]);
			СтрокаГруппы.КоличествоЭлементовВГруппе = МассивСтрок.Количество();
		КонецЦикла;
		
		НайденныеГруппы.Сортировать(ЛксПолучитьСтрокуПорядка(ПостроительОтчетаОтбора.Порядок));
			
		Если мРезультатыПоиска.Количество() > 0 Тогда
			ВывестиГруппу(НайденныеГруппы[0]);
		КонецЕсли;
		
	КонецЕсли;
	ЕСли мФормаИндикатора<>Неопределено Тогда
		мФормаИндикатора.Закрыть();
	КонецЕсли;
	
			
КонецПроцедуры

Функция ВыполнитьПоискСсылок()
	
	Состояние("Поиск ссылок...");

	ВремТаблица = ЭлементыТекущейГруппы.Скопировать();
	СтрокаПравильного = ВремТаблица.Найти(Истина, "Правильный");
	
	Если СтрокаПравильного = Неопределено Тогда
		Предупреждение("Не определен правильный элемент");
		Возврат ложь;
		
	КонецЕсли;
	
	ВремТаблица.Удалить(СтрокаПравильного);	
	
	МассивСсылок    = ВремТаблица.ВыгрузитьКолонку("Ссылка");		
	НайденныеСсылки = НайтиПоСсылкам(МассивСсылок);
	
	ЭлементыФормы.НайденныеСсылки.СоздатьКолонки();
	
	ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы.НайденныеСсылки;
	
	Возврат Истина;
	
КонецФункции

Функция ОбработатьЗаписьРегистра(НаборЗаписей, Заменяемые)
	
	ОбъектМД = ЛксПолучитьМетаданные(НаборЗаписей);
	НаборЗаписей.Прочитать();
	Если Не НаборЗаписей.Выбран() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ЛксЛиМенеджерЗаписиРегистра(НаборЗаписей) Тогда
		КоллекцияЗаписей = Новый Массив;
		КоллекцияЗаписей.Добавить(НаборЗаписей);
	Иначе
		Если ОтключатьКонтрольЗаписи Тогда
			НаборЗаписей.ОбменДанными.Загрузка = Истина;
		КонецЕсли;
		КоллекцияЗаписей = НаборЗаписей.Выгрузить();
	КонецЕсли;
	
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ТекстЗапроса = "ВЫБРАТЬ * ИЗ " + ОбъектМД.ПолноеИмя();
	Если Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМД) Тогда
		ТекстЗапроса = ТекстЗапроса + ".ДвиженияССубконто";
	КонецЕсли;
	ПостроительЗапроса.Текст = ТекстЗапроса;
	ПостроительЗапроса.ЗаполнитьНастройки();
	
	Для Каждого Запись Из КоллекцияЗаписей Цикл
		Для каждого Поле Из ПостроительЗапроса.ДоступныеПоля Цикл
			Если Не Поле.Поле Тогда
				// Баг платформы. Зачем то добавляются лишние поля в доступные поля, не свойственные по признаку наличия корресподнеции
				// у бухгалтерских таблиц.
				Продолжить;
			КонецЕсли;
			ИмяПоля = Поле.Имя;
			ЗначениеПоля = Запись[ИмяПоля];
			НаЧтоЗаменять = Заменяемые[ЗначениеПоля];
			Если НаЧтоЗаменять = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Запись[ИмяПоля] = НаЧтоЗаменять;
		КонецЦикла; 
		ОбработкаПрерыванияПользователя();
	КонецЦикла;
	
	Если Не ЛксЛиМенеджерЗаписиРегистра(НаборЗаписей) Тогда
		НаборЗаписей.Загрузить(КоллекцияЗаписей);
	КонецЕсли;

	Попытка
		НаборЗаписей.Записать();
		Возврат Истина;
	Исключение
		Сообщить(ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
		Возврат Ложь;
	КонецПопытки;

КонецФункции // ОбработатьЗаписьРегистра()

Функция ВыполнитьЗаменуЭлементов(ПравильныйЭлемент, ТаблицаСсылок, ЗаголовокИндикации = "")
	
	БылиИсключения = Ложь;
	Если ВыполнятьВТранзакции Тогда
		НачатьТранзакцию();
	КонецЕсли;
	ОбрабатываемаяСсылка = Неопределено;
		
	Параметры = Новый Структура;
		
	Параметры.Вставить("Объект", Неопределено);	
	СтруктураКоллизий = Новый Структура;
	
	ЕСли мФормаИндикатора<>Неопределено Тогда
		мФормаИндикатора.МаксимальноеЗначение = ТаблицаСсылок.Количество();
		мФормаИндикатора.КомментарийЗначения = "Выполняется замена элементов." + ЗаголовокИндикации;
		мФормаИндикатора.Значение = 0;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаСсылок Цикл
		
		Ссылка = СтрокаТаблицы.Ссылка;
		
		// **** надо вынести в корень
		Заменяемые = Новый Соответствие;
		Заменяемые.Вставить(Ссылка, ПравильныйЭлемент);
		
		ОбработкаПрерыванияПользователя();
		Сообщить("Обрабатывается " + СтрокаТаблицы.Данные);
		
		Если ОбрабатываемаяСсылка <> СтрокаТаблицы.Данные Тогда
			Если Истина
				И ОбрабатываемаяСсылка <> Неопределено
				И Не ЛксЛиКлючЗаписиРегистра(ОбрабатываемаяСсылка)
			Тогда
				Если ОтключатьКонтрольЗаписи Тогда
					Параметры.Объект.ОбменДанными.Загрузка = Истина;
				КонецЕсли;
				
				Попытка
					Параметры.Объект.Записать();
				Исключение
					Сообщить(ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
					БылиИсключения = Истина;
					Если ВыполнятьВТранзакции Тогда
						Перейти ~ОТКАТ;
					КонецЕсли;
				КонецПопытки;
				Параметры.Объект = Неопределено;
			КонецЕсли;
			ОбрабатываемаяСсылка = СтрокаТаблицы.Данные;
			
		КонецЕсли;
		
			
		Если Метаданные.Документы.Содержит(СтрокаТаблицы.Метаданные) Тогда
			
			Если Параметры.Объект = Неопределено Тогда
				Параметры.Объект = СтрокаТаблицы.Данные.ПолучитьОбъект();
			КонецЕсли;
			
			Для Каждого Реквизит Из СтрокаТаблицы.Метаданные.Реквизиты Цикл
				Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) И Параметры.Объект[Реквизит.Имя] = Ссылка Тогда
					Параметры.Объект[Реквизит.Имя] = ПравильныйЭлемент;
				КонецЕсли;
			КонецЦикла;
				
			Для Каждого ТЧ ИЗ СтрокаТаблицы.Метаданные.ТабличныеЧасти Цикл
				Для Каждого Реквизит Из ТЧ.Реквизиты Цикл
					Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
						СтрокаТабЧасти = Параметры.Объект[ТЧ.Имя].Найти(Ссылка, Реквизит.Имя);
						Пока СтрокаТабЧасти <> Неопределено Цикл
							СтрокаТабЧасти[Реквизит.Имя] = ПравильныйЭлемент;
							СтрокаТабЧасти = Параметры.Объект[ТЧ.Имя].Найти(Ссылка, Реквизит.Имя);
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			Для Каждого Движение ИЗ СтрокаТаблицы.Метаданные.Движения Цикл
				БылиИсключения = Не ОбработатьЗаписьРегистра(Параметры.Объект.Движения[Движение.Имя], Заменяемые);
				Если Истина
					И БылиИсключения 
					И ВыполнятьВТранзакции
				Тогда
					Перейти ~ОТКАТ;
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого Последовательность ИЗ Метаданные.Последовательности Цикл
				Если Последовательность.Документы.Содержит(СтрокаТаблицы.Метаданные) Тогда
					НадоЗаписывать = Ложь;
					НаборЗаписи = Последовательности[Последовательность.Имя].СоздатьНаборЗаписей();
					НаборЗаписи.Отбор.Регистратор.Установить(СтрокаТаблицы.Данные);
					НаборЗаписи.Прочитать();
					Если НаборЗаписи.Количество() = 0 Тогда
						Продолжить;
					КонецЕсли;
					Для Каждого Измерение ИЗ Последовательность.Измерения Цикл
						Если Истина
							И Измерение.Тип.СодержитТип(ТипЗнч(Ссылка)) 
							И НаборЗаписи[0][Измерение.Имя] = Ссылка
						Тогда
							НаборЗаписи[0][Измерение.Имя] = ПравильныйЭлемент;
							НадоЗаписывать = Истина;
						КонецЕсли;
					КонецЦикла;
					Если НадоЗаписывать Тогда
						Если ОтключатьКонтрольЗаписи Тогда
							НаборЗаписи.ОбменДанными.Загрузка = Истина;
						КонецЕсли;
						Попытка
							НаборЗаписи.Записать();
						Исключение
							Сообщить(ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
							БылиИсключения = Истина;
							Если ВыполнятьВТранзакции Тогда
								Перейти ~ОТКАТ;
							КонецЕсли;
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли Метаданные.Справочники.Содержит(СтрокаТаблицы.Метаданные) Тогда
			
			Если Параметры.Объект = Неопределено Тогда
				Параметры.Объект = СтрокаТаблицы.Данные.ПолучитьОбъект();
			КонецЕсли;
			
			Если СтрокаТаблицы.Метаданные.Владельцы.Содержит(Ссылка.Метаданные()) И Параметры.Объект.Владелец = Ссылка Тогда
				Параметры.Объект.Владелец = ПравильныйЭлемент;
			КонецЕсли;
			
			Если СтрокаТаблицы.Метаданные.Иерархический И Параметры.Объект.Родитель = Ссылка Тогда
				Параметры.Объект.Родитель = ПравильныйЭлемент;
			КонецЕсли;
			
			Для Каждого Реквизит Из СтрокаТаблицы.Метаданные.Реквизиты Цикл
				Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) И Параметры.Объект[Реквизит.Имя] = Ссылка Тогда
					Параметры.Объект[Реквизит.Имя] = ПравильныйЭлемент;
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого ТЧ ИЗ СтрокаТаблицы.Метаданные.ТабличныеЧасти Цикл
				Для Каждого Реквизит Из ТЧ.Реквизиты Цикл
					Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
						СтрокаТабЧасти = Параметры.Объект[ТЧ.Имя].Найти(Ссылка, Реквизит.Имя);
						Пока СтрокаТабЧасти <> Неопределено Цикл
							СтрокаТабЧасти[Реквизит.Имя] = ПравильныйЭлемент;
							СтрокаТабЧасти = Параметры.Объект[ТЧ.Имя].Найти(Ссылка, Реквизит.Имя);
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
		ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(СтрокаТаблицы.Метаданные)
				  ИЛИ Метаданные.ПланыСчетов.Содержит(СтрокаТаблицы.Метаданные)
				  ИЛИ Метаданные.ПланыВидовРасчета.Содержит(СтрокаТаблицы.Метаданные)
				  ИЛИ Метаданные.Задачи.Содержит(СтрокаТаблицы.Метаданные)
				  ИЛИ Метаданные.БизнесПроцессы.Содержит(СтрокаТаблицы.Метаданные) Тогда
			
			Если Параметры.Объект = Неопределено Тогда
				Параметры.Объект = СтрокаТаблицы.Данные.ПолучитьОбъект();
			КонецЕсли;
						
			Для Каждого Реквизит Из СтрокаТаблицы.Метаданные.Реквизиты Цикл
				Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) И Параметры.Объект[Реквизит.Имя] = Ссылка Тогда
					Параметры.Объект[Реквизит.Имя] = ПравильныйЭлемент;
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого ТЧ ИЗ СтрокаТаблицы.Метаданные.ТабличныеЧасти Цикл
				Для Каждого Реквизит Из ТЧ.Реквизиты Цикл
					Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
						СтрокаТабЧасти = Параметры.Объект[ТЧ.Имя].Найти(Ссылка, Реквизит.Имя);
						Пока СтрокаТабЧасти <> Неопределено Цикл
							СтрокаТабЧасти[Реквизит.Имя] = ПравильныйЭлемент;
							СтрокаТабЧасти = Параметры.Объект[ТЧ.Имя].Найти(Ссылка, Реквизит.Имя);
						КонецЦикла;							
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;	
			
		ИначеЕсли Метаданные.Константы.Содержит(СтрокаТаблицы.Метаданные) Тогда
			
			Константы[СтрокаТаблицы.Метаданные.Имя].Установить(ПравильныйЭлемент);
			
			
		ИначеЕсли Метаданные.РегистрыСведений.Содержит(СтрокаТаблицы.Метаданные) Тогда	
			
			МенеджерЗаписи            = РегистрыСведений[СтрокаТаблицы.Метаданные.Имя].СоздатьМенеджерЗаписи();
			КоллизийныйМенеджерЗаписи = РегистрыСведений[СтрокаТаблицы.Метаданные.Имя].СоздатьМенеджерЗаписи();
			Периодический = (СтрокаТаблицы.Метаданные.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический);
			Если Периодический Тогда
				МенеджерЗаписи.Период            = СтрокаТаблицы.Данные.Период;
				КоллизийныйМенеджерЗаписи.Период = СтрокаТаблицы.Данные.Период;
			КонецЕсли;
			МассивИзмененныхИзмерений = Новый Массив;
			Для каждого Рекв Из СтрокаТаблицы.Метаданные.Измерения Цикл
				ЗначениеИзмерения = СтрокаТаблицы.Данные[Рекв.Имя];
				МенеджерЗаписи[Рекв.Имя] = ЗначениеИзмерения;
				Если ЗначениеИзмерения = Ссылка Тогда
					КоллизийныйМенеджерЗаписи[Рекв.Имя] = ПравильныйЭлемент;
					МассивИзмененныхИзмерений.Добавить(Рекв.Имя);
				Иначе
					КоллизийныйМенеджерЗаписи[Рекв.Имя] = ЗначениеИзмерения;
				КонецЕсли;
			КонецЦикла;
			
			БылаКоллизия = Ложь;
			Если МассивИзмененныхИзмерений.Количество() > 0 Тогда
				КоллизийныйМенеджерЗаписи.Прочитать();
				Если КоллизийныйМенеджерЗаписи.Выбран() Тогда
					МенеджерЗаписи.Прочитать();
					МассивКоллекцийРеквизитов = Новый Массив;
					МассивКоллекцийРеквизитов.Добавить(СтрокаТаблицы.Метаданные.Ресурсы);
					МассивКоллекцийРеквизитов.Добавить(СтрокаТаблицы.Метаданные.Реквизиты);
					Если Не СтруктураКоллизий.Свойство(СтрокаТаблицы.Метаданные.Имя) Тогда 
						ТаблицаЗаписей = РегистрыСведений[СтрокаТаблицы.Метаданные.Имя].СоздатьНаборЗаписей().Выгрузить();
						ТаблицаЗаписей.Колонки.Добавить("МенеджерЗамены");
						ТаблицаЗаписей.Колонки.Добавить("МенеджерОригинала");
						Для Каждого КоллекцияРеквизитов Из МассивКоллекцийРеквизитов Цикл
							Для Каждого МетаРеквизит Из КоллекцияРеквизитов Цикл
								ИмяКолонки = МетаРеквизит.Имя;
								ПредставлениеКолонки = МетаРеквизит.Представление();
								КолонкаОригинала = ТаблицаЗаписей.Колонки[ИмяКолонки];
								КолонкаОригинала.Имя       = "Оригинал"   + ИмяКолонки;
								КолонкаОригинала.Заголовок = "Оригинал: " + ПредставлениеКолонки;
								КолонкаЗамены = ТаблицаЗаписей.Колонки.Вставить(ТаблицаЗаписей.Колонки.Индекс(КолонкаОригинала),
									"Замена" + ИмяКолонки, , "Замена: " + ПредставлениеКолонки);
								ЗаполнитьЗначенияСвойств(КолонкаЗамены, КолонкаОригинала, , "Имя, Заголовок");
							КонецЦикла;
						КонецЦикла;
						ТаблицаЗаписей.Колонки.Вставить(0, "Заменить", Новый ОписаниеТипов("Булево"), "Заменить");
						СтруктураКоллизий.Вставить(СтрокаТаблицы.Метаданные.Имя, ТаблицаЗаписей);
					КонецЕсли;
					НоваяКоллизийнаяЗапись = СтруктураКоллизий[СтрокаТаблицы.Метаданные.Имя].Добавить();
					Для Каждого КоллекцияРеквизитов Из МассивКоллекцийРеквизитов Цикл
						Для Каждого МетаРеквизит Из КоллекцияРеквизитов Цикл
							ИмяКолонки = МетаРеквизит.Имя;
							ЗначениеРеквизита = МенеджерЗаписи[ИмяКолонки];
							НоваяКоллизийнаяЗапись["Оригинал" + ИмяКолонки] = КоллизийныйМенеджерЗаписи[ИмяКолонки];
							Если ЗначениеРеквизита = Ссылка Тогда
								НоваяКоллизийнаяЗапись["Замена" + ИмяКолонки] = ПравильныйЭлемент;
							Иначе
								НоваяКоллизийнаяЗапись["Замена" + ИмяКолонки] = ЗначениеРеквизита;
							КонецЕсли;
							КоллизийныйМенеджерЗаписи[ИмяКолонки] = НоваяКоллизийнаяЗапись["Замена" + ИмяКолонки];
							Если НоваяКоллизийнаяЗапись["Оригинал" + ИмяКолонки] <> НоваяКоллизийнаяЗапись["Замена" + ИмяКолонки] Тогда
								БылаКоллизия = Истина;
							КонецЕсли;
						КонецЦикла;
					КонецЦикла;
					Если БылаКоллизия Тогда
						ЗаполнитьЗначенияСвойств(НоваяКоллизийнаяЗапись, КоллизийныйМенеджерЗаписи);
						Для Каждого ИмяКолонки Из МассивИзмененныхИзмерений Цикл
							НоваяКоллизийнаяЗапись[ИмяКолонки] = МенеджерЗаписи[ИмяКолонки];
						КонецЦикла;
						НоваяКоллизийнаяЗапись.МенеджерЗамены    = КоллизийныйМенеджерЗаписи;
						НоваяКоллизийнаяЗапись.МенеджерОригинала = МенеджерЗаписи;
					Иначе
						СтруктураКоллизий[СтрокаТаблицы.Метаданные.Имя].Удалить(НоваяКоллизийнаяЗапись);
						МенеджерЗаписи.Удалить();
						БылаКоллизия = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если БылаКоллизия Тогда
				БылиИсключения = Ложь;
			Иначе
				БылиИсключения = Не ОбработатьЗаписьРегистра(МенеджерЗаписи, Заменяемые);
			КонецЕсли;
			
			Если Истина
				И БылиИсключения 
				И ВыполнятьВТранзакции
			Тогда
				Перейти ~ОТКАТ;
			КонецЕсли;

		Иначе
			Сообщить("Ссылки типа "+СтрокаТаблицы.Метаданные+" не заменяются!!");
		КонецЕсли;
		ОбработкаПрерыванияПользователя();
		Если мФормаИндикатора <> Неопределено Тогда
			мФормаИндикатора.Значение = мФормаИндикатора.Значение + 1;
		Иначе
			Состояние("Выполнено " + Формат(100 * ТаблицаСсылок.Индекс(СтрокаТаблицы) + 1 / ТаблицаСсылок.Количество(), "ЧЦ=5; ЧДЦ=2") + "%");
		КонецЕсли;
	КонецЦикла;
	
	Если Параметры.Объект <> Неопределено Тогда
		Если ОтключатьКонтрольЗаписи Тогда
			Параметры.Объект.ОбменДанными.Загрузка = Истина;
		КонецЕсли;
		Попытка
			Параметры.Объект.Записать();
			Если ОтключатьКонтрольЗаписи Тогда
				ЗаписьЖурналаРегистрации("Запись с флагом Загрузка", УровеньЖурналаРегистрации.Информация, СтрокаТаблицы.Метаданные,
					СтрокаТаблицы.Данные, "");
			КонецЕсли;
		Исключение
			Сообщить(ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
			БылиИсключения = Истина;
			Если ВыполнятьВТранзакции Тогда
				Перейти ~ОТКАТ;
			КонецЕсли;
		КонецПопытки;
	КонецЕсли;
	
	МассивЭлементовКУдалению = Новый Массив; 
	Для Каждого ЭлементТаблицыРегистра Из СтруктураКоллизий Цикл
		Если ЭлементТаблицыРегистра.Значение.Количество() = 0 Тогда
			МассивЭлементовКУдалению.Добавить(ЭлементТаблицыРегистра.Ключ);
		КонецЕсли;
	КонецЦикла;
	Для Каждого ЭлементКУдалению Из МассивЭлементовКУдалению Цикл
		СтруктураКоллизий.Удалить(ЭлементКУдалению);
	КонецЦикла;
	Если СтруктураКоллизий.Количество() > 0 Тогда
		ФормаЗамещенияВНезависимыхРегистрахСведений = ПолучитьФорму("ФормаЗамещенияВНезависимыхРегистрахСведений");
		ФормаЗамещенияВНезависимыхРегистрахСведений.СтруктураКоллизий = СтруктураКоллизий;
		ФормаЗамещенияВНезависимыхРегистрахСведений.ОткрытьМодально();
	КонецЕсли;

~ОТКАТ:
	Если ВыполнятьВТранзакции Тогда
		Если БылиИсключения Тогда
			ОтменитьТранзакцию();
		Иначе
			ЗафиксироватьТранзакцию();
		КонецЕсли;	
	КонецЕсли;
	Возврат Не БылиИсключения;
	
КонецФункции

Процедура СброситьДоступность()
	
	ЭлементыФормы.Панель.Страницы.ЗависимыеЭлементы.Доступность = Ложь;
	ЭлементыФормы.Панель.Страницы.НайденныеСсылки.Доступность = Ложь;
	ЗависимыеОбъекты.Строки.Очистить();
	ЭлементыФормы.КоманднаяПанельЗависимыеОбъекты.Кнопки.ВыполнитьЗамену.Доступность = Ложь;
	
КонецПроцедуры // () 

Процедура АвтозаменаЭлементов(НепосредственноУдалятьОбъекты) Экспорт
	
	Если мРезультатыПоиска = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЕСли мФормаИндикатора<>Неопределено Тогда
		мФормаИндикатора.КомментарийОбработкиДанных = "Поиск и замена значений";
		мФормаИндикатора.ВладелецФормы = ЭтаФорма;
		мФормаИндикатора.Открыть();
	КонецЕсли;
	СтруктураПоискаПравильных = Новый Структура("Правильный",Истина);
	ПравильныеСтроки = мРезультатыПоиска.НайтиСтроки(СтруктураПоискаПравильных);
	
	НомерГруппы = 1;
	Для Каждого СтрокаПравильного Из ПравильныеСтроки Цикл
		ЗаголовокИндикации = " Группа " + НомерГруппы + " из " + ПравильныеСтроки.Количество();
		СтруктураПоиска = Новый Структура("НомерГруппы, Правильный", СтрокаПравильного.НомерГруппы, Ложь);
		МассивСсылок = Новый Массив;
		МассивНеправильныхСтрок = мРезультатыПоиска.НайтиСтроки(СтруктураПоиска);
		Для каждого СтрокаНеправильного Из МассивНеправильныхСтрок Цикл
			МассивСсылок.Добавить(СтрокаНеправильного.Ссылка);
		КонецЦикла;
		
		ЕСли мФормаИндикатора<>Неопределено Тогда
			мФормаИндикатора.КомментарийЗначения = "Выполняется поиск ссылок." + ЗаголовокИндикации;
			мФормаИндикатора.Значение = 0;
		КонецЕсли;
		
		ЗаменаВыполнена = ВыполнитьЗаменуЭлементов(СтрокаПравильного.Ссылка, НайтиПоСсылкам(МассивСсылок), ЗаголовокИндикации);
		СтрокаГруппы = НайденныеГруппы.Найти(СтрокаПравильного.НомерГруппы, "НомерГруппы");
		
		Если НепосредственноУдалятьОбъекты и (ЗаменаВыполнена или Не ВыполнятьВТранзакции) Тогда
			ТаблицаОставшихсяСсылок = НайтиПоСсылкам(МассивСсылок);
			ТаблицаОставшихсяСсылок.Свернуть("Ссылка");
			Для каждого СтрокаНеправильного Из МассивНеправильныхСтрок Цикл
				Если ТаблицаОставшихсяСсылок.Найти(СтрокаНеправильного.Ссылка, "Ссылка") = Неопределено Тогда
					
					Объект = СтрокаНеправильного.Ссылка.ПолучитьОбъект();
					Если Не Объект = Неопределено Тогда
						Попытка
							Объект.Удалить();
							мРезультатыПоиска.Удалить(СтрокаНеправильного);
							СтрокаГруппы.КоличествоЭлементовВГруппе = СтрокаГруппы.КоличествоЭлементовВГруппе - 1;
						Исключение
							Сообщить(ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
						КонецПопытки;
						
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		НомерГруппы = НомерГруппы + 1;
		
	КонецЦикла;
	
	ЕСли мФормаИндикатора<>Неопределено Тогда
		мФормаИндикатора.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоискЗависимыхСсылок()
	
	МассивСсылок = Новый Массив;
	Для каждого Строка0 Из ЗависимыеОбъекты.Строки Цикл
		Для каждого Строка1 Из Строка0.Строки Цикл
			Для каждого Строка2 Из Строка1.Строки Цикл
				Если Строка2.ВключатьВПоиск Тогда
					МассивСсылок.Добавить(Строка2.НеПравильный);
				КонецЕсли; 
			КонецЦикла; 
		КонецЦикла; 
	КонецЦикла; 
	НайденныеЗависимыеСсылки.Колонки.Очистить();
	НайденныеЗависимыеСсылки.Колонки.Добавить("Ссылка");
	НайденныеЗависимыеСсылки.Колонки.Добавить("Данные");
	НайденныеЗависимыеСсылки.Колонки.Добавить("Метаданные");
	
	ВсеНайденныеЗависимыеСсылки = НайтиПоСсылкам(МассивСсылок);
	Для каждого СтрокаВсеСсылки Из ВсеНайденныеЗависимыеСсылки Цикл
		Если СтрокаВсеСсылки.ссылка.Владелец <> СтрокаВсеСсылки.Данные Тогда
			СтрокаСсылки = НайденныеЗависимыеСсылки.Добавить();
			Для каждого Колонка Из НайденныеЗависимыеСсылки.Колонки Цикл
				СтрокаСсылки[Колонка.Имя]=СтрокаВсеСсылки[Колонка.Имя];
			КонецЦикла; 
		КонецЕсли; 
	КонецЦикла; 
	ЭлементыФормы.НайденныеЗависимыеСсылки.СоздатьКолонки();
	
КонецПроцедуры // ПоисЗависимыхссылок()

Процедура ОчиститьРезультатыПоиска()
	
	мРезультатыПоиска = Новый ТаблицаЗначений;
	мРезультатыПоиска.Колонки.Добавить("Ссылка");
	мРезультатыПоиска.Колонки.Добавить("НомерГруппы");
	мРезультатыПоиска.Колонки.Добавить("Правильный", Новый ОписаниеТипов("Булево"));
	мРезультатыПоиска.Колонки.Добавить("КоличествоСсылок");
	ЭлементыФормы.КоманднаяПанельНайденныеГруппы.Кнопки.СледующаяГруппа.Доступность = ложь;
	ЭлементыФормы.КоманднаяПанельНайденныеГруппы.Кнопки.ПредыдущаяГруппа.Доступность = ложь;
	
	ЭлементыТекущейГруппы.Колонки.Очистить();
	НайденныеГруппы.Очистить();
	НайденныеГруппы.Колонки.Очистить();
	мТекущаяГруппа = Неопределено;
	
	НайденныеГруппы.Колонки.Добавить("ВывестиГруппу", , "Вывести группу");
	НайденныеГруппы.Колонки.Добавить("НомерГруппы", , "Номер группы");
	НайденныеГруппы.Колонки.Добавить("КоличествоЭлементовВГруппе", , "Количество элементов");
	ЭлементыФормы.НайденныеГруппы.СоздатьКолонки();
	ЭлементыФормы.НайденныеГруппы.Колонки.ВывестиГруппу.ТолькоПросмотр = Истина;
	ЭлементыФормы.НайденныеГруппы.Колонки.НомерГруппы.ТолькоПросмотр = Истина;
	ЭлементыФормы.НайденныеГруппы.Колонки.КоличествоЭлементовВГруппе.ТолькоПросмотр = Истина;
		
	ЭлементыФормы.ЭлементыТекущейГруппы.Колонки.Очистить();
	ЭлементыТекущейГруппы.Колонки.Добавить("Ссылка", Новый ОписаниеТипов(мКорневойТипОбъекта + "Ссылка." + мМетаданныеОбъекта.Имя), "Объект");
	ЭлементыТекущейГруппы.Колонки.Добавить("КоличествоСсылок", , "Количество ссылок");
	ЭлементыТекущейГруппы.Колонки.Добавить("НомерГруппы", , "Номер группы");
	ЭлементыФормы.ЭлементыТекущейГруппы.СоздатьКолонки();
	
	Колонка = ЭлементыФормы.ЭлементыТекущейГруппы.Колонки.Ссылка;
	Колонка.ЭлементУправления.АвтоВыборНезаполненного = Истина;
	Колонка.ЭлементУправления.КнопкаОткрытия  = Истина;
	
	Колонка = ЭлементыФормы.ЭлементыТекущейГруппы.Колонки.КоличествоСсылок;
	Колонка.ТолькоПросмотр = Истина;
	Колонка.Ширина = 5;
	
	Колонка = ЭлементыФормы.ЭлементыТекущейГруппы.Колонки.НомерГруппы;
	Колонка.ИзменятьВидимость = Ложь;
	Колонка.Видимость = Ложь;
	
	ЭлементыТекущейГруппы.Колонки.Добавить("Правильный", Новый ОписаниеТипов("Булево"));
	
	Для Каждого Реквизит Из мСписокРеквизитов Цикл
		ЭлементыТекущейГруппы.Колонки.Добавить("Р_" + Реквизит.Значение, Новый ОписаниеТипов("Строка"), Реквизит.Представление);
		Колонка = ЭлементыФормы.ЭлементыТекущейГруппы.Колонки.Добавить("Р_" + Реквизит.Значение,Реквизит.Представление);
		Колонка.Данные = "Р_" + Реквизит.Значение;
		Колонка.ТолькоПросмотр = Истина;
		Колонка.Видимость = Ложь;
	КонецЦикла;
	УстановитьВидимостьКолонкиРеквизитаПоиска();
	ЛксОбновитьТекстПослеМаркераВСтроке(ЭлементыФормы.РамкаГруппыНайденныеГруппы, "Заголовок",
		Строка(НайденныеГруппы.Количество()) + " )", "(");
	ВывестиГруппу();
	
КонецПроцедуры

Процедура УстановитьВидимостьКолонкиРеквизитаПоиска()
	
	ИмяКолонки = ПолучитьЗначениеНастройки("Имя реквизита");
	Если ИмяКолонки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Колонки = ЭлементыФормы.ЭлементыТекущейГруппы.Колонки;
	КолонкаРеквизита = Колонки.Найти("Р_" + ИмяКолонки);
	Если КолонкаРеквизита = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Колонки.Сдвинуть(Колонки.КоличествоСсылок, - 1000);
	Колонки.Сдвинуть(Колонки.Ссылка, - 1000);
	КолонкаПрошлогоРеквизита = Колонки[2];
	Колонки.Сдвинуть(КолонкаРеквизита, 2 - Колонки.Индекс(КолонкаРеквизита));
	
	КолонкаПрошлогоРеквизита.Видимость = КолонкаРеквизита.Видимость;
	КолонкаРеквизита.Видимость = Истина;
	
КонецПроцедуры // () 

Процедура ОбновитьСтрокуРезультатовПоиска(СтрокаРезультатовПоиска)
	
	МассивСсылок = Новый Массив;
	МассивСсылок.Добавить(СтрокаРезультатовПоиска.Ссылка);
	РезультатПоиска = ПолучитьТаблицуРезультатовПоиска(МассивСсылок);
	Если РезультатПоиска.Количество() Тогда
		ЗаполнитьЗначенияСвойств(СтрокаРезультатовПоиска,РезультатПоиска[0],,"Ссылка");
	Иначе
		Для каждого Колонка Из ЭлементыТекущейГруппы.Колонки Цикл
			Если Не Колонка.Имя = "Ссылка" и Не Колонка.Имя = "Правильный" Тогда
				СтрокаРезультатовПоиска[Колонка.Имя] = Неопределено;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	ДопустимоеРазличиеСлов = 30;
	
	Попытка
		мФормаИндикатора = ПолучитьОбщуюФорму("ХодВыполненияОбработкиДанных");
	Исключение
		мФормаИндикатора = Неопределено;
	КонецПопытки;
		
КонецПроцедуры

Процедура ПриУстановкеПолногоИмениОбъекта()

	мМетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта);
	Если мМетаданныеОбъекта <> Неопределено Тогда
		мКорневойТипОбъекта = ЛксПолучитьПервыйФрагмент(ПолноеИмяОбъекта);
		СохраненныеНастройки = ПостроительОтчетаОтбора.ПолучитьНастройки();
		СписокРеквизитов = ЛксПолучитьСписокРеквизитовОбъектаБД(мМетаданныеОбъекта, Истина, Истина);
		мСтрокаРеквизитов = "";
		мСписокРеквизитов.Очистить();
		Для Каждого ЭлементРеквизита Из СписокРеквизитов Цикл
			МетаРеквизит = мМетаданныеОбъекта.Реквизиты.Найти(ЭлементРеквизита.Значение);
			Если МетаРеквизит <> Неопределено Тогда
				Если Ложь
					Или МетаРеквизит.Тип.СодержитТип(Тип("ХранилищеЗначения"))
					Или (Истина
						И МетаРеквизит.Тип.СодержитТип(Тип("Строка"))
						И МетаРеквизит.Тип.КвалификаторыСтроки.Длина = 0)
				Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(мСписокРеквизитов.Добавить(), ЭлементРеквизита);
			мСтрокаРеквизитов = мСтрокаРеквизитов + ", 
			|	Объект." + ЭлементРеквизита.Значение + ".* КАК " + ЭлементРеквизита.Значение;
		КонецЦикла;
		ПостроительОтчетаОтбора.Текст = "
		|ВЫБРАТЬ 0
		|ИЗ " + ПолноеИмяОбъекта + " КАК Объект
		|{ГДЕ " + Сред(мСтрокаРеквизитов, 2) + "}
		|{УПОРЯДОЧИТЬ ПО 
		|	0 КоличествоЭлементовВГруппе
		|	" + мСтрокаРеквизитов + "}
		|";
		ПостроительОтчетаОтбора.ДоступныеПоля.КоличествоЭлементовВГруппе.Представление = "Количество элементов в группе";
		ПостроительОтчетаОтбора.ДоступныеПоля.КоличествоЭлементовВГруппе.Отбор = Ложь;
		Для Каждого Реквизит Из мСписокРеквизитов Цикл
			ПостроительОтчетаОтбора.ДоступныеПоля[Реквизит.Значение].Представление = Реквизит.Представление;
		КонецЦикла;
		ПостроительОтчетаОтбора.УстановитьНастройки(СохраненныеНастройки);
		ОчиститьРезультатыПоиска();
		
		Если ЛксЛиМетаданныеОбъектаСГруппами(мМетаданныеОбъекта) Тогда
			Если ЛксНайтиЭлементКоллекцииПоПутиКДанным(ПостроительОтчетаОтбора.Отбор, "ЭтоГруппа") = Неопределено Тогда
				
				// Баг платформы 8.1.8.76
				ПостроительОтчетаОтбора.ДоступныеПоля.ЭтоГруппа.Порядок = Ложь;
				
				ПостроительОтчетаОтбора.Отбор.Добавить("ЭтоГруппа");
				ПостроительОтчетаОтбора.Отбор.ЭтоГруппа.Установить(Ложь);
			КонецЕсли;
		КонецЕсли;

		// Для подчиненных справочников ищем дубли только внутри одинаковых владельцев
		Если Истина
			И мКорневойТипОбъекта = "Справочник"
			И мМетаданныеОбъекта.Владельцы.Количество() > 0 
		Тогда
			Если ЛксНайтиЭлементКоллекцииПоПутиКДанным(ПостроительОтчетаОтбора.Порядок, "Владелец") = Неопределено Тогда
				ПостроительОтчетаОтбора.Порядок.Добавить("Владелец");
			КонецЕсли;
		КонецЕсли;
		
		ЭлементыФормы.Панель.Страницы.Результаты.Доступность = Истина;
	Иначе
		ПостроительОтчетаОтбора = Новый ПостроительОтчета;
		
		ЭлементыФормы.Панель.Страницы.Результаты.Доступность = Ложь;
	КонецЕсли;

КонецПроцедуры // ПриУстановкеПолногоИмениОбъекта()


Процедура ПослеВосстановленияЗначений()
	
	ПриУстановкеПолногоИмениОбъекта();
	НастройкиОтбора = ВосстановитьЗначение(Метаданные().ПолноеИмя() + ".ПостроительОтчетаОтбора.Настройки");
	Если НастройкиОтбора <> Неопределено Тогда
		ПостроительОтчетаОтбора.УстановитьНастройки(НастройкиОтбора);
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельНастройкиОтчетаНастройка(Кнопка)
	
	ФормаНастройки = ПолучитьФорму("ФормаНастройкиСовпадения");
	ФормаНастройки.ДопустимоеРазличиеСлов  = ДопустимоеРазличиеСлов;
	ФормаНастройки.ВыполнятьВТранзакции    = ВыполнятьВТранзакции;
	ФормаНастройки.ОтключатьКонтрольЗаписи = ОтключатьКонтрольЗаписи;
	
	Если ФормаНастройки.ОткрытьМодально() = Истина Тогда
		ДопустимоеРазличиеСлов  = ФормаНастройки.ДопустимоеРазличиеСлов;
		ВыполнятьВТранзакции    = ФормаНастройки.ВыполнятьВТранзакции;
		ОтключатьКонтрольЗаписи = ФормаНастройки.ОтключатьКонтрольЗаписи;
	КонецЕсли; 
	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНОЙ ПАНЕЛЕЙ ФОРМЫ "НастройкиОтчета"

Процедура КоманднаяПанельНастройкиОтчетаПоиск(Кнопка)
	
	Если ПустаяСтрока(ПолноеИмяОбъекта) Тогда
		Предупреждение("Не указаны все необходимые параметры поиска");
		Возврат;
	КонецЕсли;
	
	ЭлементыТекущейГруппы.Очистить();
	НайденныеГруппы.Очистить();
	НайденныеГруппы.Колонки.Очистить();
	мТекущаяГруппа = Неопределено;
	ОтборПоиска = ПостроительОтчетаОтбора.Отбор;
	
	мСтруктураПредставлений.Очистить();
	мСтруктураПредставлений.Вставить("КоличествоЭлементовВГруппе", "Количество элементов");
	мСтруктураПредставлений.Вставить("НомерГруппы", "Номер группы");
	Если ПостроительОтчетаОтбора.Порядок.Количество() > 0 Тогда 
		Если ЛксНайтиЭлементКоллекцииПоПутиКДанным(ПостроительОтчетаОтбора.Порядок, мПутьКДаннымПоляНечеткогоСравнения) <> Неопределено Тогда
			НайтиПоСовпадающимСловам(ОтборПоиска);
		Иначе
			НайтиПоРавенствуРеквизитов(ОтборПоиска);
		КонецЕсли;
	Иначе
		Предупреждение("Не указан режим поиска");
		Возврат;
	КонецЕсли;
	
	ЭлементыФормы.НайденныеГруппы.СоздатьКолонки();
	
	// Баг платформы. Колонка вставляется с дефолтным именем.
	КолонкаВывестиГруппу = ЭлементыФормы.НайденныеГруппы.Колонки.Вставить(0, "Вывести группу");
	КолонкаВывестиГруппу.Имя = "ВывестиГруппу";
	КолонкаВывестиГруппу.ТолькоПросмотр = Истина;
	Для Каждого ЭлементПредставления Из мСтруктураПредставлений Цикл
		Колонка = ЭлементыФормы.НайденныеГруппы.Колонки[ЭлементПредставления.Ключ];
		Колонка.ТекстШапки = ЭлементПредставления.Значение;
		Колонка.ТолькоПросмотр = Истина;
	КонецЦикла;
	ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы.Результаты;

	Если НайденныеГруппы.Количество() > 1 Тогда
		ЭлементыФормы.КоманднаяПанельНайденныеГруппы.Кнопки.СледующаяГруппа.Доступность = Истина;
		ЭлементыФормы.КоманднаяПанельНайденныеГруппы.Кнопки.ПредыдущаяГруппа.Доступность = Истина;
	КонецЕсли;
	
	ЛксОбновитьТекстПослеМаркераВСтроке(ЭлементыФормы.РамкаГруппыНайденныеГруппы, "Заголовок",
		Строка(НайденныеГруппы.Количество()) + " )", "(");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ "НастройкиОтчета"

Процедура НастройкиОтчетаТипСравненияПриИзменении(Элемент)
	ТекущиеДанные = ЭлементыФормы.НастройкиОтчета.ТекущиеДанные;
	
	Если (Элемент.Значение = "В списке" ИЛИ Элемент.Значение = "Не в списке")
		И ТипЗнч(ТекущиеДанные.Представление)<>Тип("СписокЗначения") Тогда
		МассивТипов = Новый Массив();
		МассивТипов.Добавить(ТипЗнч(ТекущиеДанные.Представление));
		ОписаниеТиповРеквизита = Новый ОписаниеТипов(МассивТипов);
		
		ОписаниеТиповСписка = Новый ОписаниеТипов("СписокЗначений");
		ТекущиеДанные.Представление = ОписаниеТиповСписка.ПривестиЗначение(ТекущиеДанные.Представление);
		ТекущиеДанные.Представление.ТипЗначения = ОписаниеТиповРеквизита;
		
	ИначеЕсли Элемент.Значение <> "В списке" И Элемент.Значение <> "Не в списке"
		И ТипЗнч(ТекущиеДанные.Представление)=Тип("СписокЗначения") Тогда
		
		ОписаниеТиповРеквизита = ТекущиеДанные.Представление.ТипЗначения;
		ТекущиеДанные.Представление = ОписаниеТиповРеквизита.ПривестиЗначение(ТекущиеДанные.Представление);		
				
	КонецЕсли;
	
КонецПроцедуры

Процедура НастройкиОтчетаТипСравненияОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНОЙ ПАНЕЛЕЙ ФОРМЫ "ЭлементыТекущейГруппы"

Процедура КоманднаяПанельЭлементыТекущейГруппыВыборПравильного(Кнопка)
	
	Если ЭлементыФормы.ЭлементыТекущейГруппы.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтрокаТаблицы = ЭлементыТекущейГруппы.Найти(Истина, "Правильный");
	Если СтрокаТаблицы <> Неопределено Тогда
		СтрокаТаблицы.Правильный = Ложь;
	КонецЕсли;
	ЭлементыФормы.ЭлементыТекущейГруппы.ТекущаяСтрока.Правильный = Истина;
	СброситьДоступность();
	
КонецПроцедуры

Процедура КоманднаяПанельЭлементыТекущейГруппыПоискСсылок(Кнопка)
	
	РезультатПоиска = ВыполнитьПоискСсылок();
	ЭлементыФормы.Панель.Страницы.НайденныеСсылки.Доступность = РезультатПоиска;
	Если РезультатПоиска Тогда
		ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы.НайденныеСсылки;
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельЭлементыТекущейГруппыПоискЗависимых(Кнопка)
	
	ВремТаблица = ЭлементыТекущейГруппы.Скопировать();
	СтрокаПравильного = ВремТаблица.Найти(Истина, "Правильный");
	Если СтрокаПравильного = Неопределено Тогда
		Предупреждение("Не определен правильный элемент");
		Возврат;
	КонецЕсли;
	
	НайденныеЗависимыеСсылки.Очистить();
	мЗависимыеМетаданные = Новый массив;
	ИмяОбъекта = ПолноеИмяОбъекта;
	Для каждого МетаданныеЗависимого Из Метаданные.Справочники Цикл
		СтрокаМетаданные = Неопределено;
		Если МетаданныеЗависимого.Владельцы.Содержит(мМетаданныеОбъекта) Тогда
			мЗависимыеМетаданные.Добавить(МетаданныеЗависимого);
		КонецЕсли; 
	КонецЦикла; 
	
	Правильный = СтрокаПравильного.Ссылка;
	ВремТаблица.Удалить(СтрокаПравильного);
	ЗависимыеОбъекты.Строки.Очистить();
	
	Для каждого МетаданныеЗависимого Из мЗависимыеМетаданные Цикл
		СтрокаМетаданные = Неопределено;
		Для каждого СтрокаНеПравильного Из ВремТаблица Цикл
			СтрокаОбъекта = Неопределено;
			НеПравильный = СтрокаНеПравильного.ссылка;
			МенеджерЗависимого = ЛксПолучитьМенеджер(МетаданныеЗависимого);
			Выборка = МенеджерЗависимого.Выбрать(,НеПравильный);
			Пока Выборка.Следующий() Цикл
				Если СтрокаМетаданные = Неопределено Тогда
					СтрокаМетаданные = ЗависимыеОбъекты.Строки.Добавить();
					СтрокаМетаданные.НеПравильный = МетаданныеЗависимого.Представление();
					СтрокаМетаданные.Правильный = МетаданныеЗависимого.Представление();
				КонецЕсли; 
				
				Если СтрокаОбъекта = Неопределено Тогда
					СтрокаОбъекта = СтрокаМетаданные.Строки.Добавить();
					СтрокаОбъекта.НеПравильный = НеПравильный;
					СтрокаОбъекта.Правильный = Правильный;
				КонецЕсли; 
				СтрокаЗависимого = СтрокаОбъекта.Строки.Добавить();
				СтрокаЗависимого.НеПравильный = Выборка.Ссылка;
				Пустой = МенеджерЗависимого.ПустаяСсылка();
				Похожий = МенеджерЗависимого.НайтиПоНаименованию(Выборка.Наименование, Ложь, , Правильный);
				Если Похожий <> Пустой Тогда
					СтрокаЗависимого.ВключатьВПоиск = Истина;
				КонецЕсли; 
				СтрокаЗависимого.Правильный = Похожий;
				
			КонецЦикла;
		КонецЦикла; 
		Если СтрокаМетаданные <> Неопределено Тогда
			ЭлементыФормы.ЗависимыеОбъекты.Развернуть(СтрокаМетаданные,Истина);
		КонецЕсли; 
	КонецЦикла; 
	ЭлементыФормы.Панель.Страницы.ЗависимыеЭлементы.Доступность = Истина;
	ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы.ЗависимыеЭлементы;
	
КонецПроцедуры

Процедура КоманднаяПанельНайденныеГруппыАвтозамена(Кнопка)
	
	ОбновитьТекущуюГруппуРезультатовПоиска();
	
	Если мРезультатыПоиска = Неопределено или Не мРезультатыПоиска.НайтиСтроки(Новый Структура("Правильный",Истина)).Количество() Тогда
		Предупреждение("Не определен правильный элемент ни в одной из групп.");
		Возврат;
	КонецЕсли;
	
	РезультатВопроса = Вопрос("При автоматической замене будет произведен поиск и замена
	|неправильных элементов, в группах, где определен правильный элемент.
	|
	|Выполнить непосредственное удаление объектов после замены элементов?", РежимДиалогаВопрос.ДаНетОтмена);
	Если РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	АвтозаменаЭлементов(РезультатВопроса = КодВозвратаДиалога.Да);
	ВывестиГруппу();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ "ЭлементыТекущейГруппы"

Процедура ЭлементыТекущейГруппыПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Отказ = Истина;
	ЕСли ПолноеИмяОбъекта = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ФормаВыбора = ЛксПолучитьМенеджер(мМетаданныеОбъекта).ПолучитьФормуВыбора(, Элемент);
	ФормаВыбора.Открыть();
	
КонецПроцедуры

Процедура ЭлементыТекущейГруппыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки.КоличествоСсылок = Неопределено Тогда
		ОформлениеСтроки.Ячейки.КоличествоСсылок.Текст = "?";
	КонецЕсли;
	
	Если ДанныеСтроки.Правильный<>Неопределено И ДанныеСтроки.Правильный Тогда
		ОформлениеСтроки.ЦветФона   = ЦветаСтиля.ЦветФонаФормы;
		ОформлениеСтроки.ЦветТекста = WebЦвета.ТемноСиний;
		ОформлениеСтроки.Ячейки.Ссылка.Шрифт = Новый Шрифт(,,Истина);
		
		ИмяКолонки = ПолучитьЗначениеНастройки("Имя реквизита");
		Если Не ИмяКолонки = Неопределено Тогда
			ЯчейкаРеквизита = ОформлениеСтроки.Ячейки.Найти("Р_" + ИмяКолонки);
			Если Не ЯчейкаРеквизита = Неопределено Тогда
				ЯчейкаРеквизита.Шрифт = Новый Шрифт(,,Истина);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЭлементыТекущейГруппыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущаяСсылка = Элемент.ТекущиеДанные.Ссылка;
	
	Если ЭлементыТекущейГруппы.НайтиСтроки(Новый Структура("Ссылка", ТекущаяСсылка)).Количество() > 1 Тогда
		Предупреждение("Элемент """ + ТекущаяСсылка + """ уже присутствует в списке!");
		ЭлементыТекущейГруппы.Удалить(Элемент.ТекущиеДанные);
		ОбновитьТекущуюГруппуРезультатовПоиска();
	Иначе
		ОбновитьСтрокуРезультатовПоиска(Элемент.ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры


Процедура ЭлементыТекущейГруппыПослеУдаления(Элемент)
	
	ОбновитьТекущуюГруппуРезультатовПоиска();
	
КонецПроцедуры

Процедура ЭлементыТекущейГруппыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип(мКорневойТипОбъекта + "Ссылка." + мМетаданныеОбъекта.Имя) Тогда
		
		НоваяСтрокаНайденных = ЭлементыТекущейГруппы.Найти(ВыбранноеЗначение, "Ссылка");
		Если НоваяСтрокаНайденных = Неопределено Тогда
			НоваяСтрокаНайденных = ЭлементыТекущейГруппы.Добавить();
			НоваяСтрокаНайденных.Ссылка = ВыбранноеЗначение;
			НоваяСтрокаНайденных.Правильный = Ложь;
			НоваяСтрокаНайденных.НомерГруппы = мТекущаяГруппа.НомерГруппы;
			ОбновитьСтрокуРезультатовПоиска(НоваяСтрокаНайденных);
			ОбновитьТекущуюГруппуРезультатовПоиска();
		КонецЕсли; 
		ЭлементыФормы.ЭлементыТекущейГруппы.ТекущаяСтрока = НоваяСтрокаНайденных;
		
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНОЙ ПАНЕЛЕЙ ФОРМЫ "НайденныеСсылки"

Процедура КоманднаяПанельНайденныеСсылкиВыполнитьЗамену(Кнопка)
	
	СтрокаПравильного = ЭлементыТекущейГруппы.Найти(Истина, "Правильный");
	Если СтрокаПравильного = Неопределено Тогда
		Предупреждение("Не определен правильный элемент");
		Возврат;
	КонецЕсли;

	ВыполнитьЗаменуЭлементов(СтрокаПравильного.Ссылка, НайденныеСсылки);
	ВыполнитьПоискСсылок();

КонецПроцедуры

Процедура КоманднаяПанельНайденныеСсылкиУдалитьЭлементы(Кнопка)
	
	Если НайденныеСсылки.Количество()>0 Тогда
		Предупреждение("На элементы есть ссылки");
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("НомерГруппы", мТекущаяГруппа.НомерГруппы);
	
	СтрокиКУдалению = Новый ТаблицаЗначений;
	СтрокиКУдалению.Колонки.Добавить("СтрокаТаблицы");
	СтрокиКУдалению.Колонки.Добавить("ТаблицаЗначений");
	
	БылиИсключения = Ложь;
	ЕСли ВыполнятьВТранзакции Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	МассивСтрок  = ЭлементыТекущейГруппы.НайтиСтроки(Новый Структура("Правильный", Ложь));
	Для Каждого Строка ИЗ МассивСтрок Цикл
	
		СтруктураПоиска.Вставить("Ссылка", Строка.Ссылка);
		МассивРезультатов = мРезультатыПоиска.НайтиСтроки(СтруктураПоиска);
		
		Объект = Строка.Ссылка.ПолучитьОбъект();
		Попытка
			Объект.Удалить();
		Исключение
			Если ВыполнятьВТранзакции Тогда
				БылиИсключения = Истина;
				Прервать;
			КонецЕсли;
		КонецПопытки;
		
		
		Если МассивРезультатов.Количество()>0 Тогда
			НовСтр = СтрокиКУдалению.Добавить();
			НовСтр.СтрокаТаблицы = МассивРезультатов[0];
			НовСтр.ТаблицаЗначений = мРезультатыПоиска;
		КонецЕсли;
		
		НовСтр = СтрокиКУдалению.Добавить();
		НовСтр.СтрокаТаблицы = Строка;
		НовСтр.ТаблицаЗначений = ЭлементыТекущейГруппы;
		
	КонецЦикла;
	
	Если Не БылиИсключения Тогда
		Для каждого Строка0 Из ЗависимыеОбъекты.Строки Цикл
			Для каждого Строка1 Из Строка0.Строки Цикл
				Для каждого Строка2 Из Строка1.Строки Цикл
					Если Строка2.ВключатьВПоиск Тогда
						Объект = Строка2.НеПравильный.ПолучитьОбъект();		
						Попытка
							Объект.Удалить();
						Исключение
							Если ВыполнятьВТранзакции Тогда
								БылиИсключения = Истина;
								Прервать;
							КонецЕсли;
						КонецПопытки;
					КонецЕсли; 
				КонецЦикла; 
				Если БылиИсключения Тогда
					Прервать;
				КонецЕсли; 
			КонецЦикла; 
			Если БылиИсключения Тогда
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
	Если ВыполнятьВТранзакции Тогда
		Если БылиИсключения Тогда
			ОтменитьТранзакцию();
		Иначе
			ЗафиксироватьТранзакцию();
		КонецЕсли;
	КонецЕсли;	
	Если НЕ БылиИсключения Тогда
		Для Каждого СтрокаКУдалению ИЗ СтрокиКУдалению Цикл
			СтрокаКУдалению.ТаблицаЗначений.Удалить(СтрокаКУдалению.СтрокаТаблицы);
		КонецЦикла;
		ЗависимыеОбъекты.Строки.Очистить();
	КонецЕсли;
	
	ОбновитьТекущуюГруппуРезультатовПоиска();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ "НайденныеСсылки"

Процедура НайденныеСсылкиПередНачаломИзменения(Элемент, Отказ)
	
	Данные = Элемент.ТекущиеДанные.Данные;
	Если ЛксЛиКлючЗаписиРегистра(Данные) Тогда 
		МенеджерЗначения = ЛксПолучитьМенеджер(Данные);
		ФормаСписка = МенеджерЗначения.ПолучитьФормуСписка();
		ФормаСписка.ПараметрТекущаяСтрока = Данные;
		ФормаСписка.Открыть();
	Иначе
		ОткрытьЗначение(Данные);
	КонецЕсли;	
	Отказ = Истина;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНОЙ ПАНЕЛЕЙ ФОРМЫ "ЗависимыеОбъекты"

Процедура КоманднаяПанельЗависимыеОбъектыПоискСсылок(Кнопка)
	ПоискЗависимыхСсылок();
	ЭлементыФормы.КоманднаяПанельЗависимыеОбъекты.Кнопки.ВыполнитьЗамену.Доступность = Истина;
КонецПроцедуры

Процедура КоманднаяПанельЗависимыеОбъектыВыполнитьЗамену(Кнопка)
	
	ЕСли мФормаИндикатора<>Неопределено Тогда
		мФормаИндикатора.КомментарийОбработкиДанных = "Замена значений";
		мФормаИндикатора.ВладелецФормы = ЭтаФорма;
		мФормаИндикатора.Открыть();
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура;
	МассивСтрокВключенныхВПоиск = ЗависимыеОбъекты.Строки.НайтиСтроки(Новый Структура("ВключатьВПоиск", Истина), Истина);
	
	НомерСтроки = 0;
	Для каждого Строка Из МассивСтрокВключенныхВПоиск Цикл
		НомерСтроки = НомерСтроки + 1;
		
		СтруктураОтбора.Вставить("Ссылка",Строка.НеПравильный);
		МассивСтрок = НайденныеЗависимыеСсылки.НайтиСтроки(СтруктураОтбора);
		ВыполнитьЗаменуЭлементов(Строка.Правильный, МассивСтрок, " Элемент " + НомерСтроки + " из " + МассивСтрокВключенныхВПоиск.Количество());
	КонецЦикла;
	
	ПоискЗависимыхСсылок();
	ЕСли мФормаИндикатора<>Неопределено Тогда
		мФормаИндикатора.Закрыть();
	КонецЕсли;
КонецПроцедуры

Процедура КоманднаяПанельЗависимыеОбъектыУдалитьЭлементы(Кнопка)
	Если НайденныеЗависимыеСсылки.Количество()>0 Тогда
		Предупреждение("На элементы есть ссылки");
		Возврат;
	КонецЕсли;
	
	БылиИсключения = Ложь;
	ЕСли ВыполнятьВТранзакции Тогда
		НачатьТранзакцию();
	КонецЕсли;
	СтрокиКУдалению = Новый ТаблицаЗначений;
	СтрокиКУдалению.Колонки.Добавить("СтрокаТаблицы");
	СтрокиКУдалению.Колонки.Добавить("ТаблицаЗначений");
	
	Для каждого Строка0 Из ЗависимыеОбъекты.Строки Цикл
		Для каждого Строка1 Из Строка0.Строки Цикл
			Для каждого Строка2 Из Строка1.Строки Цикл
				Если Строка2.ВключатьВПоиск Тогда
					Объект = Строка2.НеПравильный.ПолучитьОбъект();
					Попытка
						Объект.Удалить();
					Исключение
						Если ВыполнятьВТранзакции Тогда
							БылиИсключения = Истина;
							Прервать;
						КонецЕсли;
					КонецПопытки;
					НовСтр = СтрокиКУдалению.Добавить();
					НовСтр.СтрокаТаблицы = Строка2;
					НовСтр.ТаблицаЗначений = ЗависимыеОбъекты;
				КонецЕсли; 
			КонецЦикла; 
		КонецЦикла; 
	КонецЦикла; 
	
	Если ВыполнятьВТранзакции Тогда
		Если БылиИсключения Тогда
			ОтменитьТранзакцию();
		Иначе
			ЗафиксироватьТранзакцию();
		КонецЕсли;
	КонецЕсли;	
	Если НЕ БылиИсключения Тогда
		Для Каждого СтрокаКУдалению ИЗ СтрокиКУдалению Цикл
			СтрокаКУдалению.ТаблицаЗначений.Строки.Удалить(СтрокаКУдалению.СтрокаТаблицы);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ "НайденныеЗависимыеСсылки"

Процедура НайденныеЗависимыеСсылкиПередНачаломИзменения(Элемент, Отказ)
	
	Данные = Элемент.ТекущиеДанные.Данные;
	Если ЛксЛиКлючЗаписиРегистра(Данные) Тогда 
		МенеджерЗначения = ЛксПолучитьМенеджер(Данные);
		ФормаСписка = МенеджерЗначения.ПолучитьФормуСписка();
		ФормаСписка.ПараметрТекущаяСтрока = Данные;
		ФормаСписка.Открыть();
	Иначе
		ОткрытьЗначение(Данные);
	КонецЕсли;	
	Отказ = Истина;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ "ЗависимыеОбъекты"

Процедура ЗависимыеОбъектыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	ОформлениеСтроки.Ячейки.ВключатьВПоиск.ОтображатьТекст = Ложь;
	Если ДанныеСтроки.Уровень() = 1  Тогда
		ОформлениеСтроки.ЦветФона   = ЦветаСтиля.ЦветФонаФормы;
		ОформлениеСтроки.ЦветТекста = WebЦвета.ТемноСиний;
		ОформлениеСтроки.Ячейки.ВключатьВПоиск.ОтображатьФлажок = Ложь;
	ИначеЕсли ДанныеСтроки.Уровень() = 0  Тогда
		ОформлениеСтроки.ЦветФона   = ЦветаСтиля.ЦветФонаФормы;
		ОформлениеСтроки.ЦветТекста = WebЦвета.ТемноСиний;
		ОформлениеСтроки.Шрифт = Новый Шрифт(,,Истина);
		ОформлениеСтроки.Ячейки.ВключатьВПоиск.ОтображатьФлажок = Ложь;
	Иначе
//		ОформлениеСтроки.Ячейки.ВключатьВПоиск.ОтображатьФлажок = Истина;
	КонецЕсли; 
КонецПроцедуры

Процедура ЗависимыеОбъектыПравильныйНачалоВыбора(Элемент, СтандартнаяОбработка)
	ТекущиеДанные = ЭлементыФормы.ЗависимыеОбъекты.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТекущиеДанные.Уровень() = 2 Тогда
			Элемент.ВыборПоВладельцу = ТекущиеДанные.Родитель.Правильный;
		Иначе
			СтандартнаяОбработка = Ложь;
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры

Процедура ОпределитьПравильныеЭлементы() Экспорт
	
	Если мРезультатыПоиска.Колонки.Найти("КоличествоСсылок") = Неопределено Тогда
		мРезультатыПоиска.Колонки.Добавить("КоличествоСсылок");
	КонецЕсли;
	
	мРезультатыПоиска.ЗаполнитьЗначения(Ложь, "Правильный");
	
	ТаблицаСсылок = НайтиПоСсылкам(мРезультатыПоиска.ВыгрузитьКолонку("Ссылка"));
	ТаблицаСсылок.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	ТаблицаСсылок.ЗаполнитьЗначения(1,"Количество");
	ТаблицаСсылок.Свернуть("Ссылка", "Количество");
	СоответствиеСсылок = Новый Соответствие;
	Для каждого Строка Из ТаблицаСсылок Цикл
		СоответствиеСсылок.Вставить(Строка.Ссылка, Строка.Количество);
	КонецЦикла;
	СтрокиПравильных = Новый Соответствие;
	Для каждого Строка Из мРезультатыПоиска Цикл
		КоличествоСсылок = СоответствиеСсылок[Строка.Ссылка];
		КоличествоСсылок = ?(КоличествоСсылок = Неопределено, 0, КоличествоСсылок);
		Строка.КоличествоСсылок = ?(КоличествоСсылок = Неопределено, 0, КоличествоСсылок);
		
		НомерГруппы = Строка.НомерГруппы;
		
		СтрокаПравильного = СтрокиПравильных[НомерГруппы];
		Если СтрокаПравильного = Неопределено или СтрокаПравильного.КоличествоСсылок < КоличествоСсылок Тогда
			СтрокиПравильных.Вставить(НомерГруппы, Строка);
		КонецЕсли; 
		
	КонецЦикла;
	
	Для каждого СтрокаПравильного Из СтрокиПравильных Цикл
		СтрокаПравильного.Значение.Правильный = Истина;
	КонецЦикла;
	
КонецПроцедуры // () 

Процедура КоманднаяПанельНайденныеГруппыПредыдущаяГруппа(Кнопка)
	
	Если мТекущаяГруппа = НайденныеГруппы[0] Тогда
		Возврат;
	КонецЕсли;
	ОбновитьТекущуюГруппуРезультатовПоиска();
	
	мТекущаяГруппа = НайденныеГруппы[НайденныеГруппы.Индекс(мТекущаяГруппа) - 1];
	ВывестиГруппу();
	
КонецПроцедуры

Процедура КоманднаяПанельНайденныеГруппыСледующаяГруппа(Кнопка)
	
	ОбновитьТекущуюГруппуРезультатовПоиска();
	Если мТекущаяГруппа = НайденныеГруппы[НайденныеГруппы.Количество() - 1] Тогда
		Возврат;
	КонецЕсли;
	мТекущаяГруппа = НайденныеГруппы[НайденныеГруппы.Индекс(мТекущаяГруппа) + 1];
	ВывестиГруппу();
	
КонецПроцедуры

Процедура ПередСохранениемЗначений(Отказ)
	
	СохранитьЗначение(Метаданные().ПолноеИмя() + ".ПостроительОтчетаОтбора.Настройки", ПостроительОтчетаОтбора.ПолучитьНастройки());
	
КонецПроцедуры

Процедура ПолноеИмяОбъектаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	МассивКоневыхТиповМножественных = Новый Массив;
	МассивКоневыхТиповМножественных.Добавить("Справочники");
	МассивКоневыхТиповМножественных.Добавить("ПланыВидовХарактеристик");
	МассивКоневыхТиповМножественных.Добавить("ПланыСчетов");
	МассивКоневыхТиповМножественных.Добавить("ПланыВидовРасчета");
	РезультатВыбора = ЭтотОбъект.ВыбратьТип(Элемент.Значение, МассивКоневыхТиповМножественных);
	Если РезультатВыбора <> Неопределено Тогда
		ПолноеИмяОбъекта = РезультатВыбора;
		ПриУстановкеПолногоИмениОбъекта();
	КонецЕсли;
	СтандартнаяОбработка = Ложь;

КонецПроцедуры

Процедура НастройкаСравненияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки.ПутьКДанным = мПутьКДаннымПоляНечеткогоСравнения Тогда
		ОформлениеСтроки.ЦветФона = WebЦвета.Аквамарин;
		ОформлениеСтроки.Ячейки.ТипСравнения.УстановитьТекст("По похожим словам");
	Иначе
		Если Не ДанныеСтроки.ПутьКДанным = "КоличествоЭлементовВГруппе" Тогда
			ОформлениеСтроки.Ячейки.ТипСравнения.УстановитьТекст("По равному значению реквизита");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельНастройкиОтчетаСравниватьПоПохожимСловам(Кнопка)
	
	ДанныеНастройки = ЭлементыФормы.НастройкаСравнения.ТекущиеДанные;
	Если ДанныеНастройки <> Неопределено Тогда
		Если мПутьКДаннымПоляНечеткогоСравнения = ДанныеНастройки.ПутьКДанным Тогда
			мПутьКДаннымПоляНечеткогоСравнения = "";
		Иначе
			ДоступноеПоле = ЛксНайтиПолеНастройкиПоПутиКДанным(ПостроительОтчетаОтбора.ДоступныеПоля, ДанныеНастройки.ПутьКДанным);
			ЛиСтроковыйТип = ДоступноеПоле.ТипЗначения.СодержитТип(Тип("Строка"));
			Если ЛиСтроковыйТип Тогда
				мПутьКДаннымПоляНечеткогоСравнения = ДанныеНастройки.ПутьКДанным;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ЭлементыФормы.НастройкаСравнения.ОбновитьСтроки();
	
КонецПроцедуры

Процедура ПолноеИмяОбъектаОчистка(Элемент, СтандартнаяОбработка)
	
	Элемент.Значение = "";
	ПриУстановкеПолногоИмениОбъекта();
	
КонецПроцедуры

Процедура НастройкаСравненияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если Элемент.ТекущаяСтрока.ПутьКДанным = Неопределено Тогда
		Элемент.Значение.Удалить(Элемент.Значение.Индекс(Элемент.ТекущаяСтрока));
	КонецЕсли;
	
КонецПроцедуры

Процедура НайденныеГруппыВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если Элемент.ТекущаяСтрока <> Неопределено Тогда
		Если Колонка.Имя = "ВывестиГруппу" Тогда
			ОбновитьТекущуюГруппуРезультатовПоиска();
			ВывестиГруппу(Элемент.ТекущаяСтрока);
		Иначе
			ЗначениеЯчейки = Элемент.ТекущаяСтрока[Колонка.Имя];
			КорневойТипЗначения = ЛксПолучитьКорневойТипКонфигурации(ЗначениеЯчейки);
			Если КорневойТипЗначения <> Неопределено Тогда
				ОткрытьЗначение(ЗначениеЯчейки);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура НайденныеГруппыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки = мТекущаяГруппа Тогда
		ОформлениеСтроки.ЦветФона = Новый Цвет(255, 200, 200);
	КонецЕсли;
	ОформлениеСтроки.Ячейки.ВывестиГруппу.УстановитьТекст(">>>");
	ОформлениеСтроки.Ячейки.ВывестиГруппу.ЦветФона = WebЦвета.Аквамарин;
	
КонецПроцедуры

Процедура КоманднаяПанельНайденныеГруппыАвтоопределениеПравильных(Кнопка)

	ОбновитьТекущуюГруппуРезультатовПоиска();
	ОпределитьПравильныеЭлементы();
	
	ВывестиГруппу();

КонецПроцедуры

Процедура КоманднаяПанельЭлементыТекущейГруппыАвтоопределениеПравильных(Кнопка)
	// Вставить содержимое обработчика.
КонецПроцедуры

Процедура НайденныеГруппыПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

Процедура НайденныеГруппыПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Если Копирование Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура НайденныеГруппыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	КопияТаблицы = НайденныеГруппы.Скопировать(, "НомерГруппы");
	КопияТаблицы.Сортировать("НомерГруппы Убыв");
	Если КопияТаблицы.Количество() > 1 Тогда
		ПоследнийНомер = КопияТаблицы[0].НомерГруппы;
	Иначе
		ПоследнийНомер = 0;
	КонецЕсли;
	Элемент.ТекущаяСтрока.НомерГруппы = ПоследнийНомер + 1;
	ЛксОбновитьТекстПослеМаркераВСтроке(ЭлементыФормы.РамкаГруппыНайденныеГруппы, "Заголовок",
		Строка(НайденныеГруппы.Количество()) + " )", "(");
	ВывестиГруппу(Элемент.ТекущаяСтрока);

КонецПроцедуры

Процедура ЗависимыеОбъектыПриАктивизацииСтроки(Элемент)
	
	Элемент.Колонки.Правильный.ЭлементУправления.КнопкаВыбора = (Элемент.ТекущаяСтрока.Уровень() = 2);
	Элемент.Колонки.Правильный.ТолькоПросмотр   = (Элемент.ТекущаяСтрока.Уровень() = 0);
	Элемент.Колонки.НеПравильный.ТолькоПросмотр = (Элемент.ТекущаяСтрока.Уровень() = 0);
	
КонецПроцедуры

мПутьКДаннымПоляНечеткогоСравнения = "";
мСтруктураПредставлений = Новый Структура;
мСписокРеквизитов = Новый СписокЗначений;

