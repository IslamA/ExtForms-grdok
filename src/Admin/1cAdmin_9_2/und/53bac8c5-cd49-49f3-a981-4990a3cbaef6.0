{3,
{42,0,1,0,0,1,0,0,00000000-0000-0000-0000-000000000000,1,
{1,0},0,0,1,0,1,0,0,0,
{1,9f2e5ddb-3492-4f5d-8f0d-416b8d1d5c5b,"ПриСозданииНаСервере",1,0,9f2e5ddb-3492-4f5d-8f0d-416b8d1d5c5b,0,1},
{0},1,
{21,
{-1,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},9,"ФормаКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{0,0,1},0,1,0,0,0,3,3},4,cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{42,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},5,"ГруппаПоиска",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{23,1,0,0,0,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0},0,0,3,3,2,0,1,1},3,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{3,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},2,"СтрокаПоиска",0,0,
{1,0},
{1,1,
{"ru","Введите искомый текст или часть фразы"}
},
{1,
{2}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,0,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,0,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern",
{"S"}
},1,
{1,f72043b8-2d79-414e-bc4e-3972fe9dbca1,"СтрокаПоискаОбработкаВыбора",1,0,f72043b8-2d79-414e-bc4e-3972fe9dbca1,0,1},
{3,4,
{0}
},
{3,4,
{0}
},
{3,3,
{-22}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{1,fe115cc8-9e33-4684-a166-bd5136fe7a9f,"СтрокаПоискаПриИзменении",1,0,fe115cc8-9e33-4684-a166-bd5136fe7a9f,0,1},1,
{21,
{6,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"СтрокаПоискаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{67,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СтрокаПоискаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{4,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},1,"Найти",
{1,0},1,
{2,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},2,1,0,0,2,2,10,1,0,
{3,3,
{-7}
},
{3,4,
{0}
},
{3,3,
{-22}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",0,0,1,
{10,
{68,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"НайтиРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,1,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{65,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},1,"Справка",
{1,0},1,
{5,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{69,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СправкаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,1,0},1,0,1,
{10,
{66,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаПоискаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{31,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},5,"ГруппаИнформацияОНайденном",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{23,1,0,0,0,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0},0,0,3,3,2,0,1,1},2,cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{51,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},0,"ГруппаНавигация",
{1,0},
{1,0},0,1,0,0,0,0,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,0,
{0}
},2,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{8,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"Назад",
{1,0},1,
{4,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,1,0,
{3,3,
{-7}
},
{3,4,
{0}
},
{3,3,
{-22}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",0,0,1,
{10,
{72,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"НазадРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{9,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"Далее",
{1,0},1,
{3,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},2,0,0,0,2,2,0,1,0,
{3,3,
{-7}
},
{3,4,
{0}
},
{3,3,
{-22}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",0,0,1,
{10,
{73,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДалееРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},1,0,1,
{10,
{71,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаНавигацияРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{16,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},1,"ПоказаныРезультаты_С_По",0,0,
{1,0},
{1,0},
{1,
{7}
},
{0},1,0,1,0,2,
{1,0},
{1,0},1,1,0,3,0,0,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{11,0,0,1,2,2,
{1,0},0,
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},2,
{0,1,0},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e},1,0,0,1,0},
{0,1,0},1,
{21,
{17,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ПоказаныРезультаты_С_ПоКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{74,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПоказаныРезультаты_С_ПоРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},1,0,1,
{10,
{70,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаИнформацияОНайденномРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{39,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},15,"HTMLТекст",0,0,
{1,0},
{1,0},
{1,
{14}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{3,50,10,
{3,4,
{0}
},0,
{1,da8dfb86-c5d1-4e35-a8a4-01b167a60ad3,"HTMLТекстПриНажатии",1,0,da8dfb86-c5d1-4e35-a8a4-01b167a60ad3,0,1},1,0,0,1,0,1,1},
{0,1,0},1,
{21,
{40,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"HTMLТекстКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{75,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"HTMLТекстРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{45,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},5,"ГруппаОбновлениеИндекса",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{23,1,0,0,0,
{0},
{1,0},
{"Pattern"},"",
{3,4,
{0}
},0,0,0,1,
{1,0},0,0,3,3,2,0,1,1},2,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{48,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},1,"ОбновитьИндекс",
{1,0},1,
{1,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",0,0,1,
{10,
{77,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ОбновитьИндексРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,1,0},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{49,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},1,"СостояниеИндекса",0,0,
{1,0},
{1,0},
{1,
{5}
},
{0},1,0,1,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{11,0,0,2,2,2,
{1,0},0,
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},2,
{0,1,0},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e},1,0,0,1,0},
{0,1,0},1,
{21,
{50,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"СостояниеИндексаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{78,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СостояниеИндексаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},1,0,1,
{10,
{76,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаОбновлениеИндексаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},"","",1,
{21,
{0},0,0,1,
{0,
{0,
{"B",1},0}
},7,"Navigator",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,0,1,0,1,
{10,
{0},0,0,0,0,"NavigatorРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},1,"",2,2,0,0,0,0,3,3,0,0,2},"
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство(""АвтоТест"") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Объект.Настройки = Параметры.Настройки;
	ЗаполнитьЗначенияСвойств(Объект, Объект.Настройки);
	РежимИспользованияМодальностиБулево = Объект.РежимИспользованияМодальностиБулево;
	
	СтрокаСоединенияСБД = СтрокаСоединенияИнформационнойБазы();
	ЭтоФайловаяБаза = ИнформационнаяБазаФайловая(СтрокаСоединенияСБД);
	Элементы.ГруппаОбновлениеИндекса.Видимость = ЭтоФайловаяБаза;
	Если ЭтоФайловаяБаза Тогда
		ОбновитьАктуальностьИндекса();
	КонецЕсли;
	
	ТекущаяПозиция = 0;
	
	Элементы.Далее.Доступность = Ложь;
	Элементы.Назад.Доступность = Ложь;
	
	Массив = ХранилищеОбщихНастроекЗагрузить(""ПолнотекстовыйПоискСтрокиПолнотекстовогоПоиска"");
	
	Если Массив <> Неопределено Тогда
		Элементы.СтрокаПоиска.СписокВыбора.ЗагрузитьЗначения(Массив);
	КонецЕсли;
	
	Если Не ПустаяСтрока(Параметры.ПереданнаяСтрокаПоиска) Тогда
		СтрокаПоиска = Параметры.ПереданнаяСтрокаПоиска;
		
		СохранитьСтрокуПоиска(Элементы.СтрокаПоиска.СписокВыбора, СтрокаПоиска);
		Попытка
			Результат = ВыполнитьПоискСервер(0, ТекущаяПозиция, СтрокаПоиска);
		Исключение	
			СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			Возврат;
		КонецПопытки;
		
		РезультатыПоиска = Результат.РезультатПоиска;
		HTMLТекст = Результат.HTMLТекст;
		ТекущаяПозиция = Результат.ТекущаяПозиция;
		ПолноеКоличество = Результат.ПолноеКоличество;
		
		Если РезультатыПоиска.Количество() <> 0 Тогда
			
			ПоказаныРезультатыСПо = ПодставитьПараметрыВСтроку(
			                            НСтр(""ru = 'Показаны %1 - %2 из %3'""),
			                            Строка(ТекущаяПозиция + 1),
			                            Строка(ТекущаяПозиция + РезультатыПоиска.Количество()),
			                            Строка(ПолноеКоличество) );
			
			Элементы.Далее.Доступность = (ПолноеКоличество - ТекущаяПозиция) > РезультатыПоиска.Количество();
			Элементы.Назад.Доступность = (ТекущаяПозиция > 0);
		Иначе
			ПоказаныРезультатыСПо = НСтр(""ru = 'Не найдено'"");
			Элементы.Далее.Доступность = Ложь;
			Элементы.Назад.Доступность = Ложь;
		КонецЕсли;
	Иначе
		HTMLТекст = 
		""<html>
		|<head>
		|<meta http-equiv=""""Content-Style-Type"""" content=""""text/css"""">
		|</head>
		|<body topmargin=0 leftmargin=0 scroll=auto>
		|<table border=""""0"""" width=""""100%"""" cellspacing=""""5"""">
		|</table>
		|</body>
		|</html>"";
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	
	Отказ = Ложь;
	
	Искать(0, Отказ);
	
	Если НЕ Отказ Тогда
		ТекущийЭлемент = Элементы.СтрокаПоиска;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтрокаПоиска = ВыбранноеЗначение;
	Искать(0);
	
КонецПроцедуры

&НаКлиенте
Процедура HTMLТекстПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	ЭлементHTML = ДанныеСобытия.Anchor;
	
	Если ЭлементHTML = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если (ЭлементHTML.id = ""FullTextSearchListItem"") Тогда
		СтандартнаяОбработка = Ложь;
		
		ЧастьURL = ЭлементHTML.outerHTML;
		Позиция = Найти(ЧастьURL, ""sel_num="");
		ЧастьURLОбрезанная = Сред(ЧастьURL, Позиция + 9);
		ПозицияОкончание = Найти(ЧастьURLОбрезанная, """""""");
		Если ПозицияОкончание = 0 Тогда
			ПозицияОкончание = Найти(ЧастьURLОбрезанная, ""'"");
			Если ПозицияОкончание = 0 Тогда
				ПозицияОкончание = 2;
			КонецЕсли;
		КонецЕсли;
		Если Позиция <> 0 Тогда
			ЧастьURL = Сред(ЧастьURLОбрезанная, 1, ПозицияОкончание - 1);
		КонецЕсли;
			
		НомерВСписке = Число(ЧастьURL);
		СтруктураРезультата = РезультатыПоиска[НомерВСписке].Значение;
		ВыбраннаяСтрока = СтруктураРезультата.Значение;
		МассивОбъектов = СтруктураРезультата.ЗначенияДляОткрытия;
		
		Если МассивОбъектов.Количество() = 1 Тогда
			ОткрытьЗначениеПоиска(МассивОбъектов[0]);
		ИначеЕсли МассивОбъектов.Количество() <> 0 Тогда
			Список = Новый СписокЗначений;
			Для Каждого ЭлементМассива Из МассивОбъектов Цикл
				Список.Добавить(ЭлементМассива);
			КонецЦикла;
			
			//Обработчик = Новый ОписаниеОповещения(""HTMLТекстПриНажатииПослеВыбораИзСписка"", ЭтотОбъект);
			Обработчик = Вычислить(""Новый ОписаниеОповещения(""""HTMLТекстПриНажатииПослеВыбораИзСписка"""", ЭтаФормаЭтотОбъект())"");
			ПоказатьВыборИзСписка(Обработчик, Список, Элементы.HTMLТекст);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ЭтаФормаЭтотОбъект()
	Попытка
		Возврат Вычислить(""ЭтаФорма"");
	Исключение
		Возврат Вычислить(""ЭтотОбъект"");
	КонецПопытки;
КонецФункции

&НаКлиенте
Процедура ВыполнитьПоиск(Команда)
	
	Искать(0);
	
КонецПроцедуры

&НаКлиенте
Процедура Следующие(Команда)
	
	Искать(1);
	
КонецПроцедуры

&НаКлиенте
Процедура Предыдущие(Команда)
	
	Искать(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИндекс(Команда)
	
	Состояние(НСтр(""ru = 'Идет обновление полнотекстового индекса...
	|Пожалуйста, подождите.'""));
	
	ОбновитьИндексСервер();
	
	Состояние(НСтр(""ru = 'Обновление полнотекстового индекса завершено.'""));
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗначениеПоиска(Значение)
	
	ПоказатьЗначение(, Значение);

КонецПроцедуры

&НаКлиенте
Процедура Искать(Направление, Отказ = Неопределено)
	// Процедура поиска, получение и отображение результата
	
	Если ПустаяСтрока(СтрокаПоиска) Тогда
		СообщитьПользователю(НСтр(""ru = 'Введите, что нужно найти.'""), , ""СтрокаПоиска"");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ЭтоНавигационнаяСсылка = Найти(СтрокаПоиска, ""e1cib/data/"") <> 0;
	Если ЭтоНавигационнаяСсылка Тогда
		ПерейтиПоНавигационнойСсылке(СтрокаПоиска);
		СтрокаПоиска = """";
		Возврат;
	КонецЕсли;
	
	Состояние(ПодставитьПараметрыВСтроку(НСтр(""ru = 'Выполняется поиск """"%1""""...'""), СтрокаПоиска));
	
	СписокВыбора = Элементы.СтрокаПоиска.СписокВыбора.Скопировать();
	Результат = СохранитьСтрокуИВыполнитьПоискСервер(Направление, ТекущаяПозиция, СтрокаПоиска, СписокВыбора);
	Элементы.СтрокаПоиска.СписокВыбора.Очистить();
	Для Каждого ЭлементСпискаВыбора Из СписокВыбора Цикл
		Элементы.СтрокаПоиска.СписокВыбора.Добавить(ЭлементСпискаВыбора.Значение, ЭлементСпискаВыбора.Представление);
	КонецЦикла;
	
	Если Элементы.ГруппаОбновлениеИндекса.Видимость Тогда
		ОбновитьАктуальностьИндекса();
	КонецЕсли;
	
	РезультатыПоиска = Результат.РезультатПоиска;
	HTMLТекст = Результат.HTMLТекст;
	ТекущаяПозиция = Результат.ТекущаяПозиция;
	ПолноеКоличество = Результат.ПолноеКоличество;
	
	Если РезультатыПоиска.Количество() > 0 Тогда
		
		ПоказаныРезультатыСПо = ПодставитьПараметрыВСтроку(
			НСтр(""ru = 'Показаны %1 - %2 из %3'""),
			Формат(ТекущаяПозиция + 1, ""ЧН=0; ЧГ=""),
			Формат(ТекущаяПозиция + РезультатыПоиска.Количество(), ""ЧН=0; ЧГ=""),
			Формат(ПолноеКоличество, ""ЧН=0; ЧГ=""));
		
		Элементы.Далее.Доступность = (ПолноеКоличество - ТекущаяПозиция) > РезультатыПоиска.Количество();
		Элементы.Назад.Доступность = (ТекущаяПозиция > 0);
		
		Если Направление = 0 И Результат.ТекущаяПозиция = 0 И Результат.СлишкомМногоРезультатов Тогда
			ПоказатьПредупреждение(, НСтр(""ru = 'Слишком много результатов, уточните запрос.'""));
		КонецЕсли;
	
	Иначе
		
		ПоказаныРезультатыСПо = НСтр(""ru = 'Не найдено'"");
		
		Элементы.Далее.Доступность = Ложь;
		Элементы.Назад.Доступность = Ложь;
		
		ТекстПоиска = ПодставитьПараметрыВСтроку(
			НСтр(""ru = 'Комбинация слов """"%1"""" нигде не встречается.<br><br>
			|<b>Рекомендации:</b>
			|<li>Убедитесь, что все слова написаны без ошибок.
			|<li>Попробуйте использовать другие ключевые слова.
			|<li>Попробуйте уменьшить количество искомых слов.'""),
			СокрЛП(СтрокаПоиска));
		
		HTMLТекст = 
		""<html>
		|<head>
		|<meta http-equiv=""""Content-Style-Type"""" content=""""text/css"""">
		|<style>H1 {
		|	TEXT-ALIGN: left; FONT-FAMILY: Arial, Tahoma; COLOR: #003366; FONT-SIZE: 18pt; FONT-WEIGHT: bold
		|}
		|.Programtext {
		|	FONT-FAMILY: Courier; COLOR: #000080; FONT-SIZE: 10pt
		|}
		|H3 {
		|	TEXT-ALIGN: left; FONT-FAMILY: Arial, Tahoma; FONT-SIZE: 11pt; FONT-WEIGHT: bold
		|}
		|H4 {
		|	TEXT-ALIGN: left; FONT-FAMILY: Arial, Tahoma; FONT-SIZE: 10pt; FONT-WEIGHT: bold
		|}
		|BODY {
		|	FONT-FAMILY: Verdana; FONT-SIZE: 8pt
		|}</style>
		|</head>
		|<body scroll=auto>
		|"" + ТекстПоиска + ""
		|</body>
		|</html>"";
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначенияДляОткрытия(Объект)
	// Возвращает массив объектов (возможно из одного элемента) для показа пользователю
	Результат = Новый Массив;
	
	// Объект ссылочного типа
	Если ЗначениеСсылочногоТипа(Объект) Тогда
		Результат.Добавить(Объект);
		Возврат Результат;
	КонецЕсли;
	
	МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипЗнч(Объект));
	ИмяМетаданного = МетаданныеОбъекта.Имя;
	
	ПолноеИмяОбъекта = ВРег(Метаданные.НайтиПоТипу(ТипЗнч(Объект)).ПолноеИмя());
	ЭтоРегистрСведений = (Найти(ПолноеИмяОбъекта, ""РЕГИСТРСВЕДЕНИЙ."") > 0);

	Если Не ЭтоРегистрСведений Тогда // Регистр бухгалтерии или накопления или расчета
		Регистратор = Объект[""Регистратор""];
		Результат.Добавить(Регистратор);
		Возврат Результат;
	КонецЕсли;

	// Ниже - это уже регистр сведений
	Если МетаданныеОбъекта.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору Тогда
		Регистратор = Объект[""Регистратор""];
		Результат.Добавить(Регистратор);
		Возврат Результат;
	КонецЕсли;

	// Независимый регистр сведений
	// сперва - основные типы
	Для Каждого Измерение Из МетаданныеОбъекта.Измерения Цикл
		Если Измерение.Ведущее Тогда 
			ЗначениеИзмерения = Объект[Измерение.Имя];
			
			Если ЗначениеСсылочногоТипа(ЗначениеИзмерения) Тогда
				Результат.Добавить(ЗначениеИзмерения);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;

	Если Результат.Количество() = 0 Тогда
		// теперь - любые типы
		Для Каждого Измерение Из МетаданныеОбъекта.Измерения Цикл
			Если Измерение.Ведущее Тогда 
				ЗначениеИзмерения = Объект[Измерение.Имя];
				Результат.Добавить(ЗначениеИзмерения);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Нет ни одного ведущего измерения - вернем сам ключ регистра сведений
	Если Результат.Количество() = 0 Тогда
		Результат.Добавить(Объект);
	КонецЕсли;

	Возврат Результат;
КонецФункции

&НаСервере
Процедура ОбновитьИндексСервер()
	// Ускорение обновления индекса полнотекстового поиска
	УстановитьПривилегированныйРежим(Истина);
	ПолнотекстовыйПоиск.ОбновитьИндекс(Ложь, Ложь);
	УстановитьПривилегированныйРежим(Ложь);
	
	//+yuraos, 20.10.2015
	МодульПТПС = МодульПТПСерверПолучить();
	//+yuraos, 20.10.2015
	
	ДатаАктуальностиИндекса = ПолнотекстовыйПоиск.ДатаАктуальности();
	//+yuraos, 20.10.2015
	ИндексАктуален = МодульПТПС.ИндексПоискаАктуален();
	//+yuraos, 20.10.2015
	////-yuraos, 20.10.2015
	//ИндексАктуален = ПолнотекстовыйПоискСервер.ИндексПоискаАктуален();
	////-yuraos, 20.10.2015
	Элементы.ГруппаОбновлениеИндекса.Видимость = Не ИндексАктуален;
	Элементы.ОбновитьИндекс.Доступность = Не ИндексАктуален;
КонецПроцедуры

&НаСервере
Процедура ОбновитьАктуальностьИндекса()
	
	//+yuraos, 20.10.2015
	МодульПТПС = МодульПТПСерверПолучить();
	//+yuraos, 20.10.2015
	
	Попытка
		ДатаАктуальностиИндекса = ПолнотекстовыйПоиск.ДатаАктуальности();
		Если ДатаАктуальностиИндекса <> '00010101000000' Тогда
			Элементы.СостояниеИндекса.Подсказка = НСтр(""ru = 'Последнее обновление индекса:'"") + "" "" + Строка(ДатаАктуальностиИндекса);
		КонецЕсли;
		
		//+yuraos, 20.10.2015
		ИндексАктуален = МодульПТПС.ИндексПоискаАктуален();
		//+yuraos, 20.10.2015
		////-yuraos, 20.10.2015
		//ИндексАктуален = ПолнотекстовыйПоискСервер.ИндексПоискаАктуален();
		////-yuraos, 20.10.2015
		Элементы.ГруппаОбновлениеИндекса.Видимость = Не ИндексАктуален;
		Элементы.ОбновитьИндекс.Доступность = Не ИндексАктуален;
		Если Не ИндексАктуален Тогда
			СостояниеИндекса = НСтр(""ru = 'Индекс давно не обновлялся, поэтому результаты поиска могут быть неточными.'"");
		КонецЕсли;
	Исключение
		СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СохранитьСтрокуИВыполнитьПоискСервер(Направление, ТекущаяПозиция, СтрокаПоиска, СписокВыбора)
	// Процедура выполняет полнотекстовый поиск
	
	СохранитьСтрокуПоиска(СписокВыбора, СтрокаПоиска);
	
	Возврат ВыполнитьПоискСервер(Направление, ТекущаяПозиция, СтрокаПоиска);
	
КонецФункции

&НаСервереБезКонтекста
Процедура СохранитьСтрокуПоиска(СписокВыбора, СтрокаПоиска)
	
	СохраненнаяСтрока = СписокВыбора.НайтиПоЗначению(СтрокаПоиска);
	
	Если СохраненнаяСтрока <> Неопределено Тогда
		СписокВыбора.Удалить(СохраненнаяСтрока);
	КонецЕсли;
		
	СписокВыбора.Вставить(0, СтрокаПоиска);
	
	КоличествоСтрок = СписокВыбора.Количество();
	
	Если КоличествоСтрок > 20 Тогда
		СписокВыбора.Удалить(КоличествоСтрок - 1);
	КонецЕсли;
	
	Строки = СписокВыбора.ВыгрузитьЗначения();
	
	ХранилищеОбщихНастроекСохранить(
		""ПолнотекстовыйПоискСтрокиПолнотекстовогоПоиска"", 
		, 
		Строки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВыполнитьПоискСервер(Направление, ТекущаяПозиция, СтрокаПоиска)
	// Процедура выполняет полнотекстовый поиск
	
	РазмерПорции = 20;
	
	СписокПоиска = ПолнотекстовыйПоиск.СоздатьСписок(СтрокаПоиска, РазмерПорции);
	
	Если Направление = 0 Тогда
		СписокПоиска.ПерваяЧасть();
	ИначеЕсли Направление = -1 Тогда
		СписокПоиска.ПредыдущаяЧасть(ТекущаяПозиция);
	ИначеЕсли Направление = 1 Тогда
		СписокПоиска.СледующаяЧасть(ТекущаяПозиция);
	КонецЕсли;
	
	РезультатыПоиска = Новый СписокЗначений;
	Для Каждого Результат Из СписокПоиска Цикл
		СтруктураРезультата = Новый Структура;
		СтруктураРезультата.Вставить(""Значение"", Результат.Значение);
		СтруктураРезультата.Вставить(""ЗначенияДляОткрытия"", ПолучитьЗначенияДляОткрытия(Результат.Значение));
		РезультатыПоиска.Добавить(СтруктураРезультата);
	КонецЦикла;
	
	HTMLТекст = СписокПоиска.ПолучитьОтображение(ВидОтображенияПолнотекстовогоПоиска.HTMLТекст);
	
	HTMLТекст = СтрЗаменить(HTMLТекст, ""<td>"", ""<td><font face=""""Arial"""" size=""""2"""">"");
	HTMLТекст = СтрЗаменить(HTMLТекст, ""<td valign=top width=1>"", ""<td valign=top width=1><font face=""""Arial"""" size=""""1"""">"");
	HTMLТекст = СтрЗаменить(HTMLТекст, ""<body>"", ""<body topmargin=0 leftmargin=0 scroll=auto>"");
	HTMLТекст = СтрЗаменить(HTMLТекст, ""</td>"", ""</font></td>"");
	HTMLТекст = СтрЗаменить(HTMLТекст, ""<b>"", """");
	HTMLТекст = СтрЗаменить(HTMLТекст, ""</b>"", """");
	HTMLТекст = СтрЗаменить(HTMLТекст, ""overflow:auto"", """");
	
	ТекущаяПозиция = СписокПоиска.НачальнаяПозиция();
	ПолноеКоличество = СписокПоиска.ПолноеКоличество();
	СлишкомМногоРезультатов = СписокПоиска.СлишкомМногоРезультатов();
	
	Результат = Новый Структура;
	Результат.Вставить(""РезультатПоиска"", РезультатыПоиска);
	Результат.Вставить(""ТекущаяПозиция"", ТекущаяПозиция);
	Результат.Вставить(""ПолноеКоличество"", ПолноеКоличество);
	Результат.Вставить(""HTMLТекст"", HTMLТекст);
	Результат.Вставить(""СлишкомМногоРезультатов"", СлишкомМногоРезультатов);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура HTMLТекстПриНажатииПослеВыбораИзСписка(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	Если ВыбранныйЭлемент <> Неопределено Тогда
		ОткрытьЗначениеПоиска(ВыбранныйЭлемент.Значение);
	КонецЕсли;
КонецПроцедуры

// Определяет режим эксплуатации информационной базы файловый (Истина) или серверный (Ложь).
// При проверке используется СтрокаСоединенияИнформационнойБазы, которую можно указать явно.
//
// Параметры:
//  СтрокаСоединенияИнформационнойБазы - Строка - параметр используется, если
//                 нужно проверить строку соединения не текущей информационной базы.
//
// Возвращаемое значение:
//  Булево.
//
&НаСервереБезКонтекста
Функция ИнформационнаяБазаФайловая(Знач СтрокаСоединенияИнформационнойБазы = """") Экспорт
			
	Если ПустаяСтрока(СтрокаСоединенияИнформационнойБазы) Тогда
		СтрокаСоединенияИнформационнойБазы =  СтрокаСоединенияИнформационнойБазы();
	КонецЕсли;
	Возврат Найти(Врег(СтрокаСоединенияИнформационнойБазы), ""FILE="") = 1;
	
КонецФункции 

// Формирует и выводит сообщение, которое может быть связано с элементом 
// управления формы.
//
//  Параметры
//  ТекстСообщенияПользователю - Строка - текст сообщения.
//  КлючДанных                 - ЛюбаяСсылка - на объект информационной базы.
//                               Ссылка на объект информационной базы, к которому это сообщение относится,
//                               или ключ записи.
//  Поле                       - Строка - наименование реквизита формы
//  ПутьКДанным                - Строка - путь к данным (путь к реквизиту формы)
//  Отказ                      - Булево - Выходной параметр
//                               Всегда устанавливается в значение Истина
//
//	Примеры использования:
//
//	1. Для вывода сообщения у поля управляемой формы, связанного с реквизитом объекта:
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр(""ru = 'Сообщение об ошибке.'""), ,
//		""ПолеВРеквизитеФормыОбъект"",
//		""Объект"");
//
//	Альтернативный вариант использования в форме объекта:
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр(""ru = 'Сообщение об ошибке.'""), ,
//		""Объект.ПолеВРеквизитеФормыОбъект"");
//
//	2. Для вывода сообщения рядом с полем управляемой формы, связанным с реквизитом формы:
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр(""ru = 'Сообщение об ошибке.'""), ,
//		""ИмяРеквизитаФормы"");
//
//	3. Для вывода сообщения связанного с объектом информационной базы
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр(""ru = 'Сообщение об ошибке.'""), ОбъектИнформационнойБазы, ""Ответственный"",,Отказ);
//
// 4. Для вывода сообщения по ссылке на объект информационной базы
//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
//		НСтр(""ru = 'Сообщение об ошибке.'""), Ссылка, , , Отказ);
//
// Случаи некорректного использования:
//  1. Передача одновременно параметров КлючДанных и ПутьКДанным
//  2. Передача в параметре КлючДанных значения типа отличного от допустимых
//  3. Установка ссылки без установки поля (и/или пути к данным)
//
Процедура СообщитьПользователю(
		Знач ТекстСообщенияПользователю,
		Знач КлючДанных = Неопределено,
		Знач Поле = """",
		Знач ПутьКДанным = """",
		Отказ = Ложь) Экспорт
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщенияПользователю;
	Сообщение.Поле = Поле;
	
	ЭтоОбъект = Ложь;
	
#Если НЕ ТонкийКлиент И НЕ ВебКлиент Тогда
	Если КлючДанных <> Неопределено
	   И XMLТипЗнч(КлючДанных) <> Неопределено Тогда
		ТипЗначенияСтрокой = XMLТипЗнч(КлючДанных).ИмяТипа;
		ЭтоОбъект = Найти(ТипЗначенияСтрокой, ""Object."") > 0;
	КонецЕсли;
#КонецЕсли
	
	Если ЭтоОбъект Тогда
		Сообщение.УстановитьДанные(КлючДанных);
	Иначе
		Сообщение.КлючДанных = КлючДанных;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПутьКДанным) Тогда
		Сообщение.ПутьКДанным = ПутьКДанным;
	КонецЕсли;
		
	Сообщение.Сообщить();
	
	Отказ = Истина;
	
КонецПроцедуры

// Сохраняет настройку в хранилище общих настроек.
//
// Параметры:
//   КлючОбъекта       - Строка - Ключ объекта настройки.
//   КлючНастроек      - Строка - Ключ сохраняемых настроек.
//   Значение          - Произвольный     - Настройки, которые нужно сохранить в хранилище. 
//   ОписаниеНастроек  - ОписаниеНастроек - Вспомогательная информация о настройке.
//   ИмяПользователя   - Строка - Имя пользователя, настройки которого сохраняются.
//       Если не указано, то сохраняются настройки текущего пользователя.
//   НужноОбновитьПовторноИспользуемыеЗначения - Булево - Сбросить кэши модулей ПовтИсп.
//
// См. также:
//   ""СтандартноеХранилищеНастроекМенеджер.Сохранить"" в синтакс-помощнике.
//
&НаСервереБезКонтекста
Процедура ХранилищеОбщихНастроекСохранить(КлючОбъекта, КлючНастроек = """", Значение,
	ОписаниеНастроек = Неопределено, ИмяПользователя = Неопределено, 
	НужноОбновитьПовторноИспользуемыеЗначения = Ложь) Экспорт
	
	ХранилищеСохранить(
		ХранилищеОбщихНастроек,
		КлючОбъекта,
		КлючНастроек,
		Значение,
		ОписаниеНастроек,
		ИмяПользователя,
		НужноОбновитьПовторноИспользуемыеЗначения);
	
КонецПроцедуры

// Сохраняет настройку в хранилище настроек через его менеджер.
//
// Параметры:
//   МенеджерХранилища - СтандартноеХранилищеНастроекМенеджер - Хранилище, в котором сохраняется настройка.
//   КлючОбъекта       - Строка - Ключ объекта настройки.
//   КлючНастроек      - Строка - Ключ сохраняемых настроек.
//   Значение          - Произвольный     - Настройки, которые нужно сохранить в хранилище. 
//   ОписаниеНастроек  - ОписаниеНастроек - Вспомогательная информация о настройке.
//   ИмяПользователя   - Строка - Имя пользователя, настройки которого сохраняются.
//       Если не указано, то сохраняются настройки текущего пользователя.
//   НужноОбновитьПовторноИспользуемыеЗначения - Булево - Сбросить кэши модулей ПовтИсп.
//
// См. также:
//   ""СтандартноеХранилищеНастроекМенеджер.Сохранить"" в синтакс-помощнике.
//   ""Настройки, автоматически сохраняемые в системном хранилище"" в синтакс-помощнике.
//
&НаСервереБезКонтекста
Процедура ХранилищеСохранить(МенеджерХранилища, КлючОбъекта, КлючНастроек, Значение,
	ОписаниеНастроек, ИмяПользователя, НужноОбновитьПовторноИспользуемыеЗначения)
	
	Если НЕ ПравоДоступа(""СохранениеДанныхПользователя"", Метаданные) Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерХранилища.Сохранить(КлючОбъекта, КлючНастроек(КлючНастроек), Значение, ОписаниеНастроек, ИмяПользователя);
	
	Если НужноОбновитьПовторноИспользуемыеЗначения Тогда
		ОбновитьПовторноИспользуемыеЗначения();
	КонецЕсли;
	
КонецПроцедуры

// Загружает настройку из хранилища общих настроек.
//
// Параметры:
//   КлючОбъекта  - Строка - Ключ объекта настройки.
//   КлючНастроек - Строка - Необязательный. Ключ сохраняемых настроек.
//   ЗначениеПоУмолчанию - Произвольный - Необязательный.
//       Значение, которое необходимо подставить если настройки не были загружены.
//   ОписаниеНастроек - ОписаниеНастроек - Необязательный. При чтении значения настройки в данный параметр
//       записывается вспомогательная информация о настройке.
//   ИмяПользователя - Строка - Необязательный. Имя пользователя, настройки которого загружаются.
//       Если не указано, то загружается настройки текущего пользователя.
//
// Возвращаемое значение: 
//   Произвольный - Настройки, загруженные из хранилища.
//   Неопределено - Если настройки не найдены и параметр ЗначениеПоУмолчанию не указан.
//
// См. также:
//   ""СтандартноеХранилищеНастроекМенеджер.Загрузить"" в синтакс-помощнике.
//
&НаСервере
Функция ХранилищеОбщихНастроекЗагрузить(КлючОбъекта, КлючНастроек = """", ЗначениеПоУмолчанию = Неопределено, 
	ОписаниеНастроек = Неопределено, ИмяПользователя = Неопределено) Экспорт
	
	Возврат ХранилищеЗагрузить(
		ХранилищеОбщихНастроек,
		КлючОбъекта,
		КлючНастроек,
		ЗначениеПоУмолчанию,
		ОписаниеНастроек,
		ИмяПользователя);
	
КонецФункции

// Загружает настройку из хранилища настроек через его менеджер.
//
// Параметры:
//   МенеджерХранилища - СтандартноеХранилищеНастроекМенеджер - Хранилище, из которого загружается настройка.
//   КлючОбъекта  - Строка - Ключ объекта настройки.
//   КлючНастроек - Строка - Необязательный. Ключ сохраняемых настроек.
//   ЗначениеПоУмолчанию - Произвольный - Необязательный.
//       Значение, которое необходимо подставить если настройки не были загружены.
//   ОписаниеНастроек - ОписаниеНастроек - Необязательный. При чтении значения настройки в данный параметр
//       записывается вспомогательная информация о настройке.
//   ИмяПользователя - Строка - Необязательный. Имя пользователя, настройки которого загружаются.
//       Если не указано, то загружается настройки текущего пользователя.
//
// Возвращаемое значение: 
//   Произвольный - Настройки, загруженные из хранилища.
//   Неопределено - Если настройки не найдены и параметр ЗначениеПоУмолчанию не указан.
//
// См. также:
//   ""СтандартноеХранилищеНастроекМенеджер.Загрузить"" в синтакс-помощнике.
//   ""Настройки, автоматически сохраняемые в системном хранилище"" в синтакс-помощнике.
//
&НаСервере
Функция ХранилищеЗагрузить(МенеджерХранилища, КлючОбъекта, КлючНастроек, ЗначениеПоУмолчанию,
	ОписаниеНастроек, ИмяПользователя)
	
	Результат = Неопределено;
	
	Если ПравоДоступа(""СохранениеДанныхПользователя"", Метаданные) Тогда
		Результат = МенеджерХранилища.Загрузить(КлючОбъекта, КлючНастроек(КлючНастроек), ОписаниеНастроек, ИмяПользователя);
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		Результат = ЗначениеПоУмолчанию;
	Иначе
		УстановитьПривилегированныйРежим(Истина);
		Если УдалитьБитыеСсылки(Результат) Тогда
			Результат = ЗначениеПоУмолчанию;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Возвращает строку ключа настроек, не превышающую допустимую длину.
// Проверяет длину строки на входе и, в случае превышения 128, преобразует ее конец по алгоритму MD5 в короткий
// вариант, в результате чего строка становится длиной 128 символов.
// Если исходная строка менее 128 символов, она возвращается в неизменном виде.
//
// Параметры:
//  Строка - Строка - строка произвольной длины.
//
&НаСервереБезКонтекста
Функция КлючНастроек(Знач Строка)
	Результат = Строка;
	Если СтрДлина(Строка) > 128 Тогда // ключ более 128 символов вызовет исключение при обращении к хранилищу настроек
		Результат = Лев(Строка, 96);
		ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.MD5);
		ХешированиеДанных.Добавить(Сред(Строка, 97));
		Результат = Результат + СтрЗаменить(ХешированиеДанных.ХешСумма, "" "", """");
	КонецЕсли;
	Возврат Результат;
КонецФункции

// Удаляет битые ссылки из переменной.
//
// Параметры:
//   СсылкаИлиКоллекция - ЛюбаяСсылка, Произвольный - Проверяемый объект или очищаемая коллекция.
//
// Возвращаемое значение: 
//   Булево - 
//       * Истина - СсылкаИлиКоллекция ссылочного типа и объект не найден в базе данных.
//       * Ложь - Когда СсылкаИлиКоллекция не ссылочного типа или объект найден в базе данных.
//
&НаСервере
Функция УдалитьБитыеСсылки(СсылкаИлиКоллекция)
	
	Тип = ТипЗнч(СсылкаИлиКоллекция);
	
	Если Тип = Тип(""Неопределено"")
		Или Тип = Тип(""Булево"")
		Или Тип = Тип(""Строка"")
		Или Тип = Тип(""Число"")
		Или Тип = Тип(""Дата"") Тогда // Оптимизация - часто используемые примитивные типы.
		
		Возврат Ложь; // Не ссылка.
		
	ИначеЕсли Тип = Тип(""Массив"") Тогда
		
		Количество = СсылкаИлиКоллекция.Количество();
		Для Номер = 1 По Количество Цикл
			ОбратныйИндекс = Количество - Номер;
			Значение = СсылкаИлиКоллекция[ОбратныйИндекс];
			Если УдалитьБитыеСсылки(Значение) Тогда
				СсылкаИлиКоллекция.Удалить(ОбратныйИндекс);
			КонецЕсли;
		КонецЦикла;
		
		Возврат Ложь; // Не ссылка.
		
	ИначеЕсли Тип = Тип(""Структура"")
		Или Тип = Тип(""Соответствие"") Тогда
		
		Для Каждого КлючИЗначение Из СсылкаИлиКоллекция Цикл
			Значение = КлючИЗначение.Значение;
			Если УдалитьБитыеСсылки(Значение) Тогда
				СсылкаИлиКоллекция.Вставить(КлючИЗначение.Ключ, Неопределено);
			КонецЕсли;
		КонецЦикла;
		
		Возврат Ложь; // Не ссылка.
		
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(Тип)
		Или Справочники.ТипВсеСсылки().СодержитТип(Тип)
		Или Перечисления.ТипВсеСсылки().СодержитТип(Тип)
		Или ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(Тип)
		Или ПланыСчетов.ТипВсеСсылки().СодержитТип(Тип)
		Или ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(Тип)
		Или ПланыОбмена.ТипВсеСсылки().СодержитТип(Тип)
		Или БизнесПроцессы.ТипВсеСсылки().СодержитТип(Тип)
		Или Задачи.ТипВсеСсылки().СодержитТип(Тип) Тогда
		// Ссылочный тип, исключая ТочкаМаршрутаБизнесПроцессаСсылка.
		
		Если СсылкаИлиКоллекция.Пустая() Тогда
			Возврат Ложь; // Ссылка пустая.
		ИначеЕсли ЗначениеРеквизитаОбъекта(СсылкаИлиКоллекция, ""Ссылка"") = Неопределено Тогда
			СсылкаИлиКоллекция = Неопределено;
			Возврат Истина; // ""Битая"" ссылка.
		Иначе
			Возврат Ложь; // Объект найден.
		КонецЕсли;
		
	Иначе
		
		Возврат Ложь; // Не ссылка.
		
	КонецЕсли;
	
КонецФункции

// Возвращает значение реквизита, прочитанного из информационной базы по ссылке на объект.
// 
//  Если доступа к реквизиту нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
//
// Функция не предназначена для получения значений реквизитов пустых ссылок.
// 
// Параметры:
//  Ссылка       - ссылка на объект, - элемент справочника, документ, ...
//  ИмяРеквизита - Строка, например, ""Код"".
// 
// Возвращаемое значение:
//  Произвольный    - зависит от типа значения прочитанного реквизита.
// 
&НаСервере
Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита) Экспорт
	
	Результат = ЗначенияРеквизитовОбъекта(Ссылка, ИмяРеквизита);
	Возврат Результат[СтрЗаменить(ИмяРеквизита, ""."", """")];
	
КонецФункции 

// Возвращает структуру, содержащую значения реквизитов прочитанные из информационной базы
// по ссылке на объект.
// 
//  Если доступа к одному из реквизитов нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
// 
// Функция не предназначена для получения значений реквизитов пустых ссылок.
//
// Параметры:
//  Ссылка    - ЛюбаяСсылка - объект, значения реквизитов которого необходимо получить.
//
//  Реквизиты - Строка - имена реквизитов, перечисленные через запятую, в формате
//              требований к свойствам структуры.
//              Например, ""Код, Наименование, Родитель"".
//            - Структура, ФиксированнаяСтруктура - в качестве ключа передается
//              псевдоним поля для возвращаемой структуры с результатом, а в качестве
//              значения (опционально) фактическое имя поля в таблице.
//              Если значение не определено, то имя поля берется из ключа.
//            - Массив, ФиксированныйМассив - имена реквизитов в формате требований
//              к свойствам структуры.
//
// Возвращаемое значение:
//  Структура - содержит имена (ключи) и значения затребованных реквизитов.
//              Если строка затребованных реквизитов пуста, то возвращается пустая структура.
//              Если в качестве объекта передана пустая ссылка, то все реквизиты вернутся со значением Неопределено.
//
&НаСервере
Функция ЗначенияРеквизитовОбъекта(Ссылка, Знач Реквизиты) Экспорт
	
	Если ТипЗнч(Реквизиты) = Тип(""Строка"") Тогда
		Если ПустаяСтрока(Реквизиты) Тогда
			Возврат Новый Структура;
		КонецЕсли;
		Реквизиты = РазложитьСтрокуВМассивПодстрок(Реквизиты, "","", Истина);
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура;
	Если ТипЗнч(Реквизиты) = Тип(""Структура"") Или ТипЗнч(Реквизиты) = Тип(""ФиксированнаяСтруктура"") Тогда
		СтруктураРеквизитов = Реквизиты;
	ИначеЕсли ТипЗнч(Реквизиты) = Тип(""Массив"") Или ТипЗнч(Реквизиты) = Тип(""ФиксированныйМассив"") Тогда
		Для Каждого Реквизит Из Реквизиты Цикл
			СтруктураРеквизитов.Вставить(СтрЗаменить(Реквизит, ""."", """"), Реквизит);
		КонецЦикла;
	Иначе
		ВызватьИсключение ПодставитьПараметрыВСтроку(
			НСтр(""ru = 'Неверный тип второго параметра Реквизиты: %1'""),
			Строка(ТипЗнч(Реквизиты)));
	КонецЕсли;
	
	ТекстПолей = """";
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		ИмяПоля   = ?(ЗначениеЗаполнено(КлючИЗначение.Значение),
		              СокрЛП(КлючИЗначение.Значение),
		              СокрЛП(КлючИЗначение.Ключ));
		
		Псевдоним = СокрЛП(КлючИЗначение.Ключ);
		
		ТекстПолей  = ТекстПолей + ?(ПустаяСтрока(ТекстПолей), """", "","") + ""
		|	"" + ИмяПоля + "" КАК "" + Псевдоним;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр(""Ссылка"", Ссылка);
	Запрос.Текст =
	""ВЫБРАТЬ
	|"" + ТекстПолей + ""
	|ИЗ
	|	"" + Ссылка.Метаданные().ПолноеИмя() + "" КАК ПсевдонимЗаданнойТаблицы
	|ГДЕ
	|	ПсевдонимЗаданнойТаблицы.Ссылка = &Ссылка
	|"";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Результат = Новый Структура;
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		Результат.Вставить(КлючИЗначение.Ключ);
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(Результат, Выборка);
	
	Возврат Результат;
	
КонецФункции

// Возвращает значения реквизитов, прочитанные из информационной базы
// для нескольких объектов.
// 
//  Если доступа к одному из реквизитов нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
//
// Функция не предназначена для получения значений реквизитов пустых ссылок.
// 
// Параметры:
//  МассивСсылок - массив ссылок на объекты одного типа
//				ВАЖНО! значения массива должны быть ссылками на 
//				объекты одного типа!
//  ИменаРеквизитов - Строка, имена реквизитов перечисленные через запятую,
//				в формате требований к свойствам структуры.
//				Например, ""Код, Наименование, Родитель"".
// 
// Возвращаемое значение:
//  Соответствие - где ключ - ссылка на объект, а Значение - структура, которая 
//		   		содержит список свойств, как список имен в строке
//				ИменаРеквизитов, со значениям реквизитов, прочитанными из информационной базы.
// 
&НаСервере
Функция ЗначенияРеквизитовОбъектов(МассивСсылок, ИменаРеквизитов) Экспорт
	
	ЗначенияРеквизитов = Новый Соответствие;
	Если МассивСсылок.Количество() = 0 Тогда
		Возврат ЗначенияРеквизитов;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		""ВЫБРАТЬ
		|	Ссылка КАК Ссылка, "" + ИменаРеквизитов + ""
		|ИЗ
		|	"" + МассивСсылок[0].Метаданные().ПолноеИмя() + "" КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка В (&МассивСсылок)"";
	Запрос.УстановитьПараметр(""МассивСсылок"", МассивСсылок);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат = Новый Структура(ИменаРеквизитов);
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
		ЗначенияРеквизитов[Выборка.Ссылка] = Результат;
	КонецЦикла;
	
	Возврат ЗначенияРеквизитов;
	
КонецФункции

// Возвращает значения реквизита, прочитанного из информационной базы для нескольких объектов.
// 
//  Если доступа к реквизиту нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
// 
// Функция не предназначена для получения значений реквизитов пустых ссылок.
//
// Параметры:
//  МассивСсылок - массив ссылок на объекты одного типа
//				ВАЖНО! значения массива должны быть ссылками на 
//				объекты одного типа!
//  ИмяРеквизита - Строка, например, ""Код"".
// 
// Возвращаемое значение:
//  Соответствие - Ключ - ссылка на объект, Значение - значение прочитанного реквизита.
// 
&НаСервере
Функция ЗначениеРеквизитаОбъектов(МассивСсылок, ИмяРеквизита) Экспорт
	
	ЗначенияРеквизитов = ЗначенияРеквизитовОбъектов(МассивСсылок, ИмяРеквизита);
	Для Каждого Элемент Из ЗначенияРеквизитов Цикл
		ЗначенияРеквизитов[Элемент.Ключ] = Элемент.Значение[ИмяРеквизита];
	КонецЦикла;
		
	Возврат ЗначенияРеквизитов;
	
КонецФункции

// Подставляет параметры в строку. Максимально возможное число параметров - 9.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров начинается с единицы.
//
// Параметры:
//  СтрокаПодстановки  - Строка - шаблон строки с параметрами (вхождениями вида ""%ИмяПараметра"");
//  Параметр<n>        - Строка - подставляемый параметр.
//
// Возвращаемое значение:
//  Строка   - текстовая строка с подставленными параметрами.
//
// Пример:
//  ПодставитьПараметрыВСтроку(НСтр(""ru='%1 пошел в %2'""), ""Вася"", ""Зоопарк"") = ""Вася пошел в Зоопарк"".
//
&НаСервере
Функция ПодставитьПараметрыВСтроку(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено) Экспорт
	
	ИспользоватьАльтернативныйАлгоритм = 
		Найти(Параметр1, ""%"")
		Или Найти(Параметр2, ""%"")
		Или Найти(Параметр3, ""%"")
		Или Найти(Параметр4, ""%"")
		Или Найти(Параметр5, ""%"")
		Или Найти(Параметр6, ""%"")
		Или Найти(Параметр7, ""%"")
		Или Найти(Параметр8, ""%"")
		Или Найти(Параметр9, ""%"");
		
	Если ИспользоватьАльтернативныйАлгоритм Тогда
		СтрокаПодстановки = ПодставитьПараметрыВСтрокуАльтернативныйАлгоритм(СтрокаПодстановки, Параметр1,
			Параметр2, Параметр3, Параметр4, Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	Иначе
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, ""%1"", Параметр1);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, ""%2"", Параметр2);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, ""%3"", Параметр3);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, ""%4"", Параметр4);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, ""%5"", Параметр5);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, ""%6"", Параметр6);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, ""%7"", Параметр7);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, ""%8"", Параметр8);
		СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, ""%9"", Параметр9);
	КонецЕсли;
	
	Возврат СтрокаПодстановки;
КонецФункции

// Вставляет параметры в строку, учитывая, что в параметрах могут использоваться подстановочные слова %1, %2 и т.д.
&НаСервере
Функция ПодставитьПараметрыВСтрокуАльтернативныйАлгоритм(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено)
	
	Результат = """";
	Позиция = Найти(СтрокаПодстановки, ""%"");
	Пока Позиция > 0 Цикл 
		Результат = Результат + Лев(СтрокаПодстановки, Позиция - 1);
		СимволПослеПроцента = Сред(СтрокаПодстановки, Позиция + 1, 1);
		ПодставляемыйПараметр = """";
		Если СимволПослеПроцента = ""1"" Тогда
			ПодставляемыйПараметр =  Параметр1;
		ИначеЕсли СимволПослеПроцента = ""2"" Тогда
			ПодставляемыйПараметр =  Параметр2;
		ИначеЕсли СимволПослеПроцента = ""3"" Тогда
			ПодставляемыйПараметр =  Параметр3;
		ИначеЕсли СимволПослеПроцента = ""4"" Тогда
			ПодставляемыйПараметр =  Параметр4;
		ИначеЕсли СимволПослеПроцента = ""5"" Тогда
			ПодставляемыйПараметр =  Параметр5;
		ИначеЕсли СимволПослеПроцента = ""6"" Тогда
			ПодставляемыйПараметр =  Параметр6;
		ИначеЕсли СимволПослеПроцента = ""7"" Тогда
			ПодставляемыйПараметр =  Параметр7
		ИначеЕсли СимволПослеПроцента = ""8"" Тогда
			ПодставляемыйПараметр =  Параметр8;
		ИначеЕсли СимволПослеПроцента = ""9"" Тогда
			ПодставляемыйПараметр =  Параметр9;
		КонецЕсли;
		Если ПодставляемыйПараметр = """" Тогда
			Результат = Результат + ""%"";
			СтрокаПодстановки = Сред(СтрокаПодстановки, Позиция + 1);
		Иначе
			Результат = Результат + ПодставляемыйПараметр;
			СтрокаПодстановки = Сред(СтрокаПодстановки, Позиция + 2);
		КонецЕсли;
		Позиция = Найти(СтрокаПодстановки, ""%"");
	КонецЦикла;
	Результат = Результат + СтрокаПодстановки;
	
	Возврат Результат;
КонецФункции

// Проверить, что значение имеет ссылочный тип данных.
//
// Параметры:
//  Значение - Произвольный - проверяемое значение.
//
// Возвращаемое значение:
//  Булево - Истина, если тип значения ссылочный.
//
&НаСервереБезКонтекста
Функция ЗначениеСсылочногоТипа(Значение)
	
	Возврат ЭтоСсылка(ТипЗнч(Значение));
	
КонецФункции

// Проверка того, что переданный тип является ссылочным типом данных.
// Для типа ""Неопределено"" возвращается Ложь.
//
// Возвращаемое значение:
//  Булево.
//
&НаСервереБезКонтекста
Функция ЭтоСсылка(Тип) Экспорт
	
	Возврат Тип <> Тип(""Неопределено"") 
		И (Справочники.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ Документы.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ Перечисления.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ ПланыСчетов.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ БизнесПроцессы.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ БизнесПроцессы.ТипВсеСсылкиТочекМаршрутаБизнесПроцессов().СодержитТип(Тип)
		ИЛИ Задачи.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ ПланыОбмена.ТипВсеСсылки().СодержитТип(Тип));
	
КонецФункции

// Разбивает строку на несколько строк по разделителю. Разделитель может иметь любую длину.
//
// Параметры:
//  Строка                 - Строка - текст с разделителями;
//  Разделитель            - Строка - разделитель строк текста, минимум 1 символ;
//  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//     - для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат.
//     - если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение """" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
//  СокращатьНепечатаемыеСимволы - Булево - сокращать непечатаемые символы по краям каждой из найденных подстрок.
//
// Возвращаемое значение:
//  Массив - массив строк.
//
// Примеры:
//  РазложитьСтрокуВМассивПодстрок("",один,,два,"", "","") - возвратит массив из 5 элементов, три из которых  - пустые строки;
//  РазложитьСтрокуВМассивПодстрок("",один,,два,"", "","", Истина) - возвратит массив из двух элементов;
//  РазложитьСтрокуВМассивПодстрок("" один   два  "", "" "") - возвратит массив из двух элементов;
//  РазложитьСтрокуВМассивПодстрок("""") - возвратит пустой массив;
//  РазложитьСтрокуВМассивПодстрок("""",,Ложь) - возвратит массив с одним элементом """" (пустой строкой);
//  РазложитьСтрокуВМассивПодстрок("""", "" "") - возвратит массив с одним элементом """" (пустой строкой);
//
&НаСервере
Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = "","", Знач ПропускатьПустыеСтроки = Неопределено, СокращатьНепечатаемыеСимволы = Ложь) Экспорт
	
	Результат = Новый Массив;
	
	// для обеспечения обратной совместимости
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = "" "", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = "" "" Тогда
				Результат.Добавить("""");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Строка));
		Иначе
			Результат.Добавить(Строка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

&НаКлиенте
Процедура Справка(Команда)
	Перем ТекстСправки;
	
	ТекстСправки = ""Полнотекстовый поиск данных позволяет находить любые сведения, в т.ч. и по содержимому присоединенных файлов.
	|
	|Полнотекстовый поиск предоставляет такие возможности как: 
	|Поддержка транслитерации (написание русских слов символами латиницы в соответствии с ГОСТ); 
	|Поддержка замещения (написание русских слов в английской раскладке); 
	|Нечеткий поиск (буквы в найденных словах могут отличаться).
	|Для поиска данных в программе наберите слово или его начало. Нажмите Найти. Поиск может осуществляться по одному или нескольким словам. В строке ввода допускается использование поисковых операторов типа И, ИЛИ, НЕ.
	|
	|В поле ввода строки поиска можно вставить навигационную ссылку на данные. В этом случае поиск произведен не будет, а будет сразу открыта нужная карточка. Навигационную ссылку на любой объект информационной базы можно получить при помощи команды  в заголовке каждого окна 1С:Предприятия 8.
	|
	|Обновление индекса.
	|Для обновления индекса воспользуйтесь опцией """"Управление полнотекстовым поиском"""" обработки.
	|
	|Примеры:
	|Пример поиска Результат 
	|«Реализация 00016422» Найдет документ «реализация товаров и услуг» с номером «00016422» 
	|«Платежное 120000» Найдет платежные поручения на суммы 120000 и 120000,50 
	|«Иванов Акация» Найдет все документы, выписанные Ивановым для контрагента ООО «Акация» 
	|«Реализация Акация» Найдет все документы «реализация товаров и услуг» по контрагенту ООО «Акация» 
	|«Акация 05.07» Найдет все документы по контрагенту ООО «Акация», оформленные 5-го июля 
	|«Кроссовки» Найдет все упоминания товаров типа «кроссовки» по порядку:
	|• Кроссовки белые (Товар)
	|• Кроссовки черные (Товар)
	|• Поступление товаров и услуг № 00086822
	|• Реализация товаров и услуг № 00016422 
	|
	|Советы:
	|Если нашлось много данных, то уточните поисковый запрос, добавив к нему какое-либо уточнение (дату, сумму, название контрагента).  
	|Если нашлось мало данных, то упростите запрос, исключив из него какое-либо слово. 
	|Для точного поиска используйте: 
	|Кавычки - для поиска точной фразы, например: «""""мини пылесос""""». 
	|ИЛИ - для поиска одного из двух слов, например «Акация ИЛИ Стройпромвсе» - найдет все упоминания контрагентов ООО """"Акация"""" и ЗАО """"Стройпромвсе"""". 
	|Скобки - для группировки выражений, например поиск «Иванов (Акация ИЛИ Стройпромвсе)» найдет все документы, выписанные Ивановым по контрагентам ООО """"Акация"""" и ЗАО """"Стройпромвсе"""".
	|Для поиска с учетом синонимов используйте """"!"""", например, поиск """"!номер"""" найдет все документы в которых встречается слово """"номер"""" или """"число"""". 
	|Для """"нечеткого"""" поиска используйте """"#"""", например поиск """"Стройпромвсе#2"""" найдет все документы, содержащие такие слова, которые отличаются от слова """"Стройпромвсе"""" на одну или две буквы. 
	|Для поиска по началу слова используйте """"*"""", например, поиск """"Строй*"""" найдет все документы, которые содержат слова, начинающиеся на """"Строй"""" - """"Стройка"""", """"Стройпромвсе""""  и т.д."";
	
	ПредупреждениеСообщение(, ТекстСправки)
	
КонецПроцедуры

&НаКлиенте
Процедура ПредупреждениеСообщение(Оповещение, ТекстПредупрежденияСообщения, Таймаут = 0, Заголовок = """")
	
	Если ИспользоватьРежимМодальности() Тогда
		// Стандартно в модальном режиме (8.2/8.3) с обработкой результата.
		Предупреждение(ТекстПредупрежденияСообщения, Таймаут, Заголовок);
	Иначе
		// Стандартно в немодальном режиме (8.3) с обработкой результата.
		Выполнить(""ПоказатьПредупреждение(Оповещение, ТекстПредупрежденияСообщения, Таймаут, Заголовок)"");
	КонецЕсли;;
		
КонецПроцедуры

&НаКлиенте
Функция ИспользоватьРежимМодальности()
	Возврат РежимИспользованияМодальностиБулево;
КонецФункции

//+yuraos, 20.10.2015
&НаСервере
Функция МодульПТПСерверПолучить()
	Попытка
		Возврат Вычислить(""ПолнотекстовыйПоискСервер"");
	Исключение
		Попытка 
			Возврат Вычислить(""ЭтотОбъект"");
		Исключение
			Возврат Вычислить(""ЭтаФорма"");
		КонецПопытки;
	КонецПопытки;
	Возврат Неопределено;
КонецФункции
 
//+yuraos, 20.10.2015
&НаСервере
Функция ИндексПоискаАктуален() Экспорт
	
	ОперацииРазрешены = (ПолнотекстовыйПоиск.ПолучитьРежимПолнотекстовогоПоиска() = РежимПолнотекстовогоПоиска.Разрешить);
	Возврат (
		// Операции не разрешены,
		// или индекс полностью соответствует текущему состоянию информационной базы,
		// или индекс обновлялся менее 5 минут назад.
		НЕ ОперацииРазрешены
		ИЛИ ПолнотекстовыйПоиск.ИндексАктуален()
		ИЛИ ТекущаяДата() < ПолнотекстовыйПоиск.ДатаАктуальности() + 300); // Исключение из правила ТекущаяДатаСеанса().
	
КонецФункции

",
{4,9,
{9,
{1},0,"Объект",
{1,1,
{"ru","Объект"}
},
{"Pattern",
{"#",888e785d-b1c5-4835-8ecc-e992429b6cd8}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},1,0,0,0,
{0,0},
{0,0}
},
{9,
{2},0,"СтрокаПоиска",
{1,1,
{"ru","Строка поиска"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,1,0,
{0,0},
{0,0}
},
{9,
{7},0,"ПоказаныРезультатыСПо",
{1,1,
{"ru","Показаны результаты с по"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{13},0,"ТекущаяПозиция",
{1,1,
{"ru","Текущая позиция"}
},
{"Pattern",
{"N",10,0,0}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{14},0,"HTMLТекст",
{1,1,
{"ru","HTMLТекст"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{6},0,"РезультатыПоиска",
{1,1,
{"ru","Результаты поиска"}
},
{"Pattern",
{"#",4772b3b4-f4a3-49c0-a1a5-8cb5961511a3}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{3},0,"ДатаАктуальностиИндекса",
{1,1,
{"ru","Дата актуальности индекса"}
},
{"Pattern",
{"D"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{5},0,"СостояниеИндекса",
{1,1,
{"ru","Состояние индекса"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{15},0,"РежимИспользованияМодальностиБулево",
{1,1,
{"ru","Режим использования модальности (булево)"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},0,0,
{#base64:77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxTZXR0
aW5ncyB4bWxucz0iaHR0cDovL3Y4LjFjLnJ1LzguMS9kYXRhLWNvbXBvc2l0aW9u
LXN5c3RlbS9zZXR0aW5ncyIgeG1sbnM6ZGNzY29yPSJodHRwOi8vdjguMWMucnUv
OC4xL2RhdGEtY29tcG9zaXRpb24tc3lzdGVtL2NvcmUiIHhtbG5zOnN0eWxlPSJo
dHRwOi8vdjguMWMucnUvOC4xL2RhdGEvdWkvc3R5bGUiIHhtbG5zOnN5cz0iaHR0
cDovL3Y4LjFjLnJ1LzguMS9kYXRhL3VpL2ZvbnRzL3N5c3RlbSIgeG1sbnM6djg9
Imh0dHA6Ly92OC4xYy5ydS84LjEvZGF0YS9jb3JlIiB4bWxuczp2OHVpPSJodHRw
Oi8vdjguMWMucnUvOC4xL2RhdGEvdWkiIHhtbG5zOndlYj0iaHR0cDovL3Y4LjFj
LnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93ZWIiIHhtbG5zOndpbj0iaHR0cDovL3Y4
LjFjLnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93aW5kb3dzIiB4bWxuczp4cz0iaHR0
cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDov
L3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiLz4=}
},
{0,2,
{0,"ПереданнаяСтрокаПоиска",
{"Pattern",
{"S"}
},0},
{0,"ПараметрыСеансаОбработки",
{"Pattern"},0}
},
{0,5,
{8,
{2,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ВыполнитьПоиск",
{1,1,
{"ru","Найти"}
},
{1,1,
{"ru","Найти текст"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,1,
{0,ffab30f1-da11-44b5-b34c-24da22badcf4},"",-1,-1,1,0,""},"ВыполнитьПоиск",0,0,0,
{0,0},1,0,1,0,0},
{8,
{3,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"Следующие",
{1,1,
{"ru","Следующие"}
},
{1,1,
{"ru","Следующие результаты поиска"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,1,
{-9},"",-1,-1,1,0,""},"Следующие",1,0,0,
{0,0},1,0,1,0,0},
{8,
{4,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"Предыдущие",
{1,1,
{"ru","Предыдущие"}
},
{1,1,
{"ru","Предыдущие результаты поиска"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,1,
{-8},"",-1,-1,1,0,""},"Предыдущие",1,0,0,
{0,0},1,0,1,0,0},
{8,
{1,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ОбновитьИндекс",
{1,1,
{"ru","Обновить индекс"}
},
{1,1,
{"ru","Обновить индекс полнотекстового поиска"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,1,
{0,fc4f29e0-d168-4fe0-8e64-e982fabf2595},"",-1,-1,1,0,""},"ОбновитьИндекс",0,0,0,
{0,0},1,0,1,0,0},
{8,
{5,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"Справка",
{1,1,
{"ru","Справка"}
},
{1,1,
{"ru","Справка"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,1,
{0,b7c81c62-d6ad-4eae-9cea-0e203182db67},"",-1,-1,1,0,""},"Справка",1,0,0,
{0,0},1,0,1,0,0}
},
{0,0},
{0,0},0,0}