Перем мДерево, мУжеВСписке;

Перем мКэшРеквизитовДокумента;

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура вывода дерева структуры подчиненности документа
Процедура ВывестиДеревоДокументов()
	
	Попытка
	ДеревоДокументов.Строки.Очистить();
	мДерево = ДеревоДокументов;
	мУжеВСписке.Очистить();
	ВывестиРодительскиеДокументы(ДокументСсылка);
	ЭлементыФормы.ДеревоДокументов.ТекущаяСтрока = мДерево;
	ВывестиПодчиненныеДокументы(мДерево);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

// Процедура выполняет вывод родительских документов
Процедура ВывестиРодительскиеДокументы(ДокументСсылка)
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	СписокРеквизитов = Новый СписокЗначений;
	
	Для Каждого Реквизит ИЗ МетаданныеДокумента.Реквизиты Цикл
		ТипыРеквизита = Реквизит.Тип.Типы();
		Для Каждого ТекущийТип ИЗ ТипыРеквизита Цикл
			МетаданныеРеквизита = Метаданные.НайтиПоТипу(ТекущийТип);
					
			Если МетаданныеРеквизита<>Неопределено И Метаданные.Документы.Содержит(МетаданныеРеквизита) 
				 И ПравоДоступа("Чтение", МетаданныеРеквизита) Тогда
				Попытка
					ЗначениеРеквизита = ДокументСсылка[Реквизит.Имя];
				Исключение
					Прервать;
				КонецПопытки;
				ЕСли ЗначениеРеквизита<>Неопределено И НЕ ЗначениеРеквизита.Пустая() И ТипЗнч(ЗначениеРеквизита) = ТекущийТип 
					 И мУжеВСписке[ЗначениеРеквизита] = Неопределено И СписокРеквизитов.НайтиПоЗначению(ДокументСсылка[Реквизит.Имя]) = Неопределено Тогда
					Попытка
						СписокРеквизитов.Добавить(ЗначениеРеквизита,Формат(ЗначениеРеквизита.Дата,"ДФ=yyyyMMddЧЧММсс"));
					Исключение
						 ОтладкаТекстОшибки = ОписаниеОшибки();
					КонецПопытки;	
				КонецЕсли;
			КонецЕсли;			
			
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ТЧ Из МетаданныеДокумента.ТабличныеЧасти Цикл
		СтрРеквизитов = "";
		
		Попытка
			СодержимоеТЧ = ДокументСсылка[ТЧ.Имя].Выгрузить();
		Исключение
			Прервать;
		КонецПопытки;
		
		Для Каждого Реквизит ИЗ ТЧ.Реквизиты Цикл
			ТипыРеквизита = Реквизит.Тип.Типы();
			Для Каждого ТекущийТип ИЗ ТипыРеквизита Цикл
				МетаданныеРеквизита = Метаданные.НайтиПоТипу(ТекущийТип);				
				Если МетаданныеРеквизита<>Неопределено И Метаданные.Документы.Содержит(МетаданныеРеквизита) 
					И ПравоДоступа("Чтение", МетаданныеРеквизита) Тогда
					СтрРеквизитов = СтрРеквизитов + ?(СтрРеквизитов = "", "", ", ") + Реквизит.Имя;
					Прервать;
				КонецЕсли;						
			КонецЦикла;
		КонецЦикла;
		
		СодержимоеТЧ.Свернуть(СтрРеквизитов);
		Для Каждого КолонкаТЧ ИЗ СодержимоеТЧ.Колонки Цикл
			Для Каждого СтрокаТЧ ИЗ СодержимоеТЧ Цикл
				Попытка
					ЗначениеРеквизита = СтрокаТЧ[КолонкаТЧ.Имя];
				Исключение
					Продолжить;
				КонецПопытки;
				МетаданныеЗначения = Метаданные.НайтиПоТипу(ТипЗнч(ЗначениеРеквизита));
				Если МетаданныеЗначения = Неопределено Тогда
					// базовый тип
					Продолжить;
				КонецЕсли;
				
				ЕСли ЗначениеРеквизита<>Неопределено И НЕ ЗначениеРеквизита.Пустая()
					 И Метаданные.Документы.Содержит(МетаданныеЗначения)
					 И мУжеВСписке[ЗначениеРеквизита] = Неопределено Тогда
					Если СписокРеквизитов.НайтиПоЗначению(ЗначениеРеквизита) = Неопределено Тогда
						Попытка
							СписокРеквизитов.Добавить(ЗначениеРеквизита,Формат(ЗначениеРеквизита.Дата,"ДФ=yyyyMMddЧЧММсс"));
						Исключение
							ОтладкаТекстОшибки = ОписаниеОшибки();
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;		
	КонецЦикла;
	СписокРеквизитов.СортироватьПоПредставлению();
	мУжеВСписке.Вставить(ДокументСсылка, Истина);
	
	Если СписокРеквизитов.Количество() = 1 Тогда
		ВывестиРодительскиеДокументы(СписокРеквизитов[0].Значение);
	ИначеЕсли СписокРеквизитов.Количество() > 1 Тогда
		ВывестиБезРодителей(СписокРеквизитов);		
	КонецЕсли;

	
	СтрокаДерева = мДерево.Строки.Добавить();
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ Ссылка, Проведен, ПометкаУдаления, #Сумма, Представление, """ + МетаданныеДокумента.Имя + """ КАК Метаданные
						   | ИЗ Документ."+МетаданныеДокумента.Имя + " ГДЕ Ссылка = &Ссылка");
						   
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Если МетаданныеДокумента.Реквизиты.Найти("СуммаДокумента") <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Сумма", "СуммаДокумента КАК СуммаДокумента");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Сумма", "NULL КАК СуммаДокумента");
	КонецЕсли;
	
	Выборка  = Запрос.Выполнить().Выбрать();
	ЕСли Выборка.Следующий() Тогда		
		СтрокаДерева.Ссылка= Выборка.Ссылка;
		СтрокаДерева.Проведен = Выборка.Проведен;
		СтрокаДерева.ПометкаУдаления = Выборка.ПометкаУдаления;
		СтрокаДерева.ДокументПредставление = Выборка.Представление;
		СтрокаДерева.СуммаДокумента = Выборка.СуммаДокумента;
		СтрокаДерева.ВидДокумента = Выборка.Метаданные;				
	Иначе
		СтрокаДерева.Ссылка= ДокументСсылка;
		СтрокаДерева.ДокументПредставление = Строка(ДокументСсылка);
		СтрокаДерева.СуммаДокумента = ДокументСсылка.СуммаДокумента;
	КонецЕсли;
	
	мДерево = СтрокаДерева;
		
КонецПроцедуры

// Процедура осуществляет вывод родительских документов с ограничением по уровню в дереве
Процедура ВывестиБезРодителей(СписокДокументов)
	
	Для Каждого ЭлементСписка Из СписокДокументов Цикл
		
		МетаданныеДокумента = ЭлементСписка.Значение.Метаданные();
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ Ссылка, Проведен, ПометкаУдаления, #Сумма, Представление, """ + МетаданныеДокумента.Имя + """ КАК Метаданные
		| ИЗ Документ."+МетаданныеДокумента.Имя + " ГДЕ Ссылка = &Ссылка");
		
		Запрос.УстановитьПараметр("Ссылка", ЭлементСписка.Значение);
		
		Если МетаданныеДокумента.Реквизиты.Найти("СуммаДокумента") <> Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Сумма", "СуммаДокумента КАК СуммаДокумента");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "#Сумма", "NULL КАК СуммаДокумента");
		КонецЕсли;
		
		Выборка  = Запрос.Выполнить().Выбрать();
		ЕСли Выборка.Следующий() Тогда		
			Если мУжеВСписке[Выборка.Ссылка] = Неопределено Тогда
	            СтрокаДерева = мДерево.Строки.Добавить();
				СтрокаДерева.Ссылка= Выборка.Ссылка;
				СтрокаДерева.Проведен = Выборка.Проведен;
				СтрокаДерева.ПометкаУдаления = Выборка.ПометкаУдаления;
				СтрокаДерева.ДокументПредставление = Выборка.Представление;
				СтрокаДерева.ВидДокумента = Выборка.Метаданные;			
				СтрокаДерева.СуммаДокумента = Выборка.СуммаДокумента;
				СтрокаДерева.ОграничениеПоРодителям = Истина;
				мУжеВСписке.Вставить(Выборка.Ссылка, Истина);
			КонецЕсли;
		КонецЕсли;		
	КонецЦикла;

	мДерево = СтрокаДерева;
	
КонецПроцедуры

Функция ПолучитьСписокПодчиненныхДокументов(ДокументОснование) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Ссылка ИЗ КритерийОтбора.СтруктураПодчиненности(&ДокументОснование)";
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

// Процедура осуществляет вывод подчиненных документов
Процедура ВывестиПодчиненныеДокументы(СтрокаДерева)
	
	ТекущийДокумент = СтрокаДерева.Ссылка;	
	Таблица = ПолучитьСписокПодчиненныхДокументов(ТекущийДокумент);	
	КэшПоТипамДокументов = Новый Соответствие;
	
	Для Каждого СтрокаТаблицы ИЗ Таблица Цикл
		МетаданныеДокумента = СтрокаТаблицы.Ссылка.Метаданные();
		Если Не ПравоДоступа("Чтение", МетаданныеДокумента) Тогда
			Продолжить;
		КонецЕсли;			
		ИмяДокумента = МетаданныеДокумента.Имя;
		СинонимДокумента = МетаданныеДокумента.Синоним;
		
		ДополнитьКэшМетаданных(МетаданныеДокумента, ИмяДокумента);
		
		СтруктураТипа = КэшПоТипамДокументов[ИмяДокумента];
		Если СтруктураТипа = Неопределено Тогда
			СтруктураТипа = Новый Структура("Синоним, МассивСсылок", СинонимДокумента, Новый Массив);
			КэшПоТипамДокументов.Вставить(ИмяДокумента, СтруктураТипа);
		КонецЕсли;
		СтруктураТипа.МассивСсылок.Добавить(СтрокаТаблицы.Ссылка);		
	КонецЦикла;
	
	ЕСли КэшПоТипамДокументов.Количество() = 0 ТОгда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Для Каждого КлючИЗначение ИЗ КэшПоТипамДокументов Цикл
		Запрос.Текст = Запрос.Текст + ?(Запрос.Текст = "", "
					|ВЫБРАТЬ РАЗРЕШЕННЫЕ", "
					|ОБЪЕДИНИТЬ ВСЕ
					|ВЫБРАТЬ") + "
					|Ссылка, Представление, Проведен, ПометкаУдаления, 
					|" + ?(мКэшРеквизитовДокумента[КлючИЗначение.Ключ]["СуммаДокумента"], "СуммаДокумента", "NULL") + " КАК СуммаДокумента
					|ИЗ Документ." + КлючИЗначение.Ключ + "
					|ГДЕ Ссылка В (&" + КлючИЗначение.Ключ + ")";
					
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение.МассивСсылок);		
	КонецЦикла;	
	
	
	Выборка = Запрос.Выполнить().Выбрать();	
	
	Пока Выборка.Следующий() Цикл
		Если мУжеВСписке[Выборка.Ссылка] = Неопределено Тогда
			НоваяСтрока = СтрокаДерева.Строки.Добавить();
			НоваяСтрока.Ссылка = Выборка.Ссылка;
			НоваяСтрока.ДокументПредставление = Выборка.Представление;
			НоваяСтрока.СуммаДокумента = Выборка.СуммаДокумента;
			НоваяСтрока.Проведен = Выборка.Проведен;
			НоваяСтрока.ПометкаУдаления = Выборка.ПометкаУдаления;		
			мУжеВСписке.Вставить(Выборка.Ссылка, Истина);
			ВывестиПодчиненныеДокументы(НоваяСтрока);
		КонецЕсли;
	КонецЦикла;		
КонецПроцедуры

// Процедура выполняет открытие формы текущего документа
Процедура ОткрытьФормуДокумента()
	Попытка
		Форма = ЭлементыФормы.ДеревоДокументов.ТекущиеДанные.Ссылка.ПолучитьФорму();
		Форма.Открыть();
	Исключение
		ЕСли Найти(ОписаниеОшибки(), "недостаточно прав") <> 0 Тогда
			ПредупреждениеСообщение(, "У пользователя недостаточно прав на исполнение операции над базой данных");
		КонецЕсли;
	КонецПопытки;	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "Перед открытием формы"
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если ДокументСсылка = Неопределено ИЛИ ДокументСсылка.Пустая() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	//+yuraos, 10.09.2015
	yuraosИнициализация();
	//+yuraos, 10.09.2015

	ВывестиДеревоДокументов();
	ЭлементыФормы.ДеревоДокументов.Развернуть(ДеревоДокументов.Строки[0], Истина);
	
КонецПроцедуры

//+yuraos, 10.09.2015
Процедура yuraosИнициализация()
		
	ЭлементыФормы.ДеревоДокументов.УстановитьДействие("Выбор",Новый Действие("ДеревоДокументовВыбор"));
	ЭлементыФормы.ДеревоДокументов.Колонки.ДокументПредставление.ЭлементУправления.ТолькоПросмотр = Истина;
	
КонецПроцедуры

//+yuraos, 10.09.2015
Процедура ДеревоДокументовВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	Перем ПараметрыОповещенияОЗавершении;
	
	СтандартнаяОбработка = Истина;
	
	Если Колонка.Имя = "ДокументПредставление" Тогда
		СтандартнаяОбработка = Ложь;
		Меню = Новый СписокЗначений;
		Меню.Добавить(1, "Открыть в 1С:Администраторе", , БиблиотекаКартинок.Изменить);
		Меню.Добавить(0, "Открыть в форме объекта", , БиблиотекаКартинок.Лупа);
		
		ПараметрыОповещенияОЗавершении = ВыбраннаяСтрока.Ссылка;
		
		Если ИспользоватьРежимМодальности() Тогда
			// Стандартный ВыбратьИзМеню() в модальном режиме (8.2/8.3) с обработкой результата.
			Выбор = ЭтаФорма.ВыбратьИзМеню(Меню, Элемент);
			ДеревоДокументовВыборЗавершение(Выбор, ПараметрыОповещенияОЗавершении);
		Иначе
			// Стандартный ВыбратьИзМеню() в немодальном режиме (8.3) с обработкой результата.
			// Нет у обычной формы асинхронного метода ВыбратьИзМеню(), но модальный метод вполне работает!
			Выбор = ЭтаФорма.ВыбратьИзМеню(Меню, Элемент);
			ДеревоДокументовВыборЗавершение(Выбор, ПараметрыОповещенияОЗавершении);
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

//+yuraos, 10.09.2015
Процедура ДеревоДокументовВыборЗавершение(Выбор, ПараметрыОповещения) Экспорт
	// проверяем ответ диалога отметки значений списка и выполняем действия
	Если Выбор = Неопределено Тогда
		Возврат;
	ИначеЕсли Выбор.Значение = 1 Тогда
		ЭтаФорма.ВладелецФормы.НовоеОкноАдминистатора1С(Истина,ПараметрыОповещения);
	Иначе
		Попытка
			// по-возможности используем асинхронный метод
			Выполнить("ПоказатьЗначение(,ПараметрыОповещения);");
		Исключение
			ОткрытьЗначение(ПараметрыОповещения);
		КонецПопытки;
	КонецЕсли; 
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Процедура обработки события "При выводе строки" табличного поля "ДеревоДокументов"
Процедура ДеревоДокументовПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОформлениеСтроки.Ячейки.ДокументПредставление.ОтображатьКартинку = истина;
	Если ДанныеСтроки.Ссылка = ДокументСсылка Тогда
		ОформлениеСтроки.Шрифт = Новый Шрифт(,,Истина);
		ОформлениеСтроки.ЦветФона = Новый Цвет(230,230,230);
	Иначе
		ОформлениеСтроки.ЦветФона = Новый Цвет();
	КонецЕсли;
	Если ДанныеСтроки.Проведен Тогда
		ОформлениеСтроки.Ячейки.ДокументПредставление.ИндексКартинки = 0;
	ИначеЕСли ДанныеСтроки.ПометкаУдаления Тогда
		ОформлениеСтроки.Ячейки.ДокументПредставление.ИндексКартинки = 1;
	Иначе
		ОформлениеСтроки.Ячейки.ДокументПредставление.ИндексКартинки = 2
	КонецЕсли;
	
КонецПроцедуры

// Процедура обработки события "Перед началом изменения" табличного поля "ДеревоДокументов"
Процедура ДеревоДокументовПередНачаломИзменения(Элемент, Отказ)	
	ОткрытьФормуДокумента();
	Отказ = Истина;
КонецПроцедуры

Процедура КоманднаяПанельОбновитьДействие(Кнопка)
	
	Если ОсновнойДокументЕщеДоступен() Тогда
		ВывестиДеревоДокументов();
		ЭлементыФормы.ДеревоДокументов.Развернуть(ДеревоДокументов.Строки[0], Истина);
	Иначе
		ЗакрытьФормуСПредупреждением("Документ, для которого сформирован отчет о структуре
									 |подчиненности был удален, или же стал недоступен.");
	КонецЕсли;		
	
	
КонецПроцедуры

Процедура КоманднаяПанельВывестиДляТекущегоДействие(Кнопка)
	
	ДокументСсылка = ЭлементыФормы.ДеревоДокументов.ТекущиеДанные.Ссылка;
	Если ОсновнойДокументЕщеДоступен() Тогда
		ДеревоДокументов.Строки.Очистить();	
		ВывестиДеревоДокументов();
		ЭлементыФормы.ДеревоДокументов.Развернуть(ДеревоДокументов.Строки[0], Истина);
	Иначе
		ЗакрытьФормуСПредупреждением("Документ, для которого сформирован отчет о структуре
									 |подчиненности был удален, или же стал недоступен.");
	КонецЕсли;	
КонецПроцедуры

Процедура ОбновитьДоступностьКнопок()
	
КонецПроцедуры // () 

Процедура ДеревоДокументовПриАктивизацииСтроки(Элемент)
	ОбновитьДоступностьКнопок();	
КонецПроцедуры

Процедура ДополнитьКэшМетаданных(МетаданныеДокумента, ИмяДокумента)
	РеквизитыДокумента = мКэшРеквизитовДокумента[ИмяДокумента];
	Если РеквизитыДокумента = Неопределено Тогда
		РеквизитыДокумента = Новый Соответствие;		
		РеквизитыДокумента.Вставить("СуммаДокумента", МетаданныеДокумента.Реквизиты.Найти("СуммаДокумента") <> Неопределено);
		мКэшРеквизитовДокумента.Вставить(ИмяДокумента, РеквизитыДокумента);
	КонецЕсли;
	
КонецПроцедуры

Функция ОсновнойДокументЕщеДоступен()
	
	ИмяТекущегоДокумента = ДокументСсылка.Метаданные().Имя;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ Представление ИЗ Документ." + ИмяТекущегоДокумента + " ГДЕ Ссылка = &ТекущийДокумент";
	Запрос.УстановитьПараметр("ТекущийДокумент", ДокументСсылка);
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

Процедура ЗакрытьФормуСПредупреждением(ТекстПредупреждения)
	
	ЭтаФорма.Закрыть();
	ПредупреждениеСообщение(, ТекстПредупреждения);
	
КонецПроцедуры

// Выводит сообщение об ошибке и выставляет параметр Отказ в "Истина". 
// В случае работы на клиенте или на сервере выводит в окно сообщений,
// в случае внешнего соединения вызывает исключение.
//
// Параметры:
//  ТекстСообщения - строка, текст сообщения.
//  Отказ          - булево, признак отказа (необязательный).
//
Процедура СообщитьОбОшибке(Знач ТекстСообщения, Отказ = Ложь, Заголовок = "", Знач Статус = Неопределено, ВызыватьИсключение = Истина)

	Если Статус = Неопределено Тогда
		Статус = СтатусСообщения.Важное;
	КонецЕсли;
	
	ТекстСообщения = СформироватьТекстСообщения(ТекстСообщения);
	Отказ = Истина;
	
	#Если ВнешнееСоединение Тогда
		
		Если ВызыватьИсключение Тогда
			Если ЗначениеЗаполнено(Заголовок) Тогда
				ТекстСообщения = Заголовок + Символы.ПС + ТекстСообщения;
				Заголовок = "";
			КонецЕсли;
			
			ВызватьИсключение (ТекстСообщения);
		КонецЕсли;
		
	#Иначе
		
		Если ЗначениеЗаполнено(Заголовок) Тогда
			Сообщить(Заголовок);
			Заголовок = "";
		КонецЕсли;
		
		Сообщить(ТекстСообщения, Статус);
		
	#КонецЕсли
	
КонецПроцедуры // СообщитьОбОшибке()

// Функция убирает из текста сообщения служебную информацию
//
// Параметры
//  ТекстСообщения, Строка, исходный текст сообщения//
// Возвращаемое значение:
//   Строка
//
Функция СформироватьТекстСообщения(Знач ТекстСообщения)

	НачалоСлужебногоСообщения    = Найти(ТекстСообщения, "{");
	ОкончаниеСлужебногоСообщения = Найти(ТекстСообщения, "}:");
	
	Если ОкончаниеСлужебногоСообщения > 0 
		И НачалоСлужебногоСообщения > 0 
		И НачалоСлужебногоСообщения < ОкончаниеСлужебногоСообщения Тогда
		
		ТекстСообщения = Лев(ТекстСообщения, (НачалоСлужебногоСообщения - 1)) +
		                 Сред(ТекстСообщения, (ОкончаниеСлужебногоСообщения + 2));
						 
	КонецЕсли;
	
	Возврат СокрЛП(ТекстСообщения);

КонецФункции // ()

////////////////////////////////////////////////////////////////////////////////
// МОДАЛЬНОЕ/НЕМОДАЛЬНОЕ ПРЕДУПРЕЖДЕНИЕ.
//

Процедура ПредупреждениеСообщение(Оповещение, ТекстПредупрежденияСообщения, Таймаут = 0, Заголовок = "")
	
	Если ИспользоватьРежимМодальности() Тогда
		// Стандартно в модальном режиме (8.2/8.3) с обработкой результата.
		Предупреждение(ТекстПредупрежденияСообщения, Таймаут, Заголовок);
	Иначе
		// Стандартно в немодальном режиме (8.3) с обработкой результата.
		Выполнить("ПоказатьПредупреждение(Оповещение, ТекстПредупрежденияСообщения, Таймаут, Заголовок)");
	КонецЕсли;;
		
КонецПроцедуры

Функция ИспользоватьРежимМодальности()
	Возврат ЭтотОбъект.РежимИспользованияМодальностиБулево;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

ДеревоДокументов.Колонки.Добавить("Ссылка");
ДеревоДокументов.Колонки.Добавить("Проведен");
ДеревоДокументов.Колонки.Добавить("ПометкаУдаления");
ДеревоДокументов.Колонки.Добавить("ВидДокумента");
ДеревоДокументов.Колонки.Добавить("ОграничениеПоРодителям", Новый ОписаниеТипов("Булево"));
мУжеВСписке = Новый Соответствие;

мКэшРеквизитовДокумента = Новый Соответствие;
