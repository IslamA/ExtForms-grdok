Перем СчетчикОбновленийФормы, СчетчикСообщенийПриОбновлении;
Перем СтрокаРавно;
Перем НовыйТипОбъектаБД;
Перем ЭтаФормаЗаголовок;

//+yuraos, 10.09.2015
Перем ИмяФормы Экспорт; // - имитация одноименного свойства управляемых форм
Перем спСвязанныеОкна Экспорт;
Перем ФормаИнициализирована;
//+yuraos, 10.09.2015

// Обработка, в основном, ориентирована на работу в управляемом приложении.
// Поэтому основная форма - Управляемая.
// Для подключения обработки в конфигурациях на обычном интерфейсе
// необходимо указать в свойствах обработки в качестве основной формы обычную, имеющей имя: "Обычная".

// Для ВызоваОбработки из 1С после добавления её в справочник "Дополнительные отчеты и обработки", если используется Команда.Использование = "ВызовКлиентскогоМетода";
// В
// &НаСервере
// Функция СведенияОВнешнейОбработке() Экспорт
// ...
// Команда.Использование = "ВызовКлиентскогоМетода";
// ...
//
Процедура ВыполнитьКоманду(ИдентификаторКоманды, ОбъектыНазначения) Экспорт	// Синтаксис для вида внешней обработки "ЗаполнениеОбъекта".
	
	ОбъектБД = ОбъектыНазначения[0];
		
	// Вместо СохранитьЗначение("ОбъектБД", ОбъектБД);
	//*yuraos, 10.09.2015 - под >= 8.2 лучше использовать хранилище настроек, а не профиль.
	ХранилищеНастроекДанныхФорм.Сохранить(ИмяФормы, "ОбъектБД", ОбъектБД);
	//*yuraos, 10.09.2015
		
	Если ИдентификаторКоманды = "Администратор1С-ОткрытьОбъектВ" Тогда
		Открыть();
	КонецЕсли;	
	
КонецПроцедуры	

Процедура ДомашняяСтраницаОбработки(Кнопка)
	ЗапуститьПриложение(ЭтотОбъект.ДомашняяСтраницаОбработки);
КонецПроцедуры

Процедура ПриПовторномОткрытии(СтандартнаяОбработка)
	
	спСвязанныеОкнаПроверитьДобавить(Неопределено,Ложь);	//+yuraos, 10.09.2015
	
	ОбъектБДПриИзменении(Неопределено);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОСНОВНОЙ ОБЪЕКТ ФОРМЫ.
// 

Процедура ОбъектБДНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если Элемент.Значение = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		ВызватьВыборТипаОбъектаБД();	//+yuraos, 10.09.2015
		Возврат;
	КонецЕсли;
	
	Попытка
		СтандартнаяОбработка 	= Ложь;
		ТипОбъектаБД 			= ОбъектБДПолучитьТипОбъекта(ОбъектБД);
		ПолноеСтроковоеИмяТипа	= ОбъектБДПолучитьПолноеСтроковоеИмяТипа(ОбъектБД);
		
		ВызватьВыборОбъектаБД(ПолноеСтроковоеИмяТипа, Элемент, Истина);	//+yuraos, 10.09.2015
	Исключение
		Сообщить("МФ: " + ОписаниеОшибки(), СтатусСообщения.Информация);
		Сообщить("МФ: " + "Не удалось открыть ФормуВыбора. Конфигурация: """ + ЭтотОбъект.КонфигурацияИВерсия + """.", СтатусСообщения.Важное);
		Если (ЭтотОбъект.Конфигурация = "Розница") Тогда
			Сообщить("МФ: " + "Ошибка выявлена на редакции: Розница 2.0.3.14. Справочник ""ВнешниеПользователи"" при вызове Управляемой ФормыВыбора из формы ""Обычная"" данной Обработки.", СтатусСообщения.Внимание);
		КонецЕсли;
		СтандартнаяОбработка = Истина;
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

//+yuraos, 10.09.2015
Процедура ВызватьВыборТипаОбъектаБД()
	
	Элемент = ЭлементыФормы.ОбъектБД;
	
	СтруктураПараметров = Новый Структура;
	ПолноеСтроковоеИмяТипа = ОбъектБДПолучитьПолноеСтроковоеИмяТипа(ОбъектБД);
	СтруктураПараметров.Вставить("ТипОбъектаСтрокой", ПолноеСтроковоеИмяТипа);
	
	ФильтрПоСсылочнымМетаданным = Новый СписокЗначений;
	ФильтрПоСсылочнымМетаданным.Добавить("Справочники");
	ФильтрПоСсылочнымМетаданным.Добавить("Документы");
	ФильтрПоСсылочнымМетаданным.Добавить("ПланыОбмена");
	ФильтрПоСсылочнымМетаданным.Добавить("ПланыВидовХарактеристик");
	ФильтрПоСсылочнымМетаданным.Добавить("БизнесПроцессы");
	ФильтрПоСсылочнымМетаданным.Добавить("Задачи");
	ФильтрПоСсылочнымМетаданным.Добавить("ПланыСчетов");
	ФильтрПоСсылочнымМетаданным.Добавить("ПланыВидовРасчета");
	СтруктураПараметров.Вставить("КоллекцииВыбираемыхОбъектовМетаданных", ФильтрПоСсылочнымМетаданным);
	
	ФормаВыбораОбъектаМетаДанных = ОбработкаОбъект.ПолучитьФорму(Настройки.ИмяФормыВыборОбъектаМетаданных, Элемент, ЭтаФорма);
	
	ФормаВыбораОбъектаМетаДанных.Параметры = СтруктураПараметров;
	ФормаВыбораОбъектаМетаДанных.ЗакрыватьПриЗакрытииВладельца = Истина;
	ФормаВыбораОбъектаМетаДанных.ЗакрыватьПриВыборе = Истина;
	
	Если ИспользоватьРежимМодальности() Тогда
		// Стандартно в модальном режиме (8.2/8.3) с обработкой результата.
		ВыбранныйОбъектМетаДанных = ФормаВыбораОбъектаМетаДанных.ОткрытьМодально();
		Если ВыбранныйОбъектМетаДанных <> Неопределено Тогда	//+yuraos, 10.09.2015
			ВызватьВыборОбъектаБД(ВыбранныйОбъектМетаДанных, Элемент, Ложь);
		КонецЕсли;
	Иначе
		// Стандартно в немодальном режиме (8.3) с обработкой результата.
		ФормаВыбораОбъектаМетаДанных.ИсточникВыбора = ЭтаФорма;
		ФормаВыбораОбъектаМетаДанных.БлокироватьИсточникВыбора = Истина;	// Блокируем форму на время выбора типа объекта.
		ФормаВыбораОбъектаМетаДанных.Открыть();
	КонецЕсли;
	
КонецПроцедуры

Процедура ВызватьВыборОбъектаБД(ВыбранныйОбъектМетаДанных, Элемент, ТипОбъектаУстановлен) Экспорт
	
	//+yuraos, 10.09.2015
	Если ОбъектБД <> Неопределено И ВыбранныйОбъектМетаДанных <> ОбъектБДПолучитьПолноеСтроковоеИмяТипа(ОбъектБД) Тогда
		// Если выбранный тип не совпадает с текущим - очистим форму.
		ОбъектБДОчистка(Элемент, Истина);
	КонецЕсли; 
	//+yuraos, 10.09.2015
	
	Если ЗначениеЗаполнено(ВыбранныйОбъектМетаДанных) Тогда
		
		хПозицияТочки = Найти(ВыбранныйОбъектМетаДанных, ".");
		хТипМД 	= Лев(ВыбранныйОбъектМетаДанных, хПозицияТочки-1);
		хОбъект = Сред(ВыбранныйОбъектМетаДанных, хПозицияТочки+1);
		
		Если ТипОбъектаУстановлен <> Истина Тогда
			ТипОбъектаБД 			= хТипМД;
			ПолноеСтроковоеИмяТипа	= ВыбранныйОбъектМетаДанных;
		КонецЕсли; 
				
		Элемент.ОграничениеТипа = Новый ОписаниеТипов(хТипМД + "Ссылка." + хОбъект);
		Элемент.ВыбиратьТип = Ложь;
		
		Параметры = Новый Структура;
		Параметры.Вставить("РежимВыбора" , Истина);
		Параметры.Вставить("ТекущаяСтрока", ОбъектБД); //+ yuraos, 10.09.2015 - для управляемых форм в обычном приложении
		Если ТипОбъектаБД = ИмяТипаСправочники() ИЛИ ТипОбъектаБД = ИмяТипаПланыВидовХарактеристик() Тогда
			Параметры.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.ГруппыИЭлементы);
		КонецЕсли;
		
		ФормаВыбораОбъектаБД = ПолучитьФорму(ПолноеСтроковоеИмяТипа + ".ФормаВыбора", Параметры, Элемент);
		ФормаВыбораОбъектаБД.ЗакрыватьПриВыборе = Истина;
		ФормаВыбораОбъектаБД.ЗакрыватьПриЗакрытииВладельца = Истина;
		
		Если ТипЗнч(ФормаВыбораОбъектаБД) = Тип("Форма") Тогда
			ФормаВыбораОбъектаБД.РежимВыбора = Истина;
			
			Попытка
				// В ФормеВыбора должено присутствовать ПараметрВыборГруппИЭлементов.
				Если ТипОбъектаБД = ИмяТипаСправочники() ИЛИ ТипОбъектаБД = ИмяТипаПланыВидовХарактеристик() Тогда
					ФормаВыбораОбъектаБД.ПараметрВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.ГруппыИЭлементы;
				КонецЕсли;
			Исключение
				// ФормаВыбора ???
				// Открытие некоторых справочников в некоторых конфигурацмях.
				ПредупреждениеСообщение(, "ФормаВыбора не может быть открыта.
				|
				|Возможные причины:
				|
				|1. При открытии ФормыВыбора производится специфическая обработка (например используется отбор) результат которой - отказ в запуске.
				|2. Возможно открываемая форма (со специфической обработкой при запуске) не является ФормойВыбора списочного типа - отказ в запуске.
				|");
			КонецПопытки;
			
			Попытка
				ФормаВыбораОбъектаБД.НачальноеЗначениеВыбора = ОбъектБД;
			Исключение
			КонецПопытки;
			
		КонецЕсли;
		
		Если ИспользоватьРежимМодальности() Тогда
			// Стандартно в модальном режиме (8.2/8.3) с обработкой результата.
			ВыбранноеЗначение = ФормаВыбораОбъектаБД.ОткрытьМодально();
			ВызватьОбъектБДПриИзменении(ВыбранноеЗначение, Элемент);
		Иначе
			// Стандартно в немодальном режиме (8.3) с обработкой результата.
			ФормаВыбораОбъектаБД.Открыть();
		КонецЕсли;;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВызватьОбработкуВыбранногоОбъектаБД(ВыбранныйОбъектБД, Элемент) Экспорт
	
	Если НЕ ВыбранныйОбъектБД = Неопределено Тогда
		ОбъектБД = ВыбранныйОбъектБД;
		Элемент.Значение = ОбъектБД;
		ОбъектБДПриИзменении(Элемент);
	Иначе	
		Если ПоказыватьСообщения Тогда
			Сообщить("МФ: " + "Если в ФормеВыбора производились изменения с выбранным ранее Объектом " + ТипОбъектаБД + ": """ + ОбъектБД + """, то необходимо сделать Обновление Формы.", СтатусСообщения.Внимание);
		Иначе
			Элемент.Значение = ОбъектБД;
			ОбъектБДПриИзменении(Элемент);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбъектБДПриИзменении(Элемент)
	
	ФормаОчистить();
	
	Если ОбъектБД = Неопределено Тогда
		Возврат;
	КонецЕсли;

	мдОбъектаБД				= ОбъектБД.Метаданные();
	ТипОбъектаБД 			= ОбъектБДПолучитьТипОбъекта(ОбъектБД);
	ПолноеСтроковоеИмяТипа	= ОбъектБДПолучитьПолноеСтроковоеИмяТипа(ОбъектБД);
	ЭтаФорма.Заголовок		= ЭтаФормаЗаголовок + " ";
	
	Если ТипОбъектаБД = ИмяТипаДокументы() Тогда
		Если НЕ ЭтотОбъект.МетаданныеПроведениеДокументаРазрешено(ОбъектБД) Тогда		// Если Документ нельзя проводить - Выделим КРАСНЫМ.
			ЭлементыФормы.ОбъектБДЗаголовок.ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
		Иначе
			ЭлементыФормы.ОбъектБДЗаголовок.ЦветТекста = ЦветаСтиля.ЦветТекстаФормы;
		КонецЕсли;
	КонецЕсли;
		
	Если ОбъектБД.Пустая() Тогда
		Если НЕ ТипОбъектаБД = ИмяТипаДокументы() Тогда
			ЭтаФорма.Заголовок	= ЭтаФормаЗаголовок + " " + ПолноеСтроковоеИмяТипа;
			ЭлементыФормы.ОбъектБДЗаголовок.Заголовок = "" + ТипОбъектаБД + ":";
		Иначе
			ЭтаФорма.Заголовок = ЭтаФорма.Заголовок + ТипОбъектаБД + ": " + мдОбъектаБД.Синоним;
			ЭлементыФормы.ОбъектБДЗаголовок.Заголовок = "" + ТипОбъектаБД + ":";
		КонецЕсли;
	Иначе
		Если ТипОбъектаБД = ИмяТипаСправочники() ИЛИ ТипОбъектаБД = ИмяТипаПланыОбмена() ИЛИ ТипОбъектаБД = ИмяТипаПланыВидовХарактеристик() Тогда
			ПоказатьДвижения = Ложь;
			ЭтаФорма.Заголовок = ЭтаФорма.Заголовок  + ПолноеСтроковоеИмяТипа + ?(ОбъектБДПолучитьПризнакПредопределенныйОбъекта(ОбъектБД)," (*)","") + ": " + ОбъектБД;
			ЭлементыФормы.ОбъектБДЗаголовок.Заголовок = "" + ТипОбъектаБД + ?(ОбъектБДПолучитьПризнакПредопределенныйОбъекта(ОбъектБД)," (*)","") + ":";
		ИначеЕсли ТипОбъектаБД = ИмяТипаДокументы() Тогда
			ЭтаФорма.Заголовок = ЭтаФорма.Заголовок + ТипОбъектаБД + ": " + ОбъектБД;
			ЭлементыФормы.ОбъектБДЗаголовок.Заголовок = "" + ТипОбъектаБД + ":";
		Иначе
			ЭтаФорма.Заголовок = ЭтаФорма.Заголовок + ТипОбъектаБД + ": " + ОбъектБД;
			ЭлементыФормы.ОбъектБДЗаголовок.Заголовок = "" + ТипОбъектаБД + ":";
		КонецЕсли;
	КонецЕсли;
	
	ОбъектБДПолучитьСтрокуСостоянияОбъекта();
	
	Если ЗначениеЗаполнено(ОбъектБД) Тогда
		
		СчетчикСообщенийПриОбновлении = 0;
		Если ПоказыватьСообщения Тогда
			Если НЕ Элемент = "ОбъектБДЗаписать" Тогда
				ОчиститьСообщения();
			КонецЕсли;
			Сообщить(СтрокаРавно);
			Сообщить("МФ: " + "Подождите. Производится формирование основных таблиц данных.", СтатусСообщения.ОченьВажное);
			Сообщить(СтрокаРавно);
		КонецЕсли;
		
		ОбъектБДСформироватьТРеквизиты(ОбъектБД);
		Если ПоказыватьСообщения Тогда
			Сообщить("МФ: " + "Формирование таблицы ""РеквизитыОбъекта"" завершено.", СтатусСообщения.Важное);
		КонецЕсли;
		
		Если ТипОбъектаБД = ИмяТипаПланыСчетов() ИЛИ ТипОбъектаБД = ИмяТипаПланыВидовРасчета() Тогда
			// 2012.10.12. Метод мдОбъектаБД.СтандартныеТабличныеЧасти.Количество() у ПланаСчетов отсутствует.
			НаличиеСТЧ = Ложь;
			Попытка
				Тмп = мдОбъектаБД.СтандартныеТабличныеЧасти[0];
				НаличиеСТЧ = Истина;
			Исключение
				НаличиеСТЧ = Ложь;
			    //Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
			КонецПопытки;
			Если НаличиеСТЧ Тогда
				ОбъектБДСформироватьТЧасти(ОбъектБД, "СтандартныеТабличныеЧасти");
			КонецЕсли;
		КонецЕсли;
		
		Если мдОбъектаБД.ТабличныеЧасти.Количество() > 0 Тогда
			ОбъектБДСформироватьТЧасти(ОбъектБД, "ТабличныеЧасти");
		КонецЕсли;
		
		ОбъектБДПоказатьФОпцииРеквизитов(ОбъектБД);
		
		Если ПоказатьДвижения Тогда
			ОбъектБДСформироватьТДвижений(ОбъектБД, "ОбъектБДПриИзменении");
		КонецЕсли;

		Если ПоказыватьСообщения Тогда
			Если НЕ ПоказатьДвижения Тогда
				Сообщить(СтрокаРавно);
			КонецЕсли;
			Сообщить("МФ: " + "Формирование основных таблиц завершено.", СтатусСообщения.ОченьВажное);
			Сообщить(СтрокаРавно);
		КонецЕсли;
	
		ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ТРеквизитыОбъекта;
		
		//+yuraos, 10.09.2015
		Если ТипЗнч(Элемент) = Тип("ПолеВвода") Тогда
			СписокВыбора = ЭлементыФормы.ОбъектБД.СписокВыбора;
			ЭтотОбъект.СписокПустыхСсылокВставить(СписокВыбора,ОбъектБД,);
		КонецЕсли; 
		//+yuraos, 10.09.2015
		
	Иначе
		
		ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ОбъектБД;
			
	КонецЕсли;
	
	Если НовыйТипОбъектаБД Тогда
		ОбъектБДСформироватьТаблицыМетаданных(ОбъектБД);
		НовыйТипОбъектаБД = Ложь;
	КонецЕсли;

КонецПроцедуры

Процедура ОбъектБДОткрытие(Элемент, СтандартнаяОбработка)
	Перем Оповещение;
	
	Если НЕ ЗначениеЗаполнено(Элемент.Значение) Тогда
		Возврат;
	КонецЕсли;
	
	ТипОбъектаБД = ОбъектБДПолучитьТипОбъекта(ОбъектБД);
	мдОбъектаБД	 = ОбъектБД.Метаданные();
	
	Попытка
		
		// Обычная или Управляемая Формы (форма конфигурации).
		
		СтандартнаяОбработка = Ложь;
	
		ПолноеСтроковоеИмяТипа = ОбъектБДПолучитьПолноеСтроковоеИмяТипа(ОбъектБД);
	
		Параметры = Новый Структура("Ключ", ОбъектБД);
	
		Если ((ТипОбъектаБД = ИмяТипаСправочники() ИЛИ ТипОбъектаБД = ИмяТипаПланыВидовХарактеристик()) И мдОбъектаБД.Иерархический И ОбъектБД.ЭтоГруппа) Тогда
			ФормаОбъектаБД = ПолучитьФорму(ПолноеСтроковоеИмяТипа + ".ФормаГруппы", Параметры, ЭтаФорма);
		Иначе	
			ФормаОбъектаБД = ПолучитьФорму(ПолноеСтроковоеИмяТипа + ".ФормаОбъекта", Параметры, ЭтаФорма);
		КонецЕсли;
		ФормаОбъектаБД.ЗакрыватьПриЗакрытииВладельца = Истина;
		
		Если ИспользоватьРежимМодальности() Тогда
			// Стандартно в модальном режиме (8.2/8.3) с обработкой результата.
			ФормаОбъектаБД.ОткрытьМодально();
			ОбъектБДОткрытиеЗавершение(Неопределено, Элемент);
		Иначе
			// Стандартно в немодальном режиме (8.3) с обработкой результата.
			Оповещение = Вычислить("Новый ОписаниеОповещения(""ОбъектБДОткрытиеЗавершение"", ЭтаФорма, Элемент)");
			//*yuraos, 10.09.2015
			Попытка
				Выполнить("ФормаОбъектаБД.ОписаниеОповещенияОЗакрытии = Оповещение");
			Исключение
				// Обычная форма в управляемом приложении - увы нет такого атрибута у обычной формы!
				СтандартнаяОбработка = Истина;
				Сообщить("Стандартное открытие ФормыОбъекта.", СтатусСообщения.Внимание);
				Сообщить("После внесения изменений и сохранении Объекта,", СтатусСообщения.Внимание);
				Сообщить("выполните обновление формы обработки.", СтатусСообщения.Внимание);
				Возврат;
			КонецПопытки;
			//*yuraos, 10.09.2015
			ФормаОбъектаБД.Открыть();
		КонецЕсли;
		
	Исключение
		
		СтандартнаяОбработка = Истина;
		
		Если ПоказыватьСообщения Тогда
			ПредупреждениеСообщение(, "МФ: " + "Стандартное открытие ФормыОбъекта.
			|
			|После внесения изменений и сохранении Объекта,
			|выполните обновление формы обработки.");
		КонецЕсли;
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбъектБДОткрытиеЗавершение(Значение, Элемент) Экспорт
	ОбъектБДПриИзменении(Элемент);
КонецПроцедуры

Процедура ОбъектБДСформироватьТЧасти(ОбъектБД, ВидТабличнойЧасти = "ТабличныеЧасти")
	
	мдОбъектаБД		= ОбъектБД.Метаданные();
	ТипОбъектаБД	= ОбъектБДПолучитьТипОбъекта(ОбъектБД);
	
	Если НЕ ЗначениеЗаполнено(ОбъектБД)
		ИЛИ (ВидТабличнойЧасти = "ТабличныеЧасти" И мдОбъектаБД[ВидТабличнойЧасти].Количество() = 0) Тогда
		Возврат;
	КонецЕсли;
	
	Первая = Неопределено;

	// Заполнение табличных частей ОбъектаБД.
	// 1. Создание Реквизита Формы типа "Страница".
	// 2. Создание Реквизита Формы типа "ТаблицаЗначений" на Странице.
	Для Каждого мдТЧ ИЗ мдОбъектаБД[ВидТабличнойЧасти] Цикл
		
		СчитыватьДанные = Ложь;
		Если ТипОбъектаБД = ИмяТипаСправочники() ИЛИ ТипОбъектаБД = ИмяТипаПланыВидовХарактеристик() Тогда
			Если (мдТЧ.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы И ОбъектБД.ЭтоГруппа)
			ИЛИ (мдТЧ.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента И НЕ ОбъектБД.ЭтоГруппа)
			ИЛИ (мдТЧ.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппыИЭлемента) Тогда
				СчитыватьДанные = Истина;
			КонецЕсли;
		Иначе
			СчитыватьДанные = Истина;
		КонецЕсли;
		
		Если СчитыватьДанные Тогда
			
			ФормаСтраницаТЧ		= ФормаСоздатьСтраницуИПолеДляТЗ(ФормаПолучитьИмяРеквизитаТабличнаяЧасть(мдТЧ.Имя), мдТЧ.Представление(), ЭлементыФормы.СтраницыГруппаТЧ, Ложь);
			РеквизитТаблицаТЧ	= ФормаСоздатьРеквизитТипаТЗ(ФормаПолучитьИмяРеквизитаТабличнаяЧасть(мдТЧ.Имя), ФормаСтраницаТЧ, ОбъектБД[мдТЧ.Имя].Выгрузить());
			
			Если ТипОбъектаБД = ИмяТипаПланыСчетов() И мдТЧ.Имя = "ВидыСубконто" Тогда
				ЭлементыФормы.СтраницыГруппаТЧ.Страницы.ТЧастьВидыСубконто.Заголовок = мдТЧ.Представление() + " (МАХ " + мдОбъектаБД.МаксКоличествоСубконто + ")";
			КонецЕсли;
			
			//+yuraos, 10.09.2015 
			// Видимость родительской страницы панели формы.
			ПанельСтраница = ЭлементыФормы.СтраницыГруппаТЧ.Страницы[ФормаПолучитьИмяРеквизитаТабличнаяЧасть(мдТЧ.Имя)];
			ПанельСтраница.Видимость = (НЕ СкрыватьПустыеТабличныеЧасти ИЛИ СкрыватьПустыеТабличныеЧасти И ОбъектБД[мдТЧ.Имя].Количество() > 0);
			// Первая страница панели с таблицами табчастей для активизации.
			Если Первая = Неопределено И ПанельСтраница.Видимость = Истина Тогда
				Первая = ПанельСтраница;
			КонецЕсли;
			//+yuraos, 10.09.2015
			
		Иначе
			Если ПоказыватьСообщения Тогда
				Сообщить("МФ: " + "Табличная часть: """ + мдТЧ.Имя + """ не формируется, т.к. используется для: """ + мдТЧ.Использование + """.", СтатусСообщения.Внимание);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ((ЭлементыФормы.СтраницыГруппаТЧ.Страницы.Количество() > 1) И (ЭлементыФормы.СтраницыГруппаТЧ.Страницы.Найти("УдаляемаяСтраница") <> Неопределено)) Тогда
		ЭлементыФормы.СтраницыГруппаТЧ.Страницы.Удалить(0);
	КонецЕсли;
	
	Если НЕ Первая = Неопределено Тогда
		ЭлементыФормы.СтраницыГруппаТЧ.ТекущаяСтраница = Первая;	//+yuraos, 10.09.2015
	КонецЕсли;
	
	Если ПоказыватьСообщения Тогда
		Сообщить("МФ: " + "Формирование таблиц ""ТабличныеЧасти"" Объекта завершено.", СтатусСообщения.Важное);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбъектБДПоказатьФОпцииРеквизитов(ОбъектБД)
	
	ПолучитьФункциональныеОпцииРеквизитовОбъекта(ОбъектБД, ТРеквизитыОбъекта, Неопределено, Ложь);
	
	Для Каждого ЭлементТЧасть ИЗ ЭлементыФормы.СтраницыГруппаТЧ.Страницы Цикл
		Если ЭлементТЧасть.Имя = "УдаляемаяСтраница" Тогда
			Продолжить;
		КонецЕсли;
		ПолучитьФункциональныеОпцииРеквизитовОбъекта(ОбъектБД, ЭлементыФормы[ЭлементТЧасть.Имя] , СтрЗаменить(ЭлементТЧасть.Имя, "ТЧасть", ""), Ложь);
	КонецЦикла;
	
	Если ПоказыватьСообщения Тогда
		Сообщить("МФ: Формирование ф.опций реквизитов завершено.");
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбъектБДСформироватьТДвижений(ОбъектБД, ВызывающаяПроцедура)
	
	Если НЕ ПоказатьДвижения 
		ИЛИ НЕ Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(ОбъектБД)) 
		ИЛИ ОбъектБД = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	мдОбъектаБД = ОбъектБД.Метаданные();
	ОбязательноПоказать = НЕ СкрыватьПустыеТаблицыДвиженийРегистров И (мдОбъектаБД.Имя = "КорректировкаРегистров" ИЛИ мдОбъектаБД.Имя = "КорректировкаЗаписейРегистров" ИЛИ мдОбъектаБД.Движения.Количество() > 20);
	
	Если ПоказыватьСообщения ИЛИ ОбязательноПоказать Тогда
		Если ОбязательноПоказать Тогда
			Сообщить("МФ: Общее количество движений: " + мдОбъектаБД.Движения.Количество() + ".");
			Сообщить("МФ: Для того, чтобы не выводить на экран таблицы Регистров, в которых документ не осуществил движения 
			|воспользуйтесь настройкой параметра ""Скрывать пустые таблицы движений регистров"".");
		КонецЕсли;
		Сообщить("МФ: " + "Формирование таблиц ""Движения по Регистрам"". " + ТекущаяДата() + " Подождите ... " , СтатусСообщения.Важное);
	КонецЕсли;
	
	//+yuraos, 10.09.2015
	Первая = Новый Соответствие;
	КартинкаНулл = Новый Картинка;
	// Очищаем страницы с таблицами движений документа (еще раз на всякий случай).
	Если ЭлементыФормы.СтраницыГруппаРС.Страницы.Количество()+
		ЭлементыФормы.СтраницыГруппаРН.Страницы.Количество()+
		ЭлементыФормы.СтраницыГруппаРБ.Страницы.Количество()+
		ЭлементыФормы.СтраницыГруппаРР.Страницы.Количество() > 0 Тогда
		ФормаУдалитьСтраницы(ЭлементыФормы.СтраницыГруппаРС);
		ФормаУдалитьСтраницы(ЭлементыФормы.СтраницыГруппаРН);
		ФормаУдалитьСтраницы(ЭлементыФормы.СтраницыГруппаРБ);
		ФормаУдалитьСтраницы(ЭлементыФормы.СтраницыГруппаРР);
	КонецЕсли;
	// Очищаем старые контекстные меню таблиц движений документа.
    ГруппаКонтМеню = ЭлементыФормы.СлужебнаяКонтМеню.Кнопки.КонтМенюМенюВсе.Кнопки.КонтМенюТаблицыДвижений.Кнопки;
	ГруппаКонтМеню.Очистить();
	// Устанавливаем доступность кнопки "Записать измененные наборы движений".
	Кнопки = ЭлементыФормы.ОсновныеДействияФормы.Кнопки.пмПроведение.Кнопки;
	// Изначально таблицы наборов движений не доступны для изменения.
	Кнопки.кнОМЗаписатьИзмененныеНаборыДвижений.Доступность = Ложь;
	//+yuraos, 10.09.2015
	
	// Заполнение табличных частей ОбъектаБД.
	// 1. Создание Реквизита Формы типа "Страница".
	// 2. Создание Реквизита Формы типа "ТаблицаЗначений" на Странице.
	Для Каждого МетаданныеРегистра ИЗ мдОбъектаБД.Движения Цикл
		Если Метаданные.РегистрыСведений.Индекс(МетаданныеРегистра) > -1 Тогда
			ТипРегистра 		= "РегистрСведений";
			МенеджерРегистра	= РегистрыСведений[МетаданныеРегистра.Имя];
			ЭлементРодитель		= ЭлементыФормы.СтраницыГруппаРС;
		ИначеЕсли Метаданные.РегистрыНакопления.Индекс(МетаданныеРегистра) > -1 Тогда
			ТипРегистра 		= "РегистрНакопления";
			МенеджерРегистра	= РегистрыНакопления[МетаданныеРегистра.Имя];
			ЭлементРодитель 	= ЭлементыФормы.СтраницыГруппаРН;
		ИначеЕсли Метаданные.РегистрыБухгалтерии.Индекс(МетаданныеРегистра) > -1 Тогда
			ТипРегистра 		= "РегистрБухгалтерии";
			МенеджерРегистра	= РегистрыБухгалтерии[МетаданныеРегистра.Имя];
			ЭлементРодитель 	= ЭлементыФормы.СтраницыГруппаРБ;
		ИначеЕсли Метаданные.РегистрыРасчета.Индекс(МетаданныеРегистра) > -1 Тогда
			ТипРегистра 		= "РегистрРасчета";
			МенеджерРегистра	= РегистрыРасчета[МетаданныеРегистра.Имя];
			ЭлементРодитель 	= ЭлементыФормы.СтраницыГруппаРР;
		КонецЕсли;
		
		НаборЗаписей = МенеджерРегистра.СоздатьНаборЗаписей();	// Быстрее Запроса ~ 4 раза (замер производительности).
		НаборЗаписей.Отбор.Регистратор.Установить(ОбъектБД);
		
		НаборЗаписей.Прочитать();
		
		ТаблицаРегистра = НаборЗаписей.Выгрузить();
		
		// Удалим "лишние" - "неполезные" колонки.
		ТаблицаРегистра.Колонки.Удалить("Регистратор");
		Если ТаблицаРегистра.Колонки.Найти("МоментВремени") <> Неопределено Тогда
			ТаблицаРегистра.Колонки.Удалить("МоментВремени");
		КонецЕсли;
		
		ФормаСтраницаТЧ		= ФормаСоздатьСтраницуИПолеДляТЗ(ФормаПолучитьИмяРеквизитаРегистр(МетаданныеРегистра.Имя), МетаданныеРегистра.Представление(), ЭлементРодитель, Истина);
		РеквизитТаблицаТЧ	= ФормаСоздатьРеквизитТипаТЗ(ФормаПолучитьИмяРеквизитаРегистр(МетаданныеРегистра.Имя), ФормаСтраницаТЧ, ТаблицаРегистра);
		
		//+yuraos, 10.09.2015
		// 0. подменю командной панели, используемой в качестве контекстного меню элемента РеквизитТаблицаТЧ.
		КонтМеню = ГруппаКонтМеню.Добавить(МетаданныеРегистра.Имя,ТипКнопкиКоманднойПанели.Подменю,МетаданныеРегистра.Имя);
		// Имя родительской панели элемента РеквизитТаблицаТЧ сохраним в подсказке подменю.
		КонтМеню.Подсказка = ЭлементРодитель.Имя;
		ФормаСтраницаТЧ.КонтекстноеМеню = КонтМеню;
		ФормаСтраницаТЧ.АвтоКонтекстноеМеню = Истина;
		// 1. Команда для включения редактирования набора движений документа.
		Кнопка = КонтМеню.Кнопки.Добавить("ОбъектБДИзменятьТДвижений_"+МетаданныеРегистра.Имя,ТипКнопкиКоманднойПанели.Действие);
		Кнопка.Действие = Новый Действие("ОбъектБДИзменятьТДвижений");
		Кнопка.Текст = "Включить изменение набора движений";
		Кнопка.Пояснение = "Включить изменение таблицы набора движений документа";
		Кнопка.Подсказка = КонтМеню.Подсказка;
		Кнопка.Отображение = ОтображениеКнопкиКоманднойПанели.НадписьКартинка; 
		Кнопка.Доступность = Истина;
		Кнопка.ИзменяетДанные = Ложь;
		Кнопка.Картинка = БиблиотекаКартинок.ТабличныйДокументТолькоПросмотр;
		// 2. Команда для записи редактируемого набора движений документа в базу.
		Кнопка = КонтМеню.Кнопки.Добавить("ОбъектБДЗаписатьТДвижений_"+МетаданныеРегистра.Имя,ТипКнопкиКоманднойПанели.Действие);
		Кнопка.Действие = Новый Действие("ОбъектБДЗаписатьТДвижений");
		Кнопка.Текст = "Записать набор движений документа";
		Кнопка.Пояснение = "Записать таблицу набора движений документа в базу";
		Кнопка.Подсказка = КонтМеню.Подсказка;
		Кнопка.Отображение = ОтображениеКнопкиКоманднойПанели.НадписьКартинка; 
		Кнопка.Доступность = Ложь;
		Кнопка.ИзменяетДанные = Ложь;
		Кнопка.Картинка = БиблиотекаКартинок.Провести;
		// 3. Видимость и оформление родительской страницы панели формы.
		ПанельСтраница = ЭлементРодитель.Страницы[ФормаПолучитьИмяРеквизитаРегистр(МетаданныеРегистра.Имя)];
		ПанельСтраница.Видимость = (НЕ СкрыватьПустыеТаблицыДвиженийРегистров ИЛИ СкрыватьПустыеТаблицыДвиженийРегистров И ТаблицаРегистра.Количество() > 0); 
		ПанельСтраница.КартинкаЗаголовка = КартинкаНулл;
		// 4. Первая страница панели с таблицами движений для активизации.
		Если Первая[ЭлементРодитель] = Неопределено И ПанельСтраница.Видимость = Истина Тогда
			Первая[ЭлементРодитель] = ПанельСтраница;
		КонецЕсли; 
		//+yuraos, 10.09.2015
		
		Если ((ЭлементРодитель.Страницы.Количество() > 1) И (ЭлементРодитель.Страницы.Найти("УдаляемаяСтраница") <> Неопределено)) Тогда
			ЭлементРодитель.Страницы.Удалить(0);
		КонецЕсли;
		
	КонецЦикла;
	
	//+yuraos, 10.09.2015
	Для Каждого КЗ ИЗ Первая Цикл
		КЗ.Ключ.ТекущаяСтраница = КЗ.Значение;
	КонецЦикла; 
	//+yuraos, 10.09.2015
	
	Если ПоказыватьСообщения  ИЛИ ОбязательноПоказать Тогда
		Сообщить("МФ: " + "Формирование таблиц ""Движения по Регистрам"" Объекта  " + ТекущаяДата() + " завершено.", СтатусСообщения.Важное);
		Сообщить(СтрокаРавно);
	КонецЕсли;
		
КонецПроцедуры

Процедура ОбъектБДСформироватьТаблицыМетаданных(ОбъектБД)
	
	РезультатВыполнения	= ПолучитьСписокПодписокНаСобытияОбъектаМД(ОбъектБД);
	
	РезультатВыполнения	= ПолучитьСписокФункциональныхОпцийОбъектаМД(ОбъектБД);
	
	РезультатВыполнения	= ПолучитьСписокПлановОбменаОбъектаМД(ОбъектБД);
	
	РезультатВыполнения	= ПолучитьСписокРегистровСвязанныхСОбъектомМД(ОбъектБД);
	ЭлементыФормы.СтраницыМетаданных.Страницы.ПанельРегистры.Заголовок = РезультатВыполнения.Заголовок;
	
	РезультатВыполнения	= ПолучитьСписокВводНаОснованииОъектаМД(ОбъектБД);
	
	Если ПоказыватьСообщения Тогда
		Сообщить("МФ: " + "Формирование таблицы ""Метаданные: Регистры"" завершено.", СтатусСообщения.Важное);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбъектБДОчистка(Элемент, СтандартнаяОбработка)
	
	ОбъектБД = Неопределено;
	НовыйТипОбъектаБД = Истина;
	
	//+yuraos, 10.09.2015
	СтандартнаяОбработка = Ложь;
	ЭлементыФормы.ОбъектБД.ОграничениеТипа = Новый ОписаниеТипов();
	ЭлементыФормы.ОбъектБД.ВыбиратьТип = Истина;
	ТипОбъектаБД = Неопределено;
	ИмяОбъектаБД = "";
	ПолноеСтроковоеИмяТипа = "";
	//+yuraos, 10.09.2015
	
	ЭтаФорма.Заголовок	= ЭтаФормаЗаголовок;
	ЭлементыФормы.ОбъектБДЗаголовок.Заголовок = "ОбъектБД:";
	ЭлементыФормы.ОбъектБДЗаголовок.ЦветТекста = ЦветаСтиля.ЦветТекстаФормы;
	ЭлементыФормы.СтраницыМетаданных.Страницы.ПанельРегистры.Заголовок = "Регистры";
	ЭлементыФормы.СтрокаСтатуса.Заголовок = "";
	
	ПоказатьДвижения = Ложь;
	
	ОчиститьСообщения();
	
	ФормаОчистить();
	
КонецПроцедуры

Процедура ОбъектБДПолучитьСтрокуСостоянияОбъекта()
	
	ЭлементыФормы.УникальныйИдентификатор.Значение = ОбъектБД.УникальныйИдентификатор();
	ЭлементыФормы.ДатаИВремяСоздания.Значение = GUIDПолучитьДатуИВремяСозданияОбъектаНаСервере(ОбъектБД);
	
	ЭлементыФормы.СтрокаСтатуса.Заголовок = " " + ОбъектБДПолучитьСостояниеОбъекта(ОбъектБД);
	
КонецПроцедуры

Процедура ПоказатьДвиженияПриИзменении(Элемент)
	
	Если ПоказатьДвижения Тогда
		ОбъектБДСформироватьТДвижений(ОбъектБД, "ПоказатьДвиженияПриИзменении");
	Иначе
		ФормаОчистить(Истина);
		Если ПоказыватьСообщения Тогда
			Сообщить(СтрокаРавно);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ФОРМА.
// 

Функция ФормаСоздатьСтраницуИПолеДляТЗ(Имя, Заголовок, Родитель, ТолькоПросмотр = Истина)
	
	Родитель.Страницы.Добавить(Имя, Заголовок);
	Родитель.ТекущаяСтраница = Родитель.Страницы[Имя];
	
	Элемент = ЭлементыФормы.Добавить(Тип("ТабличноеПоле"), Имя, Истина, Родитель);
	
	// Процедура "ФормаТаблицаПередНачаломИзменения" должна быть Экпортируемой.
	Элемент.УстановитьДействие("ПередНачаломИзменения", Новый Действие("ФормаТаблицаПередНачаломИзменения"));
	// Процедура "ФормаТаблицаПриАктивизацииКолонки" должна быть Экпортируемой.
	Элемент.УстановитьДействие("ПриАктивизацииКолонки", Новый Действие("ФормаТаблицаПриАктивизацииКолонки"));
	
	ФормаСтраницаТЧ = ЭлементыФормы[Имя];
	ФормаСтраницаТЧ.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Родитель, ГраницаЭлементаУправления.Низ);
	ФормаСтраницаТЧ.УстановитьПривязку(ГраницаЭлементаУправления.Право, Родитель, ГраницаЭлементаУправления.Право);
	ФормаСтраницаТЧ.Высота					= Родитель.Высота-8;
	ФормаСтраницаТЧ.Ширина					= Родитель.Ширина-2;
	ФормаСтраницаТЧ.ЧередованиеЦветовСтрок	= Истина;
	ФормаСтраницаТЧ.ИзменятьСоставСтрок		= Истина;
	ФормаСтраницаТЧ.ИзменятьПорядокСтрок	= Ложь;
	ФормаСтраницаТЧ.ТолькоПросмотр			= ТолькоПросмотр;
	ФормаСтраницаТЧ.Видимость				= Истина;
	ФормаСтраницаТЧ.Доступность				= Истина;
	ФормаСтраницаТЧ.АвтоКонтекстноеМеню 	= Истина;
	ФормаСтраницаТЧ.ВысотаШапки				= 2;
	
	Возврат ФормаСтраницаТЧ;
	
КонецФункции

Функция ФормаСоздатьРеквизитТипаТЗ(ИмяРеквизита, ТЧНаФорме, ТаблицаТЧРЕГ)
	
	// Сдвиг Колонок: Актуально для Регистров.
	
	Колонка = ТаблицаТЧРЕГ.Колонки.Найти("НомерСтроки");
	Если Колонка <> Неопределено Тогда
		Индекс = ТаблицаТЧРЕГ.Колонки.Индекс(Колонка);
		ТаблицаТЧРЕГ.Колонки.Сдвинуть(Индекс, -Индекс);
	КонецЕсли;
	
	Колонка = ТаблицаТЧРЕГ.Колонки.Найти("Период");
	Если Колонка <> Неопределено Тогда
		Индекс = ТаблицаТЧРЕГ.Колонки.Индекс(Колонка);
		ТаблицаТЧРЕГ.Колонки.Сдвинуть(Индекс, ТаблицаТЧРЕГ.Колонки.Количество()-Индекс-1);
	КонецЕсли;
	
	Колонка = ТаблицаТЧРЕГ.Колонки.Найти("Регистратор");
	Если Колонка <> Неопределено Тогда
		Индекс = ТаблицаТЧРЕГ.Колонки.Индекс(Колонка);
		ТаблицаТЧРЕГ.Колонки.Сдвинуть(Индекс, ТаблицаТЧРЕГ.Колонки.Количество()-Индекс-1);
	КонецЕсли;
	
	//+yuraos, 10.09.2015
	ТЧНаФорме.УстановитьДействие("Выбор", Новый Действие("ТФормаТаблицаВыбор"));
	ДействиеОткрытие = Новый Действие("ТФормаКолонкаОткрытие");
	//+yuraos, 10.09.2015

	ТЧНаФорме.Значение = ТаблицаТЧРЕГ;
	ТЧНаФорме.СоздатьКолонки();
	Для Каждого КолонкаТЧ ИЗ ТЧНаФорме.Колонки Цикл
		КолонкаТЧ.РежимРедактирования 	= РежимРедактированияКолонки.Вход;
		КолонкаТЧ.ВыделятьОтрицательные = Истина;
		//+yuraos, 10.09.2015
		Элемент = КолонкаТЧ.ЭлементУправления;
		ЭтоПростойТип = Null;
		ЭтоБулево = ОТДСодержитТип(Элемент.ТипЗначения, Истина, ЭтоПростойТип);
		ЭтоСсылки = ОТДСодержитСсылки(Элемент.ТипЗначения);
		Если ЭтоБулево = Истина И ЭтоПростойТип = Истина Тогда
			КолонкаТЧ.УстановитьЭлементУправления(Тип("Флажок"));
			КолонкаТЧ.ДанныеФлажка = КолонкаТЧ.Имя;
			КолонкаТЧ.Данные = "";
			КолонкаТЧ.РежимРедактирования 	= РежимРедактированияКолонки.Непосредственно;
		ИначеЕсли ЭтоСсылки = Истина Тогда
			Элемент.КнопкаОчистки  = Ложь;
			Элемент.КнопкаОткрытия = Истина;
			Элемент.УстановитьДействие("Открытие", ДействиеОткрытие);
		КонецЕсли; 
		//+yuraos, 10.09.2015
	КонецЦикла;
	
	Возврат ТаблицаТЧРЕГ;
	
КонецФункции

// Вкладка "Реквизиты Объекта". Событие Таблицы: ПриАктивацииКолонки.
// Проверить возможность редактирования значения Реквизита.
// - Если Значение имеет тип "ХранилищеЗначения" - отказаться от редактирования.
// - Если Значение имеет тип "Булево" и Имя Реквизита = "ЭтоГруппа" для Справочника - отказаться от редактирования.
//
Процедура ФормаТаблицаПриАктивизацииКолонки(Элемент) Экспорт
	
	Если (Элемент.Значение = Неопределено ИЛИ Элемент.ТекущиеДанные = Неопределено ИЛИ Элемент.ТекущаяКолонка = Неопределено) Тогда
		Возврат;
	КонецЕсли;

	Если Элемент.Имя = "ТРеквизитыОбъекта" Тогда
		ТипИзменяемогоЗначения = ТипЗнч(Элемент.ТекущиеДанные.Значение);
	Иначе	
		ТипИзменяемогоЗначения = ТипЗнч(Элемент.ТекущиеДанные[Элемент.ТекущаяКолонка.Имя]);
	КонецЕсли;
	
	Отказ = Ложь;
	
	Если ТипИзменяемогоЗначения = Тип("ХранилищеЗначения") Тогда	// ХранилищеЗначения может быть только единственным типом в данных.
		
		Если НЕ Элемент.Имя = "ТРеквизитыОбъекта" Тогда
			Элемент.Колонки[Элемент.ТекущаяКолонка.Имя].ТолькоПросмотр = Истина;
			ФормаТаблицаПередНачаломИзменения(Элемент, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Вкладка "Реквизиты Объекта". Событие Таблицы: ПередНачаломИзменения.
// Проверить возможность редактирования значения Реквизита.
// - Если Значение имеет тип "ХранилищеЗначения" - отказаться от редактирования.
// - Если Значение имеет тип "Булево" и Имя Реквизита = "ЭтоГруппа" для Справочника - отказаться от редактирования.
//
Процедура ФормаТаблицаПередНачаломИзменения(Элемент, Отказ) Экспорт
	
	Если Элемент.Имя = "ТРеквизитыОбъекта" Тогда
		ИмяТаблицы	= "Таблица ""Реквизиты""";
		ИмяРеквизитаИзменяемогоЗначения 			= Элемент.ТекущиеДанные.Имя;
		ПредставлениеРеквизитаИзменяемогоЗначения 	= Элемент.ТекущиеДанные.Представление;
		ИзменяемоеЗначение 							= Элемент.ТекущиеДанные.Значение;
		ТипИзменяемогоЗначения 						= ТипЗнч(ИзменяемоеЗначение);
		ПроверятьРеквизитСНеопределеннымТипом		= Истина;
		ТекущаяКолонка								= Элемент.ТекущаяКолонка.Имя;
		Если ТипИзменяемогоЗначения = Тип("Строка") Тогда
			ДлинаСтроки = Элемент.ТекущиеДанные.ОписаниеТипов.КвалификаторыСтроки.Длина;
		КонецЕсли;
	Иначе	
		ИмяТаблицы = "Таблица """ + Элемент.Имя + """";
		ИмяРеквизитаИзменяемогоЗначения 			= Элемент.ТекущаяКолонка.Имя;
		ПредставлениеРеквизитаИзменяемогоЗначения 	= Элемент.ТекущаяКолонка.ТекстШапки;
		ИзменяемоеЗначение 							= Элемент.ТекущиеДанные[ИмяРеквизитаИзменяемогоЗначения];
		ТипИзменяемогоЗначения 						= ТипЗнч(ИзменяемоеЗначение);
		ПроверятьРеквизитСНеопределеннымТипом		= Ложь;
		ТекущаяКолонка								= Элемент.ТекущаяКолонка.Имя;
		Если ТипИзменяемогоЗначения = Тип("Строка") Тогда
			ДлинаСтроки = Элемент.Значение.Колонки[ИмяРеквизитаИзменяемогоЗначения].ТипЗначения.КвалификаторыСтроки.Длина;
		КонецЕсли;
	КонецЕсли;
	
	РезультатПроверки = ОбъектБДПроверитьВозможностьРедактированияЗаписиЗначения(ОбъектБД, ИмяТаблицы, ИмяРеквизитаИзменяемогоЗначения, ТипИзменяемогоЗначения, ИзменяемоеЗначение, ПроверятьРеквизитСНеопределеннымТипом);
	
	Если (РезультатПроверки.Отказ) Тогда
		ПредупреждениеСообщение(, РезультатПроверки.ОписаниеОшибки);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если (Элемент.Имя = "ТРеквизитыОбъекта" И ТекущаяКолонка = "Значение" И Элемент.ТекущиеДанные.Блокированный) Тогда
		ПредупреждениеСообщение(, "Изменение блокированного реквизита объекта.
		|
		|Согласно проектной логике Конфигурации """ + ЭтотОбъект.КонфигурацияИВерсия + """:
		|Реквизит не рекомендуется/нельзя изменять, если Объект участвует в документах.
		|
		|""Блокированные"" реквизиты определяются индивидуально для вида Объекта.");
	ИначеЕсли (Элемент.Имя = "ТРеквизитыОбъекта" И ТекущаяКолонка = "Значение" И ИмяРеквизитаИзменяемогоЗначения = "ПометкаУдаления") Тогда
		ПредупреждениеСообщение(, "Изменение значения реквизита ""ПометкаУдаления""
		|
		|Рекомедуется производить действием в подменю ""Удаление"".
		|(Стандартное УстановитьПометкуУдаления(Истина/Ложь))", 20);
	ИначеЕсли (Элемент.Имя = "ТРеквизитыОбъекта" И ТекущаяКолонка = "Значение" И ТипЗнч(ИзменяемоеЗначение) = Тип("УникальныйИдентификатор")) Тогда
		ПредупреждениеСообщение(, "Изменение значения реквизита типа ""Уникальный идентификатор""
		|
		|Будьте внимательны при редактировании реквизита.
		|Реквизит имеет определенный формат:
		|XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX", 5);
	КонецЕсли;
	
	Если НЕ (Элемент.Имя = "ТРеквизитыОбъекта" И ТекущаяКолонка = "Проверяемый") И ТипИзменяемогоЗначения = Тип("Строка") Тогда
		Если ИспользоватьРежимМодальности() Тогда
			// Стандартно в модальном режиме (8.2/8.3) с обработкой результата.
			РедактироватьМногострочныйТекстВФорме(Элемент, ИмяРеквизитаИзменяемогоЗначения, ИзменяемоеЗначение, ПредставлениеРеквизитаИзменяемогоЗначения, ДлинаСтроки, Отказ);
			Возврат;
		Иначе
			// Стандартно в немодальном режиме (8.3) с обработкой результата.
			// Платформа 8.3.5.1443. Обычная форма. Режим модальности: "НеИспользовать"..
			// В процедуру РедактироватьМногострочныйТекстЗавершение(ТекстРедактирования, ПараметрыВводаСтроки) Экспорт не "приходит" значение ТекстРедактирования из ПоказатьВводСтроки().
			Если СравнитьВерсии(ЭтотОбъект.ВерсияПриложения, "8.3.6.0") > 0 Тогда
				РедактироватьМногострочныйТекстВФорме(Элемент, ИмяРеквизитаИзменяемогоЗначения, ИзменяемоеЗначение, ПредставлениеРеквизитаИзменяемогоЗначения, ДлинаСтроки, Отказ);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипИзменяемогоЗначения = Тип("УникальныйИдентификатор") Тогда
		РедактироватьУникальныйИдентификатор(Элемент, ИмяРеквизитаИзменяемогоЗначения, ИзменяемоеЗначение, ПредставлениеРеквизитаИзменяемогоЗначения, ДлинаСтроки, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ФормаОчистить(ТолькоРегистры = Ложь)
	
	ФормаУдалитьСтраницы(ЭлементыФормы.СтраницыГруппаРС);
	ФормаУдалитьСтраницы(ЭлементыФормы.СтраницыГруппаРН);
	ФормаУдалитьСтраницы(ЭлементыФормы.СтраницыГруппаРБ);
	ФормаУдалитьСтраницы(ЭлементыФормы.СтраницыГруппаРР);
	
	Если ПоказыватьСообщения Тогда
		Сообщить("МФ: " + "Информация таблиц ""Движения по Регистрам"" Объекта очищена.", СтатусСообщения.Важное);
	КонецЕсли;
		
	Если ТолькоРегистры Тогда
		Возврат;
	КонецЕсли;
	
	Если НовыйТипОбъектаБД Тогда
		ТМетаданныеПодпискиНаСобытия.Очистить();
		ТМетаданныеФункциональныеОпции.Очистить();
		ТМетаданныеПланыОбмена.Очистить();
		ТМетаданныеРегистрыОбъекта.Очистить();
		ТМетаданныеВводитсяНаОсновании.Очистить();
		ТМетаданныеЯвляетсяОснованиемДля.Очистить();
	КонецЕсли;
	
	Если ПоказыватьСообщения Тогда
		Сообщить("МФ: " + "Информация таблицы ""Метаданные..."" очищены.", СтатусСообщения.Важное);
	КонецЕсли;
	
	ТСвойстваОбъекта.Очистить();
	ТРеквизитыОбъекта.Очистить();
	
	Если ПоказыватьСообщения Тогда
		Сообщить("МФ: " + "Информация таблицы ""Реквизиты"" Объекта очищена.", СтатусСообщения.Важное);
	КонецЕсли;
	
	ФормаУдалитьСтраницы(ЭлементыФормы.СтраницыГруппаТЧ);
	
	Если ПоказыватьСообщения Тогда
		Сообщить("МФ: " + "Информация таблицы ""Табличные Части"" Объекта очищена.", СтатусСообщения.Важное);
	КонецЕсли;
	
	ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ОбъектБД;
	
КонецПроцедуры

Процедура ФормаУдалитьСтраницы(ГруппаСтраниц)
	
	ГруппаСтраниц.Страницы.Вставить(0, "УдаляемаяСтраница", "");
	Пока ГруппаСтраниц.Страницы.Количество() > 1 Цикл
		ГруппаСтраниц.Страницы.Удалить(1);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОпределитьДоступнность()
	
	СчетчикОбновленийФормы = СчетчикОбновленийФормы + 1;
	
	ТипОбъектаБД = ОбъектБДПолучитьТипОбъекта(ОбъектБД);
	
	ЭлементыФормы.МонопольныйРежим.Заголовок = ?(МонопольныйРежим, "Монопольный режим", "Многопользовательский режим");
	
	Если ЗначениеЗаполнено(ОбъектБД) Тогда

		мдОбъектаБД = ОбъектБД.Метаданные();
		ОтобразитьВкладку = ФормаПроверитьВозможностьОтображенияВкладок(мдОбъектаБД, ЭлементыФормы.СтраницыГруппаТЧ, "ТабличныеЧасти");
		ЭлементыФормы.ДанныеОбъектаБД.Страницы.СтраницаТабличныеЧасти.Видимость = ОтобразитьВкладку;
		
		Если ТипОбъектаБД = ИмяТипаДокументы() Тогда
			
			Если ПоказатьДвижения Тогда
				
				ОтобразитьВкладку = ФормаПроверитьВозможностьОтображенияВкладок(мдОбъектаБД, ЭлементыФормы.СтраницыГруппаРС, "Регистры Сведений");
				ЭлементыФормы.ДанныеОбъектаБД.Страницы.СтраницаРегистрыСведений.Видимость 		= ОтобразитьВкладку;
				
				ОтобразитьВкладку = ФормаПроверитьВозможностьОтображенияВкладок(мдОбъектаБД, ЭлементыФормы.СтраницыГруппаРН, "Регистры Накопления");
				ЭлементыФормы.ДанныеОбъектаБД.Страницы.СтраницаРегистрыНакопления.Видимость		= ОтобразитьВкладку;
				
				ОтобразитьВкладку = ФормаПроверитьВозможностьОтображенияВкладок(мдОбъектаБД, ЭлементыФормы.СтраницыГруппаРБ, "Регистры Бухгалтерии");
				ЭлементыФормы.ДанныеОбъектаБД.Страницы.СтраницаРегистрыБухгалтерии.Видимость	= ОтобразитьВкладку;
				
				ОтобразитьВкладку = ФормаПроверитьВозможностьОтображенияВкладок(мдОбъектаБД, ЭлементыФормы.СтраницыГруппаРР, "Регистры Расчета");
				ЭлементыФормы.ДанныеОбъектаБД.Страницы.СтраницаРегистрыРасчета.Видимость 		= ОтобразитьВкладку;
				
			Иначе
				
				ЭлементыФормы.ДанныеОбъектаБД.Страницы.СтраницаРегистрыСведений.Видимость 		= Ложь;
				ЭлементыФормы.ДанныеОбъектаБД.Страницы.СтраницаРегистрыНакопления.Видимость		= Ложь;
				ЭлементыФормы.ДанныеОбъектаБД.Страницы.СтраницаРегистрыБухгалтерии.Видимость	= Ложь;
				ЭлементыФормы.ДанныеОбъектаБД.Страницы.СтраницаРегистрыРасчета.Видимость 		= Ложь;
				
			КонецЕсли;
		
		КонецЕсли;
		
	Иначе
		
		ЭлементыФормы.ДанныеОбъектаБД.Страницы.СтраницаТабличныеЧасти.Видимость 		= Ложь;
		
		ЭлементыФормы.ДанныеОбъектаБД.Страницы.СтраницаРегистрыСведений.Видимость 		= Ложь;
		ЭлементыФормы.ДанныеОбъектаБД.Страницы.СтраницаРегистрыНакопления.Видимость		= Ложь;
		ЭлементыФормы.ДанныеОбъектаБД.Страницы.СтраницаРегистрыБухгалтерии.Видимость	= Ложь;
		ЭлементыФормы.ДанныеОбъектаБД.Страницы.СтраницаРегистрыРасчета.Видимость 		= Ложь;
		
	КонецЕсли;
	
	ЭлементыФормы.ПоказатьДвижения.Доступность																= ЗначениеЗаполнено(ОбъектБД) И ТипОбъектаБД = ИмяТипаДокументы();
	ЭлементыФормы.СкрыватьПустыеТаблицыДвиженийРегистров.Доступность										= ЗначениеЗаполнено(ОбъектБД) И ТипОбъектаБД = ИмяТипаДокументы();
	
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.кнЗаписать.Доступность										= ЗначениеЗаполнено(ОбъектБД);
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.кнОМСоздатьКопированием.Доступность							= ЗначениеЗаполнено(ОбъектБД) И ТипОбъектаБД = ИмяТипаДокументы();
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.пмПроведение.Кнопки.кнПровести.Доступность					= ЗначениеЗаполнено(ОбъектБД) И ТипОбъектаБД = ИмяТипаДокументы() И ЭтотОбъект.МетаданныеПроведениеДокументаРазрешено(ОбъектБД);
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.пмПроведение.Кнопки.кнПровестиОснованиеИДокумент.Доступность	= ЗначениеЗаполнено(ОбъектБД) И ТипОбъектаБД = ИмяТипаДокументы() И ЭтотОбъект.МетаданныеПроведениеДокументаРазрешено(ОбъектБД);
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.пмПроведение.Кнопки.кнОтменитьПроведение.Доступность			= ЗначениеЗаполнено(ОбъектБД) И ТипОбъектаБД = ИмяТипаДокументы() И ЭтотОбъект.МетаданныеПроведениеДокументаРазрешено(ОбъектБД);
	
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.пмОпции.Кнопки.кнСтруктураПодчиненности.Доступность			= ЗначениеЗаполнено(ОбъектБД) И ТипОбъектаБД = ИмяТипаДокументы();
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.пмОпции.Кнопки.кнКартаМаршрута.Доступность					= ЗначениеЗаполнено(ОбъектБД) И (ТипОбъектаБД = ИмяТипаБизнесПроцессы() ИЛИ ТипОбъектаБД = ИмяТипаЗадачи());
	
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.пмОпции.Кнопки.РегистрацияОбъектаВПланахОбмена.Кнопки.кнПроверитьРегистрациюВПланахОбмена.Доступность 	= ЗначениеЗаполнено(ОбъектБД) И НЕ ТипОбъектаБД = ИмяТипаПланыОбмена();
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.пмОпции.Кнопки.РегистрацияОбъектаВПланахОбмена.Кнопки.кнРегистрацияВПланахОбмена.Доступность 			= ЗначениеЗаполнено(ОбъектБД) И НЕ ТипОбъектаБД = ИмяТипаПланыОбмена();
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.пмОпции.Кнопки.РегистрацияОбъектаВПланахОбмена.Кнопки.кнУдалитьРегистрациюВПланахОбмена.Доступность 		= ЗначениеЗаполнено(ОбъектБД) И НЕ ТипОбъектаБД = ИмяТипаПланыОбмена();
	
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.пмУдаление.Кнопки.кнСнятьПометкуУдаления.Доступность			= ЗначениеЗаполнено(ОбъектБД);
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.пмУдаление.Кнопки.кнПометитьНаУдаление.Доступность			= ЗначениеЗаполнено(ОбъектБД);
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.пмУдаление.Кнопки.кнУдалить.Доступность						= ЗначениеЗаполнено(ОбъектБД);
	
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.кнОбновить.Доступность										= ЗначениеЗаполнено(ОбъектБД);
	
КонецПроцедуры

Функция ФормаПроверитьВозможностьОтображенияВкладок(мдОбъектаБД, ЭлементРодитель, Вкладка)
	
	ОтобразитьВкладку = Истина;
	Если ((ЭлементРодитель.Страницы.Количество() = 1) И (ЭлементРодитель.Страницы[0].Имя = "УдаляемаяСтраница")) Тогда
		ОтобразитьВкладку = Ложь;
		Если ПоказыватьСообщения Тогда
			СчетчикСообщенийПриОбновлении = СчетчикСообщенийПриОбновлении + 1;
			//Сообщить("МФ: " + "Вкладка """ + Вкладка + """ не отображается, т.к. в ней отсутствуют таблицы с данными.");
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОтобразитьВкладку;
	
КонецФункции

Процедура ФормаТСвойстваОбъектаЗначениеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	хЗаголовок = "Значение свойства:";
	Если ТипЗнч(Элемент.Значение) = Тип("Строка") Тогда
		МногоСтрочныйТекст = СтрЗаменить(Элемент.ВыделенныйТекст, ",", Символы.ПС);
		ПросмотретьМногострочныйТекст_Стандартно(МногоСтрочныйТекст, хЗаголовок);
	ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("СписокЗначений") Тогда
		МногоСтрочныйТекст = СтрЗаменить(Строка(Элемент.Значение), " ", "");
		МногоСтрочныйТекст = СтрЗаменить(МногоСтрочныйТекст, ";", Символы.ПС);
		ПросмотретьМногострочныйТекст_Стандартно(МногоСтрочныйТекст, хЗаголовок);
	Иначе
		СтандартнаяОбработка = Истина;
	КонецЕсли;
		
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОСМОТР/РЕДАКТИРОВАНИЕ УНИКАЛЬНОГО ИДЕНТИФИКАТОРА.
// 

Процедура РедактироватьУникальныйИдентификатор(Элемент, ИмяРеквизитаИзменяемогоЗначения, ИзменяемоеЗначение, ПредставлениеРеквизитаИзменяемогоЗначения, ДлинаСтроки, Отказ)
	Перем ПараметрыВводаСтроки;
	
	ПараметрыВводаСтроки = Новый Структура;
	ПараметрыВводаСтроки.Вставить("Заголовок"			, "Уникальный идентификатор");
	ПараметрыВводаСтроки.Вставить("ФормаИлиОбработчик"	, ЭтаФорма);
	ПараметрыВводаСтроки.Вставить("ВладелецРеквизита"	, Элемент.ТекущиеДанные);
	Если Элемент.Имя = "ТРеквизитыОбъекта" Тогда
		ПараметрыВводаСтроки.Вставить("ИмяРеквизита"	, "Значение");
	Иначе	
		ПараметрыВводаСтроки.Вставить("ИмяРеквизита"	, ИмяРеквизитаИзменяемогоЗначения);
	КонецЕсли;
	ПараметрыВводаСтроки.Вставить("ИсходноеЗначение"	, Строка(ИзменяемоеЗначение));
	ПараметрыВводаСтроки.Вставить("ДлинаСтроки"			, СтрДлина(ИзменяемоеЗначение));
	ПараметрыВводаСтроки.Вставить("Многострочность"		, Ложь);
	
	РедактироватьМногострочныйТекст_Стандартно(ПараметрыВводаСтроки);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОСМОТР/РЕДАКТИРОВАНИЕ МНОГОСТРОЧНОГО ТЕКСТА.
// 

Процедура ПросмотретьМногострочныйТекст_Стандартно(МногоСтрочныйТекст, Заголовок)
	Перем ПараметрыВводаСтроки;
	
	ПараметрыВводаСтроки = Новый Структура;
	ПараметрыВводаСтроки.Вставить("Заголовок"			, Заголовок);
	ПараметрыВводаСтроки.Вставить("ФормаИлиОбработчик"	, ЭтаФорма);
	ПараметрыВводаСтроки.Вставить("ВладелецРеквизита"	, Неопределено);
	ПараметрыВводаСтроки.Вставить("ИмяРеквизита"		, Неопределено);
	ПараметрыВводаСтроки.Вставить("ИсходноеЗначение"	, МногоСтрочныйТекст);
	ПараметрыВводаСтроки.Вставить("ДлинаСтроки"			, 0);
	ПараметрыВводаСтроки.Вставить("Многострочность"		, Истина);
	
	РедактироватьМногострочныйТекст_Стандартно(ПараметрыВводаСтроки);
	
КонецПроцедуры

Процедура РедактироватьМногострочныйТекстВФорме(Элемент, ИмяРеквизитаИзменяемогоЗначения, ИзменяемоеЗначение, Заголовок = "", ДлинаСтроки = 0, Отказ = Ложь)
	Перем ИмяФормыМногоСтрочногоТекста, ПараметрыМСТ, ПараметрыВводаСтроки, Оповещение;
	
	Если ДлинаСтроки = 0 ИЛИ ДлинаСтроки >= 50 Тогда
			
		ПараметрыВводаСтроки = Новый Структура;
		ПараметрыВводаСтроки.Вставить("Заголовок"			, Заголовок);
		ПараметрыВводаСтроки.Вставить("ФормаИлиОбработчик"	, ЭтаФорма);
		ПараметрыВводаСтроки.Вставить("ВладелецРеквизита"	, Элемент.ТекущиеДанные);
		Если Элемент.Имя = "ТРеквизитыОбъекта" Тогда
			ПараметрыВводаСтроки.Вставить("ИмяРеквизита"	, "Значение");
		Иначе	
			ПараметрыВводаСтроки.Вставить("ИмяРеквизита"	, ИмяРеквизитаИзменяемогоЗначения);
		КонецЕсли;
		ПараметрыВводаСтроки.Вставить("ИсходноеЗначение"	, ИзменяемоеЗначение);
		ПараметрыВводаСтроки.Вставить("ДлинаСтроки"			, ДлинаСтроки);
		
		Если ((Найти(ВРег(ИмяРеквизитаИзменяемогоЗначения), "АЛГОРИТМ") > 0) 
			ИЛИ (Найти(ВРег(ИмяРеквизитаИзменяемогоЗначения), "АДРЕС") > 0)
			ИЛИ (Найти(ВРег(ИмяРеквизитаИзменяемогоЗначения), "ЗАПРОС") > 0)
			ИЛИ (Найти(ВРег(ИмяРеквизитаИзменяемогоЗначения), "КОММЕНТАРИЙ") > 0)) Тогда
			
			ПараметрыВводаСтроки.Вставить("Многострочность"	, Истина);
			
			//Обычная Форма (Форма обработки).
			
			ИмяФормыМногоСтрочногоТекста = Настройки.ИмяФормыМногоСтрочногоТекста;
				
			ПараметрыМСТ = Новый Структура("МногоСтрочныйТекст", ИзменяемоеЗначение);
			
			ФормаМногоСтрочногоТекста = ПолучитьФорму(ИмяФормыМногоСтрочногоТекста, ПараметрыМСТ, ЭтаФорма);    
			ФормаМногоСтрочногоТекста.Заголовок							= Заголовок;
			ФормаМногоСтрочногоТекста.ВладелецФормы 					= ЭтаФорма;
			ФормаМногоСтрочногоТекста.ЗакрыватьПриЗакрытииВладельца 	= Истина;
			
			ФормаМногоСтрочногоТекста.МногоСтрочныйТекст				= ИзменяемоеЗначение;
			
			Если ИспользоватьРежимМодальности() Тогда
				// Стандартно в модальном режиме (8.2/8.3) с обработкой результата.
				ФормаМногоСтрочногоТекста.ОткрытьМодально();
				РедактироватьМногострочныйТекстЗавершение(ФормаМногоСтрочногоТекста.МногоСтрочныйТекст, ПараметрыВводаСтроки);
				Отказ = Истина;
				Возврат;
			Иначе
				// Стандартно в немодальном режиме (8.3) с обработкой результата.
				Оповещение = Вычислить("Новый ОписаниеОповещения(""РедактироватьМногострочныйТекстЗавершение"", ЭтаФорма, ПараметрыВводаСтроки)");
				Попытка
					Выполнить("ФормаМногоСтрочногоТекста.ОписаниеОповещенияОЗакрытии = Оповещение");
				Исключение
					// Обычная форма в управляемом приложении - увы нет такого атрибута у обычной формы!
					СтандартнаяОбработка = Истина;
					Возврат;
				КонецПопытки;
				ФормаМногоСтрочногоТекста.Открыть();
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			
		Иначе
			
			ПараметрыВводаСтроки.Вставить("Многострочность"	, Истина);
			
		КонецЕсли;
		
		РедактироватьМногострочныйТекст_Стандартно(ПараметрыВводаСтроки);
		
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РедактироватьМногострочныйТекст_Стандартно(ПараметрыВводаСтроки)
	Перем РезультатРедактирования;
	
	Если ИспользоватьРежимМодальности() Тогда
		РезультатРедактирования = ПараметрыВводаСтроки.ИсходноеЗначение;
		РедактироватьМногострочныйТекст_ВвестиСтроку(ПараметрыВводаСтроки.ИсходноеЗначение, РезультатРедактирования, Ложь, ПараметрыВводаСтроки.Заголовок, ПараметрыВводаСтроки.ДлинаСтроки, ПараметрыВВодаСтроки.Многострочность);
		РедактироватьМногострочныйТекстЗавершение(РезультатРедактирования, ПараметрыВводаСтроки);
	Иначе
		РедактироватьМногострочныйТекст_ПоказатьВводСтроки(ПараметрыВводаСтроки);
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму редактирования произвольного многострочного текста модально
//
// Параметры:
// МногострочныйТекст      - Строка - произвольный текст, который необходимо отредактировать
// РезультатРедактирования - Строка - переменная, в которую будет помещен результат редактирования
// Модифицированность       - Строка - флаг модифицированности формы
// Заголовок               - Строка - текст, который необходимо отобразить в заголовке формы
//
Процедура РедактироватьМногострочныйТекст_ВвестиСтроку(Знач МногострочныйТекст, РезультатРедактирования, Модифицированность = Ложь, Заголовок = Неопределено, ДлинаСтроки = 0, Многострочность = Истина)
	
	Если Заголовок = Неопределено Тогда
		ТекстВведен = ВвестиСтроку(МногострочныйТекст, , ДлинаСтроки, Многострочность);
	Иначе
		ТекстВведен = ВвестиСтроку(МногострочныйТекст, Заголовок, ДлинаСтроки, Многострочность);
	КонецЕсли;
	                              
	Если НЕ ТекстВведен Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ РезультатРедактирования = МногострочныйТекст Тогда
		РезультатРедактирования = МногострочныйТекст;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму редактирования произвольного многострочного текста немодально.
//
Процедура РедактироватьМногострочныйТекст_ПоказатьВводСтроки(ПараметрыВводаСтроки)
	Перем Оповещение, Заголовок, ТекстРедактирования, ДлинаСтроки, Многострочность;
	
	Если ПустаяСтрока(Заголовок) Тогда
		Заголовок = НСтр("ru = '.'");
	КонецЕсли;
	
	Заголовок = ПараметрыВводаСтроки.Заголовок;
	ТекстРедактирования = ПараметрыВводаСтроки.ИсходноеЗначение;
	ДлинаСтроки			= ПараметрыВводаСтроки.ДлинаСтроки;
	Многострочность 	= ПараметрыВводаСтроки.Многострочность;
	
	Оповещение = Вычислить("Новый ОписаниеОповещения(""РедактироватьМногострочныйТекстЗавершение"", ЭтаФорма, ПараметрыВводаСтроки)");
	Выполнить("ПоказатьВводСтроки(Оповещение, ТекстРедактирования, Заголовок, ДлинаСтроки, Многострочность)");
	
КонецПроцедуры

// Обработчик результата работы процедуры РедактироватьМногострочныйТекст.
Процедура РедактироватьМногострочныйТекстЗавершение(ТекстРедактирования, ПараметрыВводаСтроки) Экспорт
	Перем Форма, Обработчик, ИсходноеЗначение;
	
	Форма = ПараметрыВводаСтроки.ФормаИлиОбработчик;
	ИсходноеЗначение = ПараметрыВводаСтроки.ИсходноеЗначение;
	
	Если ТекстРедактирования <> Неопределено И НЕ ПараметрыВводаСтроки.ВладелецРеквизита = Неопределено Тогда
		
		Если ТипЗнч(ПараметрыВводаСтроки.ВладелецРеквизита) = Тип("ДанныеФормыЭлементДерева")
			ИЛИ ТипЗнч(ПараметрыВводаСтроки.ВладелецРеквизита) = Тип("ДанныеФормыЭлементКоллекции") Тогда
			Если ПараметрыВводаСтроки.ВладелецРеквизита.Тип = "УникальныйИдентификатор" Тогда
				GUID = Новый УникальныйИдентификатор(ТекстРедактирования);
				ЗаполнитьЗначенияСвойств(ПараметрыВводаСтроки.ВладелецРеквизита, Новый Структура(ПараметрыВводаСтроки.ИмяРеквизита, GUID));
			Иначе
				ЗаполнитьЗначенияСвойств(ПараметрыВводаСтроки.ВладелецРеквизита, Новый Структура(ПараметрыВводаСтроки.ИмяРеквизита, ТекстРедактирования));
			КонецЕсли;
		Иначе
			Если ТипЗнч(ПараметрыВводаСтроки.ВладелецРеквизита[ПараметрыВводаСтроки.ИмяРеквизита]) = Тип("УникальныйИдентификатор") Тогда
				GUID = Новый УникальныйИдентификатор(ТекстРедактирования);
				ПараметрыВводаСтроки.ВладелецРеквизита[ПараметрыВводаСтроки.ИмяРеквизита] = GUID;
			Иначе
				ПараметрыВводаСтроки.ВладелецРеквизита[ПараметрыВводаСтроки.ИмяРеквизита] = ТекстРедактирования;
			КонецЕсли;
		КонецЕсли;
		
		Если Форма <> Неопределено Тогда
			Если НЕ ТекстРедактирования = ИсходноеЗначение Тогда
				Форма.Модифицированность = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОСНОВНЫЕ ДЕЙСТВИЯ ФОРМЫ.
// 

////////////////////////////////////////////////////////////////////////////////
// ЗАПИСАТЬ ОБЪЕКТ.
//

Процедура ОМЗаписать(Кнопка, РежимЗаписи = Неопределено)
	Перем Оповещение;
	
	Если НЕ ЗначениеЗаполнено(ОбъектБД) Тогда
		Возврат;
	КонецЕсли;
	
	ТипОбъектаБД = ОбъектБДПолучитьТипОбъекта(ОбъектБД);
	
	Если РежимЗаписи = Неопределено Тогда
		
		ТекстВопроса = "Подтвердите запись изменений: " + ТипОбъектаБД + "." + ТипЗнч(ОбъектБД) + ":
		|" + Строка(ОбъектБД);
		
		Если ИспользоватьРежимМодальности() Тогда
			// Стандартно в модальном режиме (8.2/8.3) с обработкой результата.
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет, "ЗАПИСЬ ОБЪЕКТА", КодВозвратаДиалога.Нет);
			ОМЗаписатьЗавершение(Ответ, РежимЗаписи);
		Иначе
			// Стандартно в немодальном режиме (8.3) с обработкой результата.
			Оповещение = Вычислить("Новый ОписаниеОповещения(""ОМЗаписатьЗавершение"", ЭтаФорма, РежимЗаписи)");
			Выполнить("ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет, ""ЗАПИСЬ ОБЪЕКТА"", КодВозвратаДиалога.Нет)");
		КонецЕсли;
		
	Иначе
		
		ОМЗаписатьЗавершение(КодВозвратаДиалога.Да, РежимЗаписи)
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ОМЗаписатьЗавершение(Ответ, РежимЗаписи) Экспорт
	Перем ЗначениеОтвета;
	
	ЗначениеОтвета = ПолучитьКодВозвратаДиалога(Ответ);
	Если РежимЗаписи = Неопределено И (ЗначениеОтвета = Неопределено ИЛИ ЗначениеОтвета = КодВозвратаДиалога.НЕТ ИЛИ ЗначениеОтвета = КодВозвратаДиалога.Таймаут) Тогда
		Возврат;
	КонецЕсли;
	
	СчетчикСообщенийПриОбновлении = 0;
	Если ПоказыватьСообщения Тогда
		ОчиститьСообщения();
		Сообщить(СтрокаРавно);
		Если РежимЗаписи = Неопределено Тогда
			Сообщить("МФ: " + "ЗАПИСЬ """ + ТипОбъектаБД + "." + ОбъектБД + """.", СтатусСообщения.ОченьВажное);
		ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			Сообщить("МФ: " + "ПРОВЕДЕНИЕ ДОКУМЕНТА: """ + ТипОбъектаБД + "." + ОбъектБД + """.", СтатусСообщения.ОченьВажное);
		ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
			Сообщить("МФ: " + "ОТМЕНА ПРОВЕДЕНИЯ ДОКУМЕНТА: """ + ТипОбъектаБД + "." + ОбъектБД + """.", СтатусСообщения.ОченьВажное);
		КонецЕсли;
	КонецЕсли;
	
	Отказ = Ложь;
	
	ОбъектБДЗаписатьНаСервере(ОбъектБД, ЭтаФорма, Отказ, РежимЗаписи);
	
	Если Отказ Тогда
		ОбъектБДПриИзменении("ОбъектБДЗаписать");
		Если ПоказыватьСообщения Тогда
			
			Если РежимЗаписи = Неопределено Тогда
				Сообщить("МФ: " + "ОБЪЕКТ: """ + ТипОбъектаБД + "." + ОбъектБД + """ НЕ ЗАПИСАН.", СтатусСообщения.ОченьВажное);
			ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
				Сообщить("МФ: " + "ДОКУМЕНТ: """ + ТипОбъектаБД + "." + ОбъектБД + """ НЕ ПРОВЕДЕН.", СтатусСообщения.ОченьВажное);
			ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
				Сообщить("МФ: " + "ДОКУМЕНТ: """ + ТипОбъектаБД + "." + ОбъектБД + """ ПРОВЕДЕНИЕ НЕ ОТМЕНЕНО.", СтатусСообщения.ОченьВажное);
			КонецЕсли;
			
			Сообщить(СтрокаРавно);
		КонецЕсли;
	Иначе	
		ЭлементыФормы.ОбъектБД.Значение = ОбъектБД;
		Если ПоказыватьСообщения Тогда
			
			Сообщить(СтрокаРавно);
			
			Если РежимЗаписи = Неопределено Тогда
				Сообщить("МФ: " + "ОБЪЕКТ: """ + ТипОбъектаБД + "." + ОбъектБД + """ ЗАПИСАН.", СтатусСообщения.ОченьВажное);
			ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
				Сообщить("МФ: " + "ДОКУМЕНТ: """ + ТипОбъектаБД + "." + ОбъектБД + """ ПРОВЕДЕН.", СтатусСообщения.ОченьВажное);
			ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
				Сообщить("МФ: " + "ДОКУМЕНТ: """ + ТипОбъектаБД + "." + ОбъектБД + """ ПРОВЕДЕНИЕ ОТМЕНЕНО.", СтатусСообщения.ОченьВажное);
			КонецЕсли;
			
			Если НЕ ПоказатьДвижения ИЛИ НЕ РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
				Сообщить(СтрокаРавно);
			КонецЕсли;
			
		КонецЕсли;
		
		Если РежимЗаписи = Неопределено Тогда
			Если ТипОбъектаБД = ИмяТипаДокументы() И ОбъектБД.Проведен Тогда
				ПредупреждениеСообщение(, "ПРОВЕДЕННЫЙ РАНЕЕ ДОКУМЕНТ: """ + ВРег(ОбъектБД) + """
				|
				|- ЗАПИСАН, НО МОЖЕТ БЫТЬ НЕ ПРОВЕДЕН ПОВТОРНО.
				|следовательно
				|- ДВИЖЕНИЯ ПО РЕГИСТРАМ МОГУТ ОСТАТЬСЯ ПРЕЖНИМИ.
				|
				|РЕКОМЕНДУЕТСЯ ВЫПОЛНИТЬ ПРОВЕДЕНИЕ ДОКУМЕНТА.", , ЭтотОбъект.КонфигурацияИВерсия);
			КонецЕсли;
		КонецЕсли;
		
		Если (ТипОбъектаБД = ИмяТипаБизнесПроцессы() ИЛИ ТипОбъектаБД = ИмяТипаЗадачи()) Тогда
			ОбъектБДПолучитьСтрокуСостоянияОбъекта();
		КонецЕсли;
		
		ОбъектБДПриИзменении("ОбъектБДЗаписать");
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СОЗДАТЬ КОПИЮ ДОКУМЕНТА.
//

Процедура ОМСоздатьКопированием(Кнопка)
	Перем Оповещение;
	
	Если НЕ ЗначениеЗаполнено(ОбъектБД) Тогда
		Возврат;
	КонецЕсли;
			
	Если ОбъектБД.ПометкаУдаления Тогда
		ПредупреждениеСообщение(, """" + ОбъектБД + """ помечен на удаление.
		|Снимите пометку удаления и повторите попытку создания копированием.
		|Операция не выполнена.");
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = "Подтвердите создание копированием нового объекта типа
	|
	|" + ОбъектБДПолучитьПолноеСтроковоеИмяТипа(ОбъектБД) + " ?
	|
	|ОСОБЕННОСТИ УСТАНОВКИ ЗНАЧЕНИЙ РЕКВИЗИТОВ ДОКУМЕНТА:
	|
	|1. Номер документа устанавливается в соответствии со штатным префиксом в данной БД.
	|2. Дата документа устанавливается в зависимости от Периодичности нумерации Документа и Даты исходного документа.";
	
	Если ИспользоватьРежимМодальности() Тогда
		// Стандартно в модальном режиме (8.2/8.3) с обработкой результата.
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет, "СОЗДАНИЕ НОВОГО ОБЪЕКТА КОПИРОВАНИЕМ", КодВозвратаДиалога.Нет);
		ОМСоздатьКопированиемЗавершение(Ответ, Неопределено);
	Иначе
		// Стандартно в немодальном режиме (8.3) с обработкой результата.
		Оповещение = Вычислить("Новый ОписаниеОповещения(""ОМСоздатьКопированиемЗавершение"", ЭтаФорма, Неопределено)");
		Выполнить("ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет, ""СОЗДАНИЕ НОВОГО ОБЪЕКТА КОПИРОВАНИЕМ"", КодВозвратаДиалога.Нет)");
	КонецЕсли;
		
КонецПроцедуры

Процедура ОМСоздатьКопированиемЗавершение(Ответ, Параметр) Экспорт
	Перем ЗначениеОтвета, РезультатСоздания;
	
	ЗначениеОтвета = ПолучитьКодВозвратаДиалога(Ответ);
	Если ЗначениеОтвета = Неопределено ИЛИ ЗначениеОтвета = КодВозвратаДиалога.НЕТ ИЛИ ЗначениеОтвета = КодВозвратаДиалога.Таймаут Тогда
		Возврат;
	КонецЕсли;
	
	РезультатСоздания = НовыйОбъектБДСоздатьКопированиемНаСервере(ОбъектБД);
	
	Если НЕ РезультатСоздания.Отказ Тогда
		
		ОбъектБДПриИзменении(ОбъектБД);
		
	КонецЕсли;
	
	ПредупреждениеСообщение(, РезультатСоздания.ОписаниеОшибки, , ЭтотОбъект.КонфигурацияИВерсия);	// Если Успешно - Выдается сообщение.
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОВЕДЕНИЕ/ОТМЕНА ПРОВЕДЕНИЯ.
//

Процедура ОМПровести(Кнопка)
	Перем Оповещение;
	
	ПолноеСтроковоеИмяТипа	= ОбъектБДПолучитьПолноеСтроковоеИмяТипа(ОбъектБД);
	
	Если НЕ МетаданныеПроведениеДокументаРазрешено(ОбъектБД) Тогда
		
		КоличествоДвижений = ПолучитьКоличествоДвиженийДокументаНаСервере(ОбъектБД);
		
		ПредупреждениеСообщение(, "Тип документа: """ + ПолноеСтроковоеИмяТипа + """ не может быть проведен,
		|т.к. Проведение ЗАПРЕЩЕНО.
		|
		|Тем не менее документ может иметь движения.
		|Коллекция возможных Движений: " + КоличествоДвижений + ".
		|
		|Операция не выполнена.");
		Возврат;
		
	КонецЕсли;
	
	Если ОбъектБД.ПометкаУдаления Тогда
		ПредупреждениеСообщение(, "Удаленный документ: """ + ОбъектБД + """ не может быть проведен.
		|Операция не выполнена.");
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = "Подтвердите проведение документа: " + ТипОбъектаБД + "." + ТипЗнч(ОбъектБД) + ":
	|" + Строка(ОбъектБД);
	
	Если ИспользоватьРежимМодальности() Тогда
		// Стандартно в модальном режиме (8.2/8.3) с обработкой результата.
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет, "ПРОВЕДЕНИЕ ДОКУМЕНТА", КодВозвратаДиалога.Нет);
		ОМПровестиЗавершение(Ответ, Неопределено);
	Иначе
		// Стандартно в немодальном режиме (8.3) с обработкой результата.
		Оповещение = Вычислить("Новый ОписаниеОповещения(""ОМПровестиЗавершение"", ЭтаФорма, Неопределено)");
		Выполнить("ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет, ""ПРОВЕДЕНИЕ ДОКУМЕНТА"", КодВозвратаДиалога.Нет)");
	КонецЕсли;
	
КонецПроцедуры

Процедура ОМПровестиЗавершение(Ответ, Параметр) Экспорт
	Перем ЗначениеОтвета;
	
	ЗначениеОтвета = ПолучитьКодВозвратаДиалога(Ответ);
	Если ЗначениеОтвета = Неопределено ИЛИ ЗначениеОтвета = КодВозвратаДиалога.НЕТ ИЛИ ЗначениеОтвета = КодВозвратаДиалога.Таймаут Тогда
		Возврат;
	КонецЕсли;
	
	ОМЗаписать(Неопределено, РежимЗаписиДокумента.Проведение);
	
	ОбъектБДПолучитьСтрокуСостоянияОбъекта();
	
КонецПроцедуры

Процедура ОМПровестиОснованиеИДокумент(Кнопка)
	Перем Оповещение;
	
	ПолноеСтроковоеИмяТипа	= ОбъектБДПолучитьПолноеСтроковоеИмяТипа(ОбъектБД);
	
	Если НЕ МетаданныеПроведениеДокументаРазрешено(ОбъектБД) Тогда
		
		КоличествоДвижений = ПолучитьКоличествоДвиженийДокументаНаСервере(ОбъектБД);
		ДополнительныйТекст = ?(КоличествоДвижений = 0, "пуста", "" + КоличествоДвижений);
		
		ПредупреждениеСообщение(, "Тип документа: """ + ПолноеСтроковоеИмяТипа + """ не может быть проведен,
		|т.к. Проведение ЗАПРЕЩЕНО.
		|
		|Тем не менее документ может иметь движения.
		|Коллекция возможных Движений: " + ДополнительныйТекст + ".
		|
		|Выполнение проведеня документов прервано.");
		Возврат;
		
	КонецЕсли;
	
	ИмяДокументаОснование = "ДокументОснование";
	Если НЕ ЕстьРеквизитОбъекта1С("ДокументОснование", ОбъектБД) Тогда
		
		// У документа может и небыть Реквизита "ДокументОснование", но может быть другой реквизит типа документ, который и является Документом-Основанием.
		ИмяДокументаОснование = ОбъектБДПолучитьИмяДокументаОснование(ОбъектБД);
		Если ИмяДокументаОснование = "" Тогда
		
			ПредупреждениеСообщение(, "У объекта типа """ + ПолноеСтроковоеИмяТипа + """ отсутствует реквизит Документ-Основание.
			|Выполнение операции прервано.");
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДокументОснованиеЗначениеИзТРеквизиты = ПолучитьЗначениеДокументаОснованияИзТРеквизиты(ИмяДокументаОснование);
	
	РезультатПолучения = ПолучитьДокументОснованиеТекущегоОбъектаНаСервере(ОбъектБД, ИмяДокументаОснование, ДокументОснованиеЗначениеИзТРеквизиты);
	ДокОснование = РезультатПолучения.ДокОснование;
	ОписаниеОшибки = РезультатПолучения.ОписаниеОшибки;
	
	Если ДокОснование = Неопределено Тогда	// Неопределено - при ошибке получения значения.
		
		ПредупреждениеСообщение(, "Не удалось получить Документ-Основание для: 
		|""" + ОбъектБД + """. 
		|
		|" + ОписаниеОшибки + "
		|
		|Документ-Основание не может быть проведен.
		|Выполнение проведеня документов прервано.");
		Возврат;
		
	КонецЕсли;
	
	Если ДокОснование.ПометкаУдаления Тогда
		
		ПредупреждениеСообщение(, "Удаленный Документ-Основание: """ + ДокОснование + """ не может быть проведен.
		|
		|Выполнение проведеня документов прервано.");
		Возврат;
		
	КонецЕсли;
	
	ДобавочныйТекст = "";
	Если ДатаДокументаОснованияБольшеДатыТекущегоДокументаНаСервере(ДокОснование, ОбъектБД) Тогда
		ДобавочныйТекст = "
		|ВНИМАНИЕ! Дата Документа-Основания > Даты Текущего Документа!
		|";
	КонецЕсли;
	
	Если НЕ ДокОснование.Проведен Тогда
		ДобавочныйТекст = "
		|ВНИМАНИЕ! Документ-Основание не является проведенным!
		|";
	КонецЕсли;
	
	ТекстВопроса = "Текущий Документ: """ + ОбъектБД + """
		|" + ДобавочныйТекст + "
		|ПОДТВЕРДИТЕ ПРОВЕДЕНИЕ
		|
		|Документа-Основания: """ + ДокОснование + """";
		
	Параметр = Новый Структура;	
	Параметр.Вставить("ДокОснование"	, ДокОснование);
	
	Если ИспользоватьРежимМодальности() Тогда
		// Стандартно в модальном режиме (8.2/8.3) с обработкой результата.
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет, "ПРОВЕДЕНИЕ ДОКУМЕНТОВ", КодВозвратаДиалога.Нет);
		ОМПровестиОснованиеИДокументЗавершение(Ответ, Параметр);
	Иначе
		// Стандартно в немодальном режиме (8.3) с обработкой результата.
		Оповещение = Вычислить("Новый ОписаниеОповещения(""ОМПровестиОснованиеИДокументЗавершение"", ЭтаФорма, Параметр)");
		Выполнить("ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет, ""ПРОВЕДЕНИЕ ДОКУМЕНТОВ"", КодВозвратаДиалога.Нет)");
	КонецЕсли;
		
КонецПроцедуры

Процедура ОМПровестиОснованиеИДокументЗавершение(Ответ, Параметр) Экспорт
	Перем ЗначениеОтвета, Проведено;
	
	ЗначениеОтвета = ПолучитьКодВозвратаДиалога(Ответ);
	Если ЗначениеОтвета = Неопределено ИЛИ ЗначениеОтвета = КодВозвратаДиалога.НЕТ ИЛИ ЗначениеОтвета = КодВозвратаДиалога.Таймаут Тогда
		ПредупреждениеСообщение(, "Отказ от проведения Документа-Основания: 
		|
		|""" + Параметр.ДокОснование + """
		|
		|Выполнение проведения документов прервано.");
		Возврат;
	КонецЕсли;
	
	Проведено = ПровестиДокументНаСервере(Параметр.ДокОснование);
	
	Если Проведено Тогда
		ОМПровести(Неопределено);	// Проводим Выбранный документ по выработанным правилам.
	Иначе
		ПредупреждениеСообщение(, "Документ-Основание: 
		|""" + Параметр.ДокОснование + """ провести не удалось.
		|
		|Текущий Документ: 
		|""" + ОбъектБД + """ так же не будет проведен.
		|
		|Выполнение проведения документов прервано.");
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Получить Значение отображаемое в Таблице "Реквизиты".
//
Функция   ПолучитьЗначениеДокументаОснованияИзТРеквизиты(ИмяДокументаОснование)
	
	тзТмп = ТРеквизитыОбъекта;
	ДокументОснованиеЗначениеИзТЗ = "";
	СтруктураПоиска = Новый Структура("Имя", ИмяДокументаОснование);
	Массив = тзТМП.НайтиСтроки(СтруктураПоиска);	// Должен быть только 1(один) элемент.
	
	Если Массив.Количество() > 0 Тогда
		ДокументОснованиеЗначениеИзТРеквизиты = Строка(Массив[0].Значение);
	КонецЕсли;
	
	Возврат ДокументОснованиеЗначениеИзТРеквизиты;
	
КонецФункции

// Получить Значение НаСервере.
//
Функция   ПолучитьДокументОснованиеТекущегоОбъектаНаСервере(ОбъектБД, ИмяДокументаОснование, ДокументОснованиеЗначениеИзТРеквизиты)
	
	РезультатПолучения = Новый Структура;
	РезультатПолучения.Вставить("ДокОснование", Неопределено);
	РезультатПолучения.Вставить("ОписаниеОшибки", "");
	
	Попытка
		
		РезультатПолучения.ДокОснование		= ОбъектБД[ИмяДокументаОснование];	// Получаем Ссылку на Документ-Основание. Передать в Клиент ДокументОбъект невозвожно.
		РезультатПолучения.ОписаниеОшибки	= "Документ-Основание: """ + РезультатПолучения.ДокОснование + """ найден.";
		
		// Проверяем.
		// Потому что:
		// В Таблице "Реквизиты" удаленный документ визуально может отображаеться нормально!
		
		// Фактически у удаленного документа НУЛЕВАЯ дата.
		ДатаДокОсн	 = РезультатПолучения.ДокОснование.Дата;				// Документ может быть удален непосредственно, а в Таблице "Реквизиты" он виден, но после выхода из 1С и повторного входа - все как полагается <Объект не найден и т.д.>
		Если ДатаДокОсн = Дата("00010101000000") Тогда						// Документа все-таки нет.
			Если НЕ Строка(РезультатПолучения.ДокОснование) = Строка(ДокументОснованиеЗначениеИзТРеквизиты) Тогда
				РезультатПолучения.ОписаниеОшибки = "НА СТОРОНЕ СЕРВЕРА: (Объект не найден. Возможно удален.)
				|" + РезультатПолучения.ДокОснование + " 
				|
				|НА СТОРОНЕ КЛИЕНТА: (Значение из Таблицы ""Реквизиты""): 
				|" + ДокументОснованиеЗначениеИзТРеквизиты + "
				|
				|ПОЛУЧАЕМ АНЕКДОТ ПРО ПРОГРАММИСТОВ И АВТОМОБИЛЬ, КОТОРЫЙ НЕ ЗАВОДИТСЯ:
				|
				|""ДАВАЙТЕ ВЫЙДЕМ - И ЗАЙДЕМ - ВДРУГ ПОЕДЕТ?!"" (аналог с MS Windows - ""ПЕРЕЗАГРУЗИМСЯ ?!"")
				|
				|В нашем случае Выйти из 1С - и снова зайти ... (тогда в поле Значения для ДокументаОснования возможно будет <Объект не найден> ...)
				|или
				|Реквизит типа ""Документ-Основание"" был изменен с незаполненного на определенный документ, а запись изменений не была произведена.
				|Запишите текущий документ и повторно попытайтесь провести связку документов: Основание+Текущий.";
			Иначе
				РезультатПолучения.ОписаниеОшибки = "НА СТОРОНЕ СЕРВЕРА: (Объект не найден. Возможно удален.)
				|" + РезультатПолучения.ДокОснование + " 
				|
				|НА СТОРОНЕ КЛИЕНТА: (Значение из Таблицы ""Реквизиты""): 
				|" + ДокументОснованиеЗначениеИзТРеквизиты;
			КонецЕсли;
			РезультатПолучения.ДокОснование = Неопределено;
		КонецЕсли;
		
	Исключение
		РезультатПолучения.ДокОснование = Неопределено;
		РезультатПолучения.ОписаниеОшибки = ОписаниеОшибки();
		Сообщить(ОписаниеОшибки(), СтатусСообщения.Информация);
	КонецПопытки;
	
	Возврат РезультатПолучения;
	
КонецФункции

// Ставнить даты Документа-Основания и ОбъектаБД.
//
Функция   ДатаДокументаОснованияБольшеДатыТекущегоДокументаНаСервере(Объект_1, Объект_2)
	Возврат Объект_1.Дата > Объект_2.Дата;
КонецФункции

// Выполнить проведение Документа-Основания.
//
Функция   ПровестиДокументНаСервере(ДокументВходящий)
	
	Проведен = Ложь;
	Попытка
		ОбъектИЗМ = ДокументВходящий.ПолучитьОбъект();
		// ОтключениеКонтроляЗаписи: ОбменДанными.Загрузка = Истина;	// Устанавливать нельзя - Ошибка при Проведении/ОтменеПроведения документа.
		ОбъектИЗМ.Записать(РежимЗаписиДокумента.Проведение);
		Проведен = Истина;
	Исключение
		Сообщить(ОписаниеОшибки(), СтатусСообщения.Информация);
		Проведен = Ложь;
	КонецПопытки;
	
	Возврат Проведен;

КонецФункции

Процедура ОМОтменитьПроведение(Кнопка)
	Перем Оповещение;
	
	Если НЕ МетаданныеПроведениеДокументаРазрешено(ОбъектБД) Тогда
		
		КоличествоДвижений = ПолучитьКоличествоДвиженийДокументаНаСервере(ОбъектБД);
		ДополнительныйТекст = ?(КоличествоДвижений = 0, "пуста", "" + КоличествоДвижений);
		
		ПредупреждениеСообщение(, "Тип документа: """ + ПолноеСтроковоеИмяТипа + """ не может быть проведен,
		|т.к. Проведение ЗАПРЕЩЕНО.
		|Cледовательно невозможно выполнить отмену проведения.
		|
		|Тем не менее документ может иметь движения.
		|Коллекция возможных Движений: " + ДополнительныйТекст + ".
		|
		|Операция не выполнена.");
		Возврат;
		
	КонецЕсли;
	
	Если ОбъектБД.ПометкаУдаления Тогда
		ПредупреждениеСообщение(, "Удаленный документ: """ + ОбъектБД + """ не является проведенным, 
		|Повторная отмена проведения невозможна.
		|Операция не выполнена.");
		Возврат;
	КонецЕсли;
	
	Если НЕ ОбъектБД.Проведен Тогда
		ПредупреждениеСообщение(, "Документ: """ + ОбъектБД + """ не является проведенным, 
		|Повторная отмена проведения невозможна.
		|Операция не выполнена.");
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = "Подтвердите отмену проведения документа: " + ТипОбъектаБД + "." + ТипЗнч(ОбъектБД) + ":
	|" + Строка(ОбъектБД);
	
	Если ИспользоватьРежимМодальности() Тогда
		// Стандартно в модальном режиме (8.2/8.3) с обработкой результата.
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет, "ОТМЕНА ПРОВЕДЕНИЯ ДОКУМЕНТА", КодВозвратаДиалога.Нет);
		ОМОтменитьПроведениеЗавершение(Ответ, Неопределено);
	Иначе
		// Стандартно в немодальном режиме (8.3) с обработкой результата.
		Оповещение = Вычислить("Новый ОписаниеОповещения(""ОМОтменитьПроведениеЗавершение"", ЭтаФорма, Неопределено)");
		Выполнить("ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет, ""ОТМЕНА ПРОВЕДЕНИЯ ДОКУМЕНТА"", КодВозвратаДиалога.Нет)");
	КонецЕсли;
	
КонецПроцедуры

Процедура ОМОтменитьПроведениеЗавершение(Ответ, Параметр) Экспорт
	Перем ЗначениеОтвета;
	
	ЗначениеОтвета = ПолучитьКодВозвратаДиалога(Ответ);
	Если ЗначениеОтвета = Неопределено ИЛИ ЗначениеОтвета = КодВозвратаДиалога.НЕТ ИЛИ ЗначениеОтвета = КодВозвратаДиалога.Таймаут Тогда
		Возврат;
	КонецЕсли;
	
	ОМЗаписать(Неопределено, РежимЗаписиДокумента.ОтменаПроведения);
	Если ПоказатьДвижения Тогда
		ПоказатьДвижения = Ложь;
		ПоказатьДвиженияПриИзменении("ОчиститьДвижения");
	КонецЕсли;
	
	ОбъектБДПолучитьСтрокуСостоянияОбъекта();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// УДАЛЕНИЕ/ОТМЕНА УДАЛЕНИЯ.
//

Процедура ОМСнятьПометкуУдаления(Кнопка)
	Перем Оповещение;
	
	Если ОбъектБДПолучитьПризнакПредопределенныйОбъекта(ОбъектБД) Тогда		// Справочник, ~ПланОбмена, ПланСчетов, ПланВидовРасчета.
		ПредупреждениеСообщение(, """Снять пометку удаления"" для Предопределенного Объекта неприменима.
		|Операция не выполнена.");
		Возврат;
	КонецЕсли;
	
	Если НЕ ОбъектБД.ПометкаУдаления Тогда
		ПредупреждениеСообщение(, """" + ОбъектБД +  """ не помечен на удаление.
		|Снять пометку на удаление невозможно.
		|Операция не выполнена.");
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = "Снять пометку на удаление: " + ТипОбъектаБД + "." + ТипЗнч(ОбъектБД) + ":
	|" + Строка(ОбъектБД);
	
	Если ИспользоватьРежимМодальности() Тогда
		// Стандартно в модальном режиме (8.2/8.3) с обработкой результата.
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет, "ОТМЕНА ПОМЕТКИ НА УДАЛЕНИЕ", КодВозвратаДиалога.Нет);
		ОМСнятьПометкуУдаленияЗавершение(Ответ, Неопределено);
	Иначе
		// Стандартно в немодальном режиме (8.3) с обработкой результата.
		Оповещение = Вычислить("Новый ОписаниеОповещения(""ОМСнятьПометкуУдаленияЗавершение"", ЭтаФорма, Неопределено)");
		Выполнить("ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет, ""ОТМЕНА ПОМЕТКИ НА УДАЛЕНИЕ"", КодВозвратаДиалога.Нет)");
	КонецЕсли;
	
КонецПроцедуры

Процедура ОМСнятьПометкуУдаленияЗавершение(Ответ, Параметр) Экспорт
	Перем ЗначениеОтвета;
	
	ЗначениеОтвета = ПолучитьКодВозвратаДиалога(Ответ);
	Если ЗначениеОтвета = Неопределено ИЛИ ЗначениеОтвета = КодВозвратаДиалога.НЕТ ИЛИ ЗначениеОтвета = КодВозвратаДиалога.Таймаут Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	
	ОбъектБДУдалениеНаСервере(ОбъектБД, Отказ, "СнятьПометкуУдаления");
	УстановитьЗначениеРеквизитаПометкаУдаленияНаФорме(ОбъектБД);
	
	ОбъектБДПолучитьСтрокуСостоянияОбъекта();
	
КонецПроцедуры

Процедура ОМПометитьНаУдаление(Кнопка)
	Перем Оповещение;
	
	Если ОбъектБДПолучитьПризнакПредопределенныйОбъекта(ОбъектБД) Тогда		// Справочник, ~ПланОбмена, ПланСчетов, ПланВидовРасчета.
		ПредупреждениеСообщение(, "Предопределенный Объект удалить невозможно.
		|Операция не выполнена.");
		Возврат;
	КонецЕсли;
	
	Если ОбъектБД.ПометкаУдаления Тогда
		ПредупреждениеСообщение(, """" + ОбъектБД + """ помечен на удаление.
		|Повторно пометить на удаление невозможно.
		|Операция не выполнена.");
		Возврат;
	КонецЕсли;
	
	ТипОбъектаБД = ОбъектБДПолучитьТипОбъекта(ОбъектБД);
	
	СообщениеДляГруппы = Неопределено;
	Если ТипОбъектаБД = ИмяТипаСправочники() ИЛИ ТипОбъектаБД = ИмяТипаПланыВидовХарактеристик() Тогда
		СообщениеДляГруппы = ?(ОбъектБД.ЭтоГруппа, "
		|ВАЖНО: Это Группа Справочника/ПланаВидовХарактеристик. 
		|Будут помечены на удаление подчиненные Группы и Элементы.
		|", СообщениеДляГруппы);
	КонецЕсли;
	
	ТекстВопроса = "Пометить на удаление: " + ТипОбъектаБД + "." + ТипЗнч(ОбъектБД) + ":
	|" + Строка(ОбъектБД) + ".
	|" + СообщениеДляГруппы + "
	|Фактическое удаление необходимо провести стандартным способом:
	|1С:Предприятие -> Операции -> Удаление помеченных объектов.
	|
	|""СЕМЬ РАЗ ОТМЕРЬ - ОДИН РАЗ ОТРЕЖЬ."" (народная мудрость)";
	
	Если ИспользоватьРежимМодальности() Тогда
		// Стандартно в модальном режиме (8.2/8.3) с обработкой результата.
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет, "ПОМЕТКА НА УДАЛЕНИЕ", КодВозвратаДиалога.Нет);
		ОМПометитьНаУдалениеЗавершение(Ответ, Неопределено);
	Иначе
		// Стандартно в немодальном режиме (8.3) с обработкой результата.
		Оповещение = Вычислить("Новый ОписаниеОповещения(""ОМПометитьНаУдалениеЗавершение"", ЭтаФорма, Неопределено)");
		Выполнить("ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет, ""ПОМЕТКА НА УДАЛЕНИЕ"", КодВозвратаДиалога.Нет)");
	КонецЕсли;
	
КонецПроцедуры

Процедура ОМПометитьНаУдалениеЗавершение(Ответ, Параметр) Экспорт
	Перем ЗначениеОтвета;
	
	ЗначениеОтвета = ПолучитьКодВозвратаДиалога(Ответ);
	Если ЗначениеОтвета = Неопределено ИЛИ ЗначениеОтвета = КодВозвратаДиалога.НЕТ ИЛИ ЗначениеОтвета = КодВозвратаДиалога.Таймаут Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	
	ОбъектБДУдалениеНаСервере(ОбъектБД, Отказ, "ПометкаНаУдаление");
	УстановитьЗначениеРеквизитаПометкаУдаленияНаФорме(ОбъектБД);
	Если ПоказатьДвижения Тогда
		ПоказатьДвижения = Ложь;
		ПоказатьДвиженияПриИзменении("ОчиститьДвижения");
	КонецЕсли;
	
	ОбъектБДПолучитьСтрокуСостоянияОбъекта();
	
КонецПроцедуры

Процедура УстановитьЗначениеРеквизитаПометкаУдаленияНаФорме(ОбъектБД)
	Перем МассивСтрок, СтрокаКоллекции;
	
	МассивСтрок = ТРеквизитыОбъекта.НайтиСтроки(Новый Структура("Имя", "ПометкаУдаления"));
	Если МассивСтрок.Количество() > 0 Тогда
		СтрокаКоллекции = МассивСтрок[0];
		СтрокаКоллекции.Значение = ОбъектБД.ПометкаУдаления;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОМУдалить(Кнопка)
	Перем Оповещение;
	
	Если ОбъектБДПолучитьПризнакПредопределенныйОбъекта(ОбъектБД) Тогда		// Справочник, ~ПланОбмена, ПланСчетов, ПланВидовРасчета.
		ПредупреждениеСообщение(, "Предопределенный Объект удалить невозможно.");
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = "ПОДТВЕРДИТЕ НЕПОСРЕДСТВЕННОЕ УДАЛЕНИЕ: " + ТипОбъектаБД + "." + ТипЗнч(ОбъектБД) + ":
	|" + Строка(ОбъектБД) + ".
	|
	|ЭТО МОЖЕТ НАРУШИТЬ ССЫЛОЧНУЮ ЦЕЛОСТНОСТЬ ДАННЫХ.
	|
	|""СЕМЬ РАЗ ОТМЕРЬ - ОДИН РАЗ ОТРЕЖЬ."" (народная мудрость)";
	
	Если ИспользоватьРежимМодальности() Тогда
		// Стандартно в модальном режиме (8.2/8.3) с обработкой результата.
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет, "НЕПОСРЕДСТВЕННОЕ УДАЛЕНИЕ", КодВозвратаДиалога.Нет);
		ОМУдалитьЗавершение(Ответ, Неопределено);
	Иначе
		// Стандартно в немодальном режиме (8.3) с обработкой результата.
		Оповещение = Вычислить("Новый ОписаниеОповещения(""ОМУдалитьЗавершение"", ЭтаФорма, Неопределено)");
		Выполнить("ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет, ""НЕПОСРЕДСТВЕННОЕ УДАЛЕНИЕ"", КодВозвратаДиалога.Нет)");
	КонецЕсли;
	
КонецПроцедуры

Процедура ОМУдалитьЗавершение(Ответ, Параметр) Экспорт
	Перем ЗначениеОтвета;
	
	ЗначениеОтвета = ПолучитьКодВозвратаДиалога(Ответ);
	Если ЗначениеОтвета = Неопределено ИЛИ ЗначениеОтвета = КодВозвратаДиалога.НЕТ ИЛИ ЗначениеОтвета = КодВозвратаДиалога.Таймаут Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	ОбъектБДУдалениеНаСервере(ОбъектБД, Отказ, "Удалить");
	
	Если НЕ Отказ Тогда
		ОбъектБДОчистка(Неопределено, Ложь);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЦИИ ОБРАБОТКИ.
//

Процедура ОМСтруктураПодчиненностиОбъекта(Кнопка)
	
	ТипОбъектаБД = ОбъектБДПолучитьТипОбъекта(ОбъектБД);
	
	Если НЕ ЗначениеЗаполнено(ОбъектБД) 
		ИЛИ НЕ ТипОбъектаБД = ИмяТипаДокументы() Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФормыСтруктурыПодчиненности = Настройки.ИмяФормыСтруктурыПодчиненности;
	
	Если ИмяФормыСтруктурыПодчиненности = Неопределено Тогда
		ПредупреждениеСообщение(, "Форма ""СтруктураПодчиненности"" не найдена.
		|Просмотр информации о Подчиненности документов невозможен.");
		Возврат;
	КонецЕсли;
	
	Попытка
		// Обычная Форма (форма обработки).
		ФормаСтруктурыПодчиненности = ПолучитьФорму(ИмяФормыСтруктурыПодчиненности);
		ФормаСтруктурыПодчиненности.ВладелецФормы 					= ЭтаФорма;
		ФормаСтруктурыПодчиненности.ЗакрыватьПриЗакрытииВладельца	= Истина;
		ФормаСтруктурыПодчиненности.ДокументСсылка 					= ОбъектБД;
		
		ФормаСтруктурыПодчиненности.ОткрытьМодально();
	Исключение
		Сообщить("МФ: " + ОписаниеОшибки(), СтатусСообщения.Информация);
	КонецПопытки;
	
КонецПроцедуры

Процедура ОМДатыЗапрета(Кнопка)

	ИмяРегистраДатыЗапрета = ЭтотОбъект.ИмяРегистраДатыЗапрета;
	
	Если ИмяРегистраДатыЗапрета = Неопределено Тогда
		ПредупреждениеСообщение(, "Не обнаружен Регистр, содержащий информацию о Датах Запрета.
		|Просмотр информации о Датах Запрета невозможен.");
		Возврат;
	КонецЕсли;
	
	Попытка
		// Обычная или Управляемая ФормыФорма (форма конфигурации).
		ФормаДатыЗапрета = ПолучитьФорму("РегистрСведений." + ИмяРегистраДатыЗапрета + ".ФормаСписка", , ЭтаФорма);
		ФормаДатыЗапрета.ВладелецФормы 					= ЭтаФорма;
		ФормаДатыЗапрета.ЗакрыватьПриЗакрытииВладельца	= Истина;
		Попытка
			ФормаДатыЗапрета.РежимОткрытияОкна 			= РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		Исключение
		КонецПопытки;
		
		Если ИспользоватьРежимМодальности() Тогда
			// Стандартно в модальном режиме (8.2/8.3) с обработкой результата.
			ФормаДатыЗапрета.ОткрытьМодально();
		Иначе
			// Стандартно в немодальном режиме (8.3) с обработкой результата.
			ФормаДатыЗапрета.Открыть();
		КонецЕсли;
	Исключение
		Сообщить("МФ: " + ОписаниеОшибки(), СтатусСообщения.Информация);
	КонецПопытки;
		
КонецПроцедуры

Процедура ОМКартаМаршрута(Кнопка)
	
	ТипОбъектаБД = ОбъектБДПолучитьТипОбъекта(ОбъектБД);
	Если НЕ ЗначениеЗаполнено(ОбъектБД) 
		ИЛИ НЕ ТипОбъектаБД = ИмяТипаБизнесПроцессы() Тогда
		Если НЕ ТипОбъектаБД = ИмяТипаЗадачи() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ИмяФормыКартаМаршрута = Настройки.ИмяФормыКартаМаршрута;
	Если ИмяФормыКартаМаршрута = Неопределено Тогда
		ПредупреждениеСообщение(, "Форма ""КартаМаршрута"" не найдена.
		|Просмотр карты бизнес-процесса невозможен.");
		Возврат;
	КонецЕсли;
	
	Попытка
		// Обычная Форма (форма обработки).
		ФормаКартаМаршрута = ПолучитьФорму(ИмяФормыКартаМаршрута);
		ФормаКартаМаршрута.ВладелецФормы 					= ЭтаФорма;
		ФормаКартаМаршрута.ЗакрыватьПриЗакрытииВладельца	= Истина;
		Если ТипОбъектаБД = ИмяТипаБизнесПроцессы() Тогда
			ФормаКартаМаршрута.БизнесПроцесс 				= ОбъектБД;
		ИначеЕсли ТипОбъектаБД = ИмяТипаЗадачи() Тогда
			ФормаКартаМаршрута.БизнесПроцесс 				= ОбъектБД.БизнесПроцесс;
			Если НЕ ЗначениеЗаполнено(ФормаКартаМаршрута.БизнесПроцесс) Тогда
				ПредупреждениеСообщение(, "Задача: """ + ОбъектБД + """ 
				|
				|Бизнес-процесс неопределен.");
			КонецЕсли;
		КонецЕсли;
		ФормаКартаМаршрута.ОткрытьМодально();
	Исключение
		Сообщить("МФ: " + ОписаниеОшибки(), СтатусСообщения.Информация);
	КонецПопытки;
	
КонецПроцедуры

Процедура ОМПроверитьРегистрациюВПланахОбмена(Кнопка)
	Перем СписокУзловОбмена, Оповещение;
	Перем ПроверкаРегистрации;
	
	ОчиститьСообщения();
	
	СписокУзловОбмена = ПолучитьСписокУзловОбменаДляОбъекта(ОбъектБД);
	Если СписокУзловОбмена.Количество() = 0 Тогда
		ПредупреждениеСообщение(, "Объект в обмене не участвует.");
		Возврат;
	КонецЕсли;
	
	// Установить пометку у всех строк.
    СписокУзловОбмена.ЗаполнитьПометки(Истина); 
	
	Если ИспользоватьРежимМодальности() Тогда
		// Стандартно в модальном режиме (8.2/8.3) с обработкой результата.
		ЗначенияВыбраны = СписокУзловОбмена.ОтметитьЭлементы("Выберите узел(ы) обмена для проверки регистрации объекта");
		ОМПроверитьРегистрациюВПланахОбменаЗавершение(СписокУзловОбмена, ЗначенияВыбраны);
	Иначе
		// Стандартно в немодальном режиме (8.3) с обработкой результата.
		Оповещение = Вычислить("Новый ОписаниеОповещения(""ОМПроверитьРегистрациюВПланахОбменаЗавершение"", ЭтаФорма, Неопределено)");
		Выполнить("СписокУзловОбмена.ПоказатьОтметкуЭлементов(Оповещение, ""Выберите узел(ы) обмена для проверки регистрации объекта"")");
	КонецЕсли;
		
КонецПроцедуры

Процедура ОМПроверитьРегистрациюВПланахОбменаЗавершение(СписокУзловОбмена, Параметр) Экспорт
	Перем ПроверкаРегистрации;
	
	Если СписокУзловОбмена = Неопределено ИЛИ (ТипЗнч(Параметр) = Тип("Булево") И НЕ Параметр) Тогда
		Возврат;
	КонецЕсли;
	
	Состояние("Проверка регистрации изменений объекта: 
	|" + ОбъектБД);
	
	ПроверкаРегистрации = ЗарегистрироватьИзменения_УдалитьРегистрациюИзменений_ИзменениеЗарегистрировано_ОбъектаВУзлахОбмена(ОбъектБД, СписокУзловОбмена, "ИзменениеЗарегистрировано");
	
	ПредупреждениеСообщение(, "Проверка регистрации изменений объекта в узлах обмена произведена. 
	|");
	
КонецПроцедуры

Процедура ОМРегистрацияВПланахОбмена(Кнопка)
	Перем СписокУзловОбмена, Оповещение;
	Перем РегистрацияПроизведена;
	
	ОчиститьСообщения();
	
	СписокУзловОбмена = ПолучитьСписокУзловОбменаДляОбъекта(ОбъектБД);
	Если СписокУзловОбмена.Количество() = 0 Тогда
		ПредупреждениеСообщение(, "Объект в обмене не участвует.");
		Возврат;
	КонецЕсли;
	
	// Установить пометку у всех строк.
    СписокУзловОбмена.ЗаполнитьПометки(Истина); 
	
	Если ИспользоватьРежимМодальности() Тогда
		// Стандартно в модальном режиме (8.2/8.3) с обработкой результата.
		ЗначенияВыбраны = СписокУзловОбмена.ОтметитьЭлементы("Выберите узел(ы) обмена для регистрации объекта");
		ОМРегистрацияВПланахОбменаЗавершение(СписокУзловОбмена, ЗначенияВыбраны);
	Иначе
		// Стандартно в немодальном режиме (8.3) с обработкой результата.
		Оповещение = Вычислить("Новый ОписаниеОповещения(""ОМРегистрацияВПланахОбменаЗавершение"", ЭтаФорма, Неопределено)");
		Выполнить("СписокУзловОбмена.ПоказатьОтметкуЭлементов(Оповещение, ""Выберите узел(ы) обмена для регистрации объекта"")");
	КонецЕсли;
		
КонецПроцедуры

Процедура ОМРегистрацияВПланахОбменаЗавершение(СписокУзловОбмена, Параметр) Экспорт
	Перем РегистрацияПроизведена;
	
	Если СписокУзловОбмена = Неопределено ИЛИ (ТипЗнч(Параметр) = Тип("Булево") И НЕ Параметр) Тогда
		Возврат;
	КонецЕсли;
	
	Состояние("Регистрация изменений объекта: 
	|" + ОбъектБД);
	
	РегистрацияПроизведена = ЗарегистрироватьИзменения_УдалитьРегистрациюИзменений_ИзменениеЗарегистрировано_ОбъектаВУзлахОбмена(ОбъектБД, СписокУзловОбмена, "ЗарегистрироватьИзменения");
	
	Если НЕ РегистрацияПроизведена Тогда
		ПредупреждениеСообщение(, "Регистрация изменений объекта в узлах обмена не произведена. 
		|см. сообщения.");
	Иначе
		ПредупреждениеСообщение(, "Регистрация изменений объекта, а также ""связанных"" объектов, в узлах обмена завершена.
		|");
	КонецЕсли;
	
КонецПроцедуры

Процедура ОМУдалитьРегистрациюВПланахОбмена(Кнопка)
	Перем СписокУзловОбмена, Оповещение;
	Перем ОтменаРегистрацииПроизведена;
	
	ОчиститьСообщения();
	
	СписокУзловОбмена = ПолучитьСписокУзловОбменаДляОбъекта(ОбъектБД);
	Если СписокУзловОбмена.Количество() = 0 Тогда
		ПредупреждениеСообщение(, "Объект в обмене не участвует.");
		Возврат;
	КонецЕсли;
	
	Если ИспользоватьРежимМодальности() Тогда
		// Стандартно в модальном режиме (8.2/8.3) с обработкой результата.
		ЗначенияВыбраны = СписокУзловОбмена.ОтметитьЭлементы("Выберите узел(ы) обмена для удаления регистрации объекта");
		ОМУдалитьРегистрациюВПланахОбменаЗавершение(СписокУзловОбмена, ЗначенияВыбраны);
	Иначе
		// Стандартно в немодальном режиме (8.3) с обработкой результата.
		Оповещение = Вычислить("Новый ОписаниеОповещения(""ОМУдалитьРегистрациюВПланахОбменаЗавершение"", ЭтаФорма, Неопределено)");
		Выполнить("СписокУзловОбмена.ПоказатьОтметкуЭлементов(Оповещение, ""Выберите узел(ы) обмена для удаления регистрации объекта"")");
	КонецЕсли;
		
КонецПроцедуры

Процедура ОМУдалитьРегистрациюВПланахОбменаЗавершение(СписокУзловОбмена, Параметр) Экспорт
	Перем ОтменаРегистрацииПроизведена;
	
	Если СписокУзловОбмена = Неопределено ИЛИ (ТипЗнч(Параметр) = Тип("Булево") И НЕ Параметр) Тогда
		Возврат;
	КонецЕсли;
	
	Состояние("Удаление регистрации изменений объекта: 
	|" + ОбъектБД);
	
	ОтменаРегистрацииПроизведена = ЗарегистрироватьИзменения_УдалитьРегистрациюИзменений_ИзменениеЗарегистрировано_ОбъектаВУзлахОбмена(ОбъектБД, СписокУзловОбмена, "УдалитьРегистрациюИзменений");
	
	Если НЕ ОтменаРегистрацииПроизведена Тогда
		ПредупреждениеСообщение(, "Удаление регистрации изменений объекта в узлах обмена не произведено.
		|см. сообщения.");
	Иначе
		ПредупреждениеСообщение(, "Удаление регистрации изменений объекта в узлах обмена завершено.
		|");
	КонецЕсли;
		
КонецПроцедуры

Процедура ОМНастройки(Кнопка)
	
	ИмяФормыНастройкиОбработки = Настройки.ИмяФормыНастройкиОбработки;
	Если ИмяФормыНастройкиОбработки = Неопределено Тогда
		ПредупреждениеСообщение(, "Форма ""НастройкаОбработки"" не найдена.");
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект.Настройки, ЭтотОбъект);
	
	Попытка
		// Обычная Форма (форма обработки).
		ФормаНастройки = ПолучитьФорму(ИмяФормыНастройкиОбработки);
		ФормаНастройки.ВладелецФормы 					= ЭтаФорма;
		ФормаНастройки.ЗакрыватьПриЗакрытииВладельца 	= Истина;
		
		ФормаНастройки.ОткрытьМодально();
	Исключение
		Сообщить("МФ: " + ОписаниеОшибки(), СтатусСообщения.Информация);
	КонецПопытки;
	
КонецПроцедуры

Процедура ОМОбновитьОтображаемыеДанные(Кнопка)
	
	ОчиститьСообщения();
	ОбъектБДПриИзменении(Кнопка);
	
КонецПроцедуры

Процедура ОМСправка(Кнопка)
	ОткрытьСправкуФормы();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СОБЫТИЯ ФОРМЫ.
// 

Процедура ПриОткрытии()
	
	ОчиститьСообщения();
	
	МонопольныйРежим = МонопольныйРежим();
	
	СведенияОВнешнейОбработке = СведенияОВнешнейОбработке();
	ЭтотОбъект.Настройки = СведенияОВнешнейОбработке.Настройки;
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ЭтотОбъект.Настройки);
	
	РезультатПроверки = ОбработкаПроверитьПраваПользователяИРежимЗапуска(ЭтотОбъект.Настройки);
	
	Если РезультатПроверки.Отказ Тогда
		ПредупреждениеСообщение(, РезультатПроверки.ОписаниеОшибки);
		Закрыть();
		Возврат;
	Иначе
		Если НЕ РезультатПроверки.ОписаниеОшибки = "" Тогда
			ПредупреждениеСообщение(, РезультатПроверки.ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;
	
	//+yuraos, 10.09.2015
	ОткрытаЗакрытаяФорма = Ложь;
	yuraosИнициализация(ОткрытаЗакрытаяФорма);
	Если ОткрытаЗакрытаяФорма = Истина Тогда
		Перейти ~СвязанныеОкнаПроверить;
	КонецЕсли; 
	//+yuraos, 10.09.2015
	
	//+yuraos, 10.09.2015 - под >= 8.2 лучше использовать хранилище настроек, а не профиль.
	Если ЗначениеЗаполнено(ОбъектБД) Тогда
		ЭтоСвязанноеОкно = Неопределено;
		ФормаОбработки = НайтиОбъектВСвязанныхОкнах(ОбъектБД, Истина, ЭтоСвязанноеОкно);
		Если ЭтоСвязанноеОкно = Истина И ФормаОбработки <> Неопределено И ЭтаФорма <> ФормаОбработки Тогда
			ОбъектБД = Неопределено;
		КонецЕсли; 
	Иначе
		ОбъектБД = ХранилищеНастроекДанныхФорм.Загрузить(ИмяФормы, "ОбъектБД");
	КонецЕсли;
	
	// Вместо ВосстановитьЗначение(...).
	ПоказыватьСообщения = ХранилищеНастроекДанныхФорм.Загрузить(ИмяФормы, "ПоказыватьСообщения");
	СкрыватьПустыеТабличныеЧасти = ХранилищеНастроекДанныхФорм.Загрузить(ИмяФормы, "СкрыватьПустыеТабличныеЧасти");
	СкрыватьПустыеТаблицыДвиженийРегистров = ХранилищеНастроекДанныхФорм.Загрузить(ИмяФормы, "СкрыватьПустыеТаблицыДвиженийРегистров");
	
	Значение = ХранилищеНастроекДанныхФорм.Загрузить(ИмяФормы, "ОбъектБД.СписокВыбора");
	Если ТипЗнч(Значение) = Тип("Массив") Тогда
		СписокВыбора = ЭлементыФормы.ОбъектБД.СписокВыбора;
		СписокВыбора.Очистить();
		Для каждого СтрС Из СписокПустыхСсылокйПолучить(Значение) Цикл
			ЗаполнитьЗначенияСвойств(СписокВыбора.Добавить(),СтрС);
		КонецЦикла;
	КонецЕсли; 
	//+yuraos, 10.09.2015
	
	ФормаДобавитьКолонкиВРеквизитТаблицаИзЭлементаФормыТаблицы(ЭлементыФормы.ТСвойстваОбъекта, ТСвойстваОбъекта);
	ФормаДобавитьКолонкиВРеквизитТаблицаИзЭлементаФормыТаблицы(ЭлементыФормы.ТРеквизитыОбъекта, ТРеквизитыОбъекта);
	ФормаДобавитьКолонкиВРеквизитТаблицаИзЭлементаФормыТаблицы(ЭлементыФормы.ТМетаданныеПодпискиНаСобытия, ТМетаданныеПодпискиНаСобытия);
	ФормаДобавитьКолонкиВРеквизитТаблицаИзЭлементаФормыТаблицы(ЭлементыФормы.ТМетаданныеФункциональныеОпции, ТМетаданныеФункциональныеОпции);
	ФормаДобавитьКолонкиВРеквизитТаблицаИзЭлементаФормыТаблицы(ЭлементыФормы.ТМетаданныеПланыОбмена, ТМетаданныеПланыОбмена);
	ФормаДобавитьКолонкиВРеквизитТаблицаИзЭлементаФормыТаблицы(ЭлементыФормы.ТМетаданныеРегистрыОбъекта, ТМетаданныеРегистрыОбъекта);
	ФормаДобавитьКолонкиВРеквизитТаблицаИзЭлементаФормыТаблицы(ЭлементыФормы.ТМетаданныеВводитсяНаОсновании, ТМетаданныеВводитсяНаОсновании);
	ФормаДобавитьКолонкиВРеквизитТаблицаИзЭлементаФормыТаблицы(ЭлементыФормы.ТМетаданныеЯвляетсяОснованиемДля, ТМетаданныеЯвляетсяОснованиемДля);
	
	//+yuraos, 10.09.2015
~СвязанныеОкнаПроверить:
	спСвязанныеОкнаПроверитьДобавить(Неопределено,Ложь);
	//+yuraos, 10.09.2015
	
	ОбъектБДПриИзменении(ОбъектБД);
	
КонецПроцедуры

Процедура ФормаДобавитьКолонкиВРеквизитТаблицаИзЭлементаФормыТаблицы(ЭлементыТаблица, Таблица)
	
	Для Каждого Колонка ИЗ ЭлементыТаблица.Колонки Цикл
		Таблица.Колонки.Добавить(Колонка.Имя);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриЗакрытии()
	
	// Вместо СохранитьЗначение(...)
	//+yuraos, 10.09.2015 - под >= 8.2 лутше использовать хранилище настроек, а не профиль
	ХранилищеНастроекДанныхФорм.Сохранить(ИмяФормы, "ОбъектБД", ОбъектБД);
	ХранилищеНастроекДанныхФорм.Сохранить(ИмяФормы, "ПоказыватьСообщения", ПоказыватьСообщения);
	ХранилищеНастроекДанныхФорм.Сохранить(ИмяФормы, "СкрыватьПустыеТабличныеЧасти", СкрыватьПустыеТабличныеЧасти);
	ХранилищеНастроекДанныхФорм.Сохранить(ИмяФормы, "СкрыватьПустыеТаблицыДвиженийРегистров", СкрыватьПустыеТаблицыДвиженийРегистров);
	ХранилищеНастроекДанныхФорм.Сохранить(ИмяФормы, "ОбъектБД.СписокВыбора", ЭлементыФормы.ОбъектБД.СписокВыбора.ВыгрузитьЗначения());
	//+yuraos, 13.09.2015
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		Если Источник.ВладелецФормы = ЭтаФорма Тогда
			Если ИмяСобытия = "ПоказыватьСообщения" Тогда							// Из формы "Настройка".
				ПоказыватьСообщения 					= Параметр;
			ИначеЕсли ИмяСобытия = "СкрыватьПустыеТаблицыДвиженийРегистров" Тогда	// Из формы "Настройка".
				СкрыватьПустыеТаблицыДвиженийРегистров	= Параметр;
			ИначеЕсли ИмяСобытия = "СкрыватьПустыеТабличныеЧасти" Тогда				// Из формы "Настройка".
				СкрыватьПустыеТабличныеЧасти			= Параметр;
			ИначеЕсли ИмяСобытия = "МонопольныйРежим" Тогда							// Из формы "Настройка".
				МонопольныйРежим						= Параметр;
			ИначеЕсли ИмяСобытия = "ОбменДаннымиЗагрузка" Тогда						// Из формы "Настройка".
				ОбменДаннымиЗагрузка	 				= Параметр;
			КонецЕсли;
		КонецЕсли;
		
	Исключение
		// Не всегда Источником является Форма, следовательно Владельца формы нет.
	КонецПопытки;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// МОДАЛЬНОЕ/НЕМОДАЛЬНОЕ ПРЕДУПРЕЖДЕНИЕ.
//

Процедура ПредупреждениеСообщение(Оповещение, ТекстПредупрежденияСообщения, Таймаут = 0, Заголовок = "")
	
	Если ИспользоватьРежимМодальности() Тогда
		// Стандартно в модальном режиме (8.2/8.3) с обработкой результата.
		Предупреждение(ТекстПредупрежденияСообщения, Таймаут, Заголовок);
	Иначе
		// Стандартно в немодальном режиме (8.3) с обработкой результата.
		Выполнить("ПоказатьПредупреждение(Оповещение, ТекстПредупрежденияСообщения, Таймаут, Заголовок)");
	КонецЕсли;;
		
КонецПроцедуры

Функция ИспользоватьРежимМодальности()
	Возврат ЭтотОбъект.РежимИспользованияМодальностиБулево;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// НЕМОДАЛЬНЫЙ ВОПРОС.
//

Функция ПолучитьКодВозвратаДиалога(Ответ)
	Перем ЗначениеОтвета;
	
	Если ТипЗнч(Ответ) = Тип("Структура") Тогда
		ЗначениеОтвета = Ответ.Значение;
	Иначе
		ЗначениеОтвета = Ответ;
	КонецЕсли;
	
	Возврат ЗначениеОтвета;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПАРСЕР ТЕКСТА ЗАПРОСА.
// 

Процедура ОМПарсерЗапроса(Кнопка)
	//
	//ИмяФормыПарсераЗапроса = Настройки.ИмяФормыПарсераЗапроса;
	//
	//Если ИмяФормыПарсераЗапроса = Неопределено Тогда
	//	Предупреждение("Форма ""ИмяФормыПарсераЗапроса"" не найдена.");
	//	Возврат;
	//КонецЕсли;
	//				
	//ФормаПарсерЗапроса = ПолучитьФорму(ИмяФормыПарсераЗапроса);
	//ФормаПарсерЗапроса.ВладелецФормы = ЭтаФорма;
	//ФормаПарсерЗапроса.ЗакрыватьПриЗакрытииВладельца = Истина;
	//	
	//ФормаПарсерЗапроса.Открыть();
	//
КонецПроцедуры

Процедура ВызватьОбъектБДПриИзменении(ВыбранноеЗначение, Элемент) Экспорт
	
	Если ЗначениеСсылочногоТипа(ВыбранноеЗначение) Тогда
		ОбъектБД = ВыбранноеЗначение;
		ОбъектБДПриИзменении(Элемент);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбъектБДОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(ВыбранноеЗначение) И ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		// "Приехало" полное имя объекта метаданных из "формы выбора типа".
		ВызватьВыборОбъектаБД(ВыбранноеЗначение, Элемент, Ложь);
	Иначе
		// "Приехала" ссылка, выбранная в форме списка выбора ОбъектаБД или в выпадающем списке.
		Если ОбъектБД <> Неопределено И ТипЗнч(ВыбранноеЗначение) <> ТипЗнч(ОбъектБД) Тогда
			ОбъектБДОчистка(Элемент, Истина);
		КонецЕсли;
		ВызватьОбъектБДПриИзменении(ВыбранноеЗначение, Элемент);
	КонецЕсли; 
КонецПроцедуры

Процедура ОбъектБДОчисткаМеню(Элемент, СтандартнаяОбработка)
	Перем Оповещение;
	Перем ПараметрыОповещенияОЗавершении;
	Перем ВыборНачальный;
	
	СтандартнаяОбработка = Ложь;
	Меню = Элемент.СписокВыбора.Скопировать();
	ЭтотОбъект.СписокПустыхСсылокУстановитьКартинки(Меню);
	Меню.Вставить(0, Неопределено	, "<Очистить значение Объекта БД>"	, , БиблиотекаКартинок.Удалить);
	Меню.Вставить(1, "$ВыбратьТип"	, "<Выбрать тип Объекта БД>"		, , БиблиотекаКартинок.ВыбратьТип);
	Если Элемент.СписокВыбора.Количество() > 0 Тогда
		Меню.Вставить(2, ""			, "......"							, , );
		Меню.Добавить(Null, "<Очистить список пустых значений>"			, , БиблиотекаКартинок.Очистить);
	КонецЕсли; 
	ВыборНачальный = Меню[0];
	ПараметрыОповещенияОЗавершении = Элемент;
	Если ИспользоватьРежимМодальности() Тогда
		// Стандартно в модальном режиме (8.2/8.3) с обработкой результата.
		Выбор = ЭтаФорма.ВыбратьИзСписка(Меню,Элемент,ВыборНачальный);
		ОбъектБДОчисткаМенюЗавершение(Выбор, ПараметрыОповещенияОЗавершении);
	Иначе
		// Стандартно в немодальном режиме (8.3) с обработкой результата.
		// Нет у обычной формы асинхронного метода ВыбратьИзМеню(), но модальный метод вполне работает!
		Выбор = ЭтаФорма.ВыбратьИзСписка(Меню,Элемент,ВыборНачальный);
		ОбъектБДОчисткаМенюЗавершение(Выбор, ПараметрыОповещенияОЗавершении);
		//Оповещение = Вычислить("Новый ОписаниеОповещения(""ОбъектБДОчисткаМенюЗавершение"", ЭтаФорма, ПараметрыОповещенияОЗавершении)");
		//Выполнить("ЭтаФорма.ПоказатьВыборИзСписка(Оповещение, Меню, Элемент, ВыборНачальный)");
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбъектБДОчисткаМенюЗавершение(Выбор, ПараметрыОповещения) Экспорт
	
	Если Выбор = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	Элемент = ПараметрыОповещения;
	Если Выбор.Значение = "$ВыбратьТип" Тогда
		ВызватьВыборТипаОбъектаБД();
	ИначеЕсли Выбор.Значение = "" Тогда
		ОбъектБДОчисткаМеню(Элемент, Истина);
	ИначеЕсли Выбор.Значение = Null Тогда
		Элемент.СписокВыбора.Очистить();
	ИначеЕсли Выбор.Значение = Неопределено Тогда
		ОбъектБДОчистка(Элемент, Истина);
	Иначе
		Если ОбъектБД <> Неопределено И ТипЗнч(Выбор.Значение) <> ТипЗнч(ОбъектБД) Тогда
			ОбъектБДОчистка(Элемент, Истина);
		КонецЕсли; 
		ОбъектБД = Выбор.Значение;
		ОбъектБДПриИзменении(Элемент);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбъектБДИзменятьТДвижений(Кнопка)
	
	ИмяРегистра = СтрЗаменить(Кнопка.Имя, "ОбъектБДИзменятьТДвижений_", "");
	ТаблицаИмя = ФормаПолучитьИмяРеквизитаРегистр(ИмяРегистра);
	ПанельИмя = Кнопка.Подсказка;
	ТаблицаКонтМеню = ЭлементыФормы.СлужебнаяКонтМеню.Кнопки.КонтМенюМенюВсе.Кнопки.КонтМенюТаблицыДвижений.Кнопки[ИмяРегистра].Кнопки;
	МенюПроведение = ЭлементыФормы.ОсновныеДействияФормы.Кнопки.пмПроведение.Кнопки;
	// Включаем редактирование таблицы набора движений.
	ЭлементыФормы[ПанельИмя].Страницы[ТаблицаИмя].КартинкаЗаголовка = БиблиотекаКартинок.ТабличныйДокументТолькоПросмотр;
	ЭлементыФормы[ТаблицаИмя].ИзменятьПорядокСтрок = Истина;
	ЭлементыФормы[ТаблицаИмя].ИзменятьСоставСтрок = Истина;
	ЭлементыФормы[ТаблицаИмя].ТолькоПросмотр = Ложь;
	// Переключаем доступность кнопок команд контекстного.
	Кнопка.Доступность = Ложь;
	ТаблицаКонтМеню[СтрЗаменить(Кнопка.Имя, "ОбъектБДИзменятьТДвижений_", "ОбъектБДЗаписатьТДвижений_")].Доступность = Истина;
	МенюПроведение.кнОМЗаписатьИзмененныеНаборыДвижений.Доступность = Истина;
	
КонецПроцедуры

Процедура ОбъектБДЗаписатьТДвиженийВыполнение(ТаблицаИмя, РегистрИмя, Еррор)
	
	Еррор = Ложь;
	Если ТипОбъектаБД <> "Документ" Тогда
		Сообщить("Функция все равно не доступна для объектов типа """ + ТипОбъектаБД + """ !!!", СтатусСообщения.Информация);
		Еррор = Истина;
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ОбъектБД) Тогда
		Сообщить("Пустая ссылка на документ-регистратор !!!", СтатусСообщения.Информация);
		Еррор = Истина;
		Возврат;
	КонецЕсли; 
	
	ТаблицаДвижений = ЭлементыФормы[ТаблицаИмя].Значение;
	
	ОбъектДокумент = ОбъектБД.ПолучитьОбъект();
	НаборЗаписей = ОбъектДокумент.Движения[РегистрИмя];
	НаборЗаписей.Прочитать();
	
	ОчисткаНабораДвижений = (ТаблицаДвижений.Количество() = 0 И НаборЗаписей.Количество() <> 0);
	
	Если ОбменДаннымиЗагрузка Тогда
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
	КонецЕсли;
	
	Попытка
		НаборЗаписей.Загрузить(ТаблицаДвижений);
		НаборЗаписей.Записать(Истина);
		Если ОчисткаНабораДвижений Тогда
			Сообщить(
			"Очищен не пустой набор движений """ + РегистрИмя + """ регистратора !!!", СтатусСообщения.Внимание);
		КонецЕсли; 
	Исключение
		Еррор = Истина;
		Сообщить(
		"Ошибка записи набора движений """ + РегистрИмя + """ регистратора:
		|" + ОписаниеОшибки(),СтатусСообщения.ОченьВажное);
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбъектБДЗаписатьТДвижений(Кнопка)
	Перем Оповещение;
	Перем ПараметрыОповещенияОЗавершении;
	
	Если ТипОбъектаБД <> "Документ" Тогда
		Сообщить("Функция не доступна для объектов типа """ + ТипОбъектаБД + """ !!!", СтатусСообщения.Информация);
		Возврат;
	КонецЕсли; 
	РегистрИмя = СтрЗаменить(Кнопка.Имя, "ОбъектБДЗаписатьТДвижений_", "");
	
	ТекстЗаголовка = "ЗАПИСЬ НАБОРА ДВИЖЕНИЙ";
	ТекстВопроса = 
	"Записать набор движений текущего документа
	|по регистру  """ + РегистрИмя + """  ???";
	
	ПараметрыОповещенияОЗавершении = Новый Структура("Кнопка,РегистрИмя", Кнопка, РегистрИмя);
		
	Если ИспользоватьРежимМодальности() Тогда
		// Стандартно в модальном режиме (8.2/8.3) с обработкой результата.
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена,30,,ТекстЗаголовка);
		ОбъектБДЗаписатьТДвиженийЗаершение(Ответ, ПараметрыОповещенияОЗавершении);
	Иначе
		// Стандартно в немодальном режиме (8.3) с обработкой результата.
		Оповещение = Вычислить("Новый ОписаниеОповещения(""ОбъектБДЗаписатьТДвиженийЗаершение"", ЭтаФорма, ПараметрыОповещенияОЗавершении)");
		Выполнить("ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена, 30, КодВозвратаДиалога.Отмена, ТекстЗаголовка, КодВозвратаДиалога.Отмена)");
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбъектБДЗаписатьТДвиженийЗаершение(Ответ, ПараметрыОповещения) Экспорт
	Перем Кнопка, РегистрИмя;
	
	// Считываем и проверяем значения параметров оповещения о выборе в диалоге.
	Если ТипЗнч(ПараметрыОповещения) = Тип("Структура") Тогда
		ПараметрыОповещения.Свойство("Кнопка",Кнопка);
		ПараметрыОповещения.Свойство("РегистрИмя",РегистрИмя);
	КонецЕсли;
	Если ТипЗнч(Кнопка) <> Тип("КнопкаКоманднойПанели") ИЛИ Кнопка.ТипКнопки <> ТипКнопкиКоманднойПанели.Действие Тогда
		ВызватьИсключение("ОбъектБДЗаписатьТДвиженийЗаершение() >>> Не передана ссылка на кнопку командной панели !");
	КонецЕсли; 
	Если ПустаяСтрока(РегистрИмя) Тогда
		ВызватьИсключение("ОбъектБДЗаписатьТДвиженийЗаершение() >>> Не передано имя регистра для записи набора движений !");
	КонецЕсли; 
	
	// Проверяем ответ из диалога вопроса и выполняем действия.
	Если (Ответ <> КодВозвратаДиалога.ОК) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаИмя = ФормаПолучитьИмяРеквизитаРегистр(РегистрИмя);
	Еррор = Неопределено;
	ОбъектБДЗаписатьТДвиженийВыполнение(ТаблицаИмя,РегистрИмя,Еррор);
	Если Еррор <> Истина Тогда
		// Если успешно - выключам редактирование таблицы набора движений.
		ПанельИмя = Кнопка.Подсказка; // Имя панели с таблицей движений храним в подсказке кнопки командной панели.
		ТаблицаКонтМеню = ЭлементыФормы.СлужебнаяКонтМеню.Кнопки.КонтМенюМенюВсе.Кнопки.КонтМенюТаблицыДвижений.Кнопки[РегистрИмя].Кнопки;
		ЭлементыФормы[ПанельИмя].Страницы[ТаблицаИмя].КартинкаЗаголовка = Новый Картинка;
		ЭлементыФормы[ТаблицаИмя].ИзменятьПорядокСтрок = Ложь;
		ЭлементыФормы[ТаблицаИмя].ИзменятьСоставСтрок = Ложь;
		ЭлементыФормы[ТаблицаИмя].ТолькоПросмотр = Истина;
		// Переключаем доступность кнопок команд контекстного меню.
		Кнопка.Доступность = Ложь;
		ТаблицаКонтМеню[СтрЗаменить(Кнопка.Имя, "ОбъектБДЗаписатьТДвижений_", "ОбъектБДИзменятьТДвижений_")].Доступность = Истина;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбъектБДЗаписатьИзмененныеНДВыполнение(мсИзмененныеНаборы,Еррор)
	
	КартинкаНулл = Новый Картинка;
	Еррор = Ложь;
	Для каждого Набор Из мсИзмененныеНаборы Цикл
		Еррор1 = Неопределено;
		ОбъектБДЗаписатьТДвиженийВыполнение(Набор.ТаблицаИмя, Набор.РегистрИмя, Еррор1);
		Если Еррор1 = Истина Тогда
			Еррор = Истина;
			Сообщить(
			"Набор движений """ + Набор.РегистрИмя + """ - НЕ ЗАПИСАН!", СтатусСообщения.Важное);
		Иначе
			Сообщить(
			"Набор движений """ + Набор.РегистрИмя + """ - записан.", СтатусСообщения.Информация);
			// Если успешно - выключам редактирование таблицы набора движений.
			ТаблицаКонтМеню = ЭлементыФормы.СлужебнаяКонтМеню.Кнопки.КонтМенюМенюВсе.Кнопки.КонтМенюТаблицыДвижений.Кнопки[Набор.РегистрИмя].Кнопки;
			ЭлементыФормы[Набор.ПанельИмя].Страницы[Набор.ТаблицаИмя].КартинкаЗаголовка = КартинкаНулл;
			ЭлементыФормы[Набор.ТаблицаИмя].ИзменятьПорядокСтрок = Ложь;
			ЭлементыФормы[Набор.ТаблицаИмя].ИзменятьСоставСтрок = Ложь;
			ЭлементыФормы[Набор.ТаблицаИмя].ТолькоПросмотр = Истина;
			// Переключаем доступность кнопок команд контекстного.
			ТаблицаКонтМеню["ОбъектБДЗаписатьТДвижений_" + Набор.РегистрИмя].Доступность = Ложь;
			ТаблицаКонтМеню["ОбъектБДИзменятьТДвижений_" + Набор.РегистрИмя].Доступность = Истина;
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

Процедура ОбъектБДЗаписатьИзмененныеНД(Кнопка)
	Перем Оповещение;
	Перем ПараметрыОповещенияОЗавершении;
	
	Если ТипОбъектаБД <> "Документ" Тогда
		Сообщить("Функция не доступна для объектов типа """ + ТипОбъектаБД + """ !!!", СтатусСообщения.Информация);
		Возврат;
	КонецЕсли;
	
	мсИзмененныеНаборы = Новый Массив;
	ИменаРегистров = "";
	ТабИмя = ФормаПолучитьИмяРеквизитаРегистр("");
	ТабИмяДлина = СтрДлина(ТабИмя);
	Для каждого Элемент Из ЭлементыФормы Цикл
		Если ТипЗнч(Элемент) = Тип("ТабличноеПоле") И Лев(Элемент.Имя,ТабИмяДлина) = ТабИмя И Элемент.ТолькоПросмотр = Ложь Тогда
			// Имя панели с таблицей движений храним в подсказке Подменю, выбранного в атрибуте "КонтекстноеМеню" элемента.
			ПанельИмя = Элемент.КонтекстноеМеню.Подсказка;
			РегистрИмя = Сред(Элемент.Имя,ТабИмяДлина+1);
			мсИзмененныеНаборы.Добавить(Новый Структура("РегистрИмя,ТаблицаИмя,ПанельИмя",РегистрИмя,Элемент.Имя,ПанельИмя));
			ИменаРегистров = ИменаРегистров + ?(ПустаяСтрока(ИменаРегистров),"","
			|") + """" + РегистрИмя + """";
		КонецЕсли;
	КонецЦикла;
	
	Если мсИзмененныеНаборы.Количество() = 0 Тогда
		Сообщить("Нет измененных наборов движений документа для записи !", СтатусСообщения.Информация);
		Кнопка.Доступность = Ложь;
		Возврат;
	КонецЕсли;
	
	ТекстЗаголовка = "ЗАПИСЬ НАБОРОВ ДВИЖЕНИЙ";
	ТекстВопроса = 
	"Записать наборы движений текущего документа по следующим регистрам:
	|---
	|" + ИменаРегистров + "  ???";
	
	ПараметрыОповещенияОЗавершении = Новый Структура("Кнопка,мсИзмененныеНаборы",Кнопка,мсИзмененныеНаборы);
	
	Если ИспользоватьРежимМодальности() Тогда
		// Стандартно в модальном режиме (8.2/8.3) с обработкой результата.
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена,30,,ТекстЗаголовка);
		ОбъектБДЗаписатьИзмененныеНДЗаершение(Ответ, ПараметрыОповещенияОЗавершении);
	Иначе
		// Стандартно в немодальном режиме (8.3) с обработкой результата.
		Оповещение = Вычислить("Новый ОписаниеОповещения(""ОбъектБДЗаписатьИзмененныеНДЗаершение"", ЭтаФорма, ПараметрыОповещенияОЗавершении)");
		Выполнить("ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена, 30, КодВозвратаДиалога.Отмена, ТекстЗаголовка, КодВозвратаДиалога.Отмена)");
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбъектБДЗаписатьИзмененныеНДЗаершение(Ответ, ПараметрыОповещения) Экспорт
	Перем Кнопка, мсИзмененныеНаборы;
	
	// Считываем и проверяем значения параметров оповещения о выборе в диалоге.
	Если ТипЗнч(ПараметрыОповещения) = Тип("Структура") Тогда
		ПараметрыОповещения.Свойство("Кнопка",Кнопка);
		ПараметрыОповещения.Свойство("мсИзмененныеНаборы",мсИзмененныеНаборы);
	КонецЕсли;
	Если ТипЗнч(Кнопка) <> Тип("КнопкаКоманднойПанели") ИЛИ Кнопка.ТипКнопки <> ТипКнопкиКоманднойПанели.Действие Тогда
		ВызватьИсключение("ОбъектБДЗаписатьИзмененныеНДЗаершение() >>> Не передана ссылка на кнопку командной панели !");
	КонецЕсли; 
	Если ТипЗнч(мсИзмененныеНаборы) <> Тип("Массив") Тогда
		ВызватьИсключение("ОбъектБДЗаписатьИзмененныеНДЗаершение() >>> Не передан массив данных для записи измененных наборов движений !");
	КонецЕсли; 
	
	// Проверяем ответ из диалога вопроса и выполняем действия.
	Если (Ответ <> КодВозвратаДиалога.ОК) Тогда
		Возврат;
	КонецЕсли;
	
	Еррор = Неопределено;
	ОбъектБДЗаписатьИзмененныеНДВыполнение(мсИзмененныеНаборы,Еррор);
	Если Еррор <> Истина Тогда
		ОбъектБДПриИзменении("ОбъектБДЗаписать"); // Обновим данные ОбъектаБД в форме, так как они могли измениться в модулях наборов записей.
		//Кнопка.Доступность = Ложь;
	КонецЕсли; 
	
КонецПроцедуры

Функция ФормаИмяФормы(Форма)
	
	ФормаИмяФормы = "";
	Если Форма <> Неопределено Тогда
		Попытка
			ФормаИмяФормы = Форма.ИмяФормы;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Возврат ФормаИмяФормы;
	
КонецФункции

Функция ОбъектТипа_ЗначениеСсылочногоТипа(ЗначениеСсылка, ПоОбъектуБД)
	
	// Создаем "облегченный" (без данных) объект обработки.
	This = Новый(ТипЗнч(ОбработкаОбъект));
	This.УправляемаяФорма = Ложь;
	// и вызываем нужный "статический" (не зависящий от данных объекта) метод.
	Если ПоОбъектуБД = Истина Тогда
		Возврат This.Метаданные().Реквизиты.ОбъектБД.Тип.СодержитТип(ТипЗнч(ЗначениеСсылка)); 
	Иначе
		Возврат This.ЗначениеСсылочногоТипа(ЗначениеСсылка);
	КонецЕсли; 
	
КонецФункции

Функция ЭтоСвязанноеОкноОбработки(Форма = Неопределено)
	
	Если Форма = Неопределено Тогда
		ПроверяемаяФорма = ЭтаФорма;
	Иначе
		ПроверяемаяФорма = Форма;
	КонецЕсли;
	Попытка
		ФормаВладелец = ПроверяемаяФорма.ВладелецФормы;
	Исключение
		ФормаВладелец = Неопределено;
	КонецПопытки;
	
	Возврат (ФормаВладелец <> Неопределено И ФормаИмяФормы(ПроверяемаяФорма) = ЭтаФорма.ИмяФормы);
	
КонецФункции

Процедура спСвязанныеОкнаПроверитьДобавить(ФормаОбработки=Неопределено, НеУдалятьЗакрытые=Ложь) Экспорт
	
	Если ТипЗнч(ЭтаФорма.спСвязанныеОкна) <> Тип("СписокЗначений") Тогда
		ЭтаФорма.спСвязанныеОкна = Новый СписокЗначений;
	КонецЕсли;
	
	ЭтоСвязанноеОкно = ЭтоСвязанноеОкноОбработки(Неопределено);
	
	ЭтаФормаЗаголовок = СтрЗаменить(ЭтаФормаЗаголовок," /+/ ",""); 
	Если ЭтоСвязанноеОкно = Ложь Тогда
		мсУдалить = Новый Массив;
		Для каждого ФормаС Из ЭтаФорма.спСвязанныеОкна Цикл
			Если ТипЗнч(ФормаС.Значение) <> ТипЗнч(ЭтаФорма) Тогда
				// Ее форма - удаляем из списка.
				мсУдалить.Добавить(ФормаС);
			ИначеЕсли ФормаС.Значение = ЭтаФорма Тогда
				// Основная форма - удаляем из списка.
				мсУдалить.Добавить(ФормаС);
			ИначеЕсли ФормаИмяФормы(ФормаС.Значение) <> ЭтаФорма.ИмяФормы Тогда
				// Не форма Администратора1С - удаляем из списка.
				мсУдалить.Добавить(ФормаС);
			ИначеЕсли НеУдалятьЗакрытые <> Истина И ФормаС.Значение.Открыта() <> Истина Тогда
				// Закрытая форма - удаляем из списка в зависимости от ситуации.
				мсУдалить.Добавить(ФормаС);
			КонецЕсли; 
		КонецЦикла;
		Для каждого ФормаС Из мсУдалить Цикл
			ЭтаФорма.спСвязанныеОкна.Удалить(ФормаС);
		КонецЦикла;
		Если ФормаОбработки <> Неопределено И ФормаИмяФормы(ФормаОбработки) = ЭтаФорма.ИмяФормы И ФормаОбработки <> ЭтаФорма Тогда
			ФормаС = ЭтаФорма.спСвязанныеОкна.НайтиПоЗначению(ФормаОбработки);
			Если ФормаС = Неопределено Тогда
				ЭтаФорма.спСвязанныеОкна.Добавить(ФормаОбработки,);
			Иначе
				ЭтаФорма.спСвязанныеОкна.Сдвинуть(ФормаС,0-спСвязанныеОкна.Индекс(ФормаС));
			КонецЕсли; 
		КонецЕсли;
	Иначе
		ЭтаФормаЗаголовок = " /+/ " + ЭтаФормаЗаголовок; 
	КонецЕсли;
	
	Если ЭтоСвязанноеОкно = Ложь Тогда
		СписокФорм = ЭтаФорма.спСвязанныеОкна;
	Иначе
		СписокФорм = ЭтаФорма.ВладелецФормы.спСвязанныеОкна;
	КонецЕсли;
	
	КнопкиМеню = ЭлементыФормы.ОсновныеДействияФормы.Кнопки.МенюОкнаОбработки.Кнопки;
	КнопкиМеню.ПерейтиВСвязанноеОкно.Доступность = (СписокФорм.Количество() > 0);
	КнопкиМеню.ЗакрытьСвязанныеОкна.Доступность = (СписокФорм.Количество() > 0);
	
КонецПроцедуры

Функция СписокСвязанныхФормПолучить(СписокФорм, ФормаТ, ВключитьОсновное, УдалитьЗакрытые)
	
	ЭтоСвязанноеОкно = ЭтоСвязанноеОкноОбработки(Неопределено);
	ФормаТ = Неопределено;
	СписокФорм = Новый СписокЗначений;
	Если ЭтоСвязанноеОкно = Ложь Тогда
		Если ВключитьОсновное = Истина Тогда
			Представление = Строка(ЭтаФорма.ОбъектБД); 
			Представление = ?(ПустаяСтрока(Представление),"< . . . >",Представление);
			СписокФорм.Добавить(ЭтаФорма,Представление);
		КонецЕсли; 
		ЭтаФорма.спСвязанныеОкнаПроверитьДобавить(Неопределено,УдалитьЗакрытые<>Истина);
		Для каждого ФормаС Из ЭтаФорма.спСвязанныеОкна Цикл
			Представление = Строка(ФормаС.Значение.ОбъектБД);
			Представление = ?(ПустаяСтрока(Представление),"< . . . >",Представление);
			СписокФорм.Добавить(ФормаС.Значение,Представление);
		КонецЦикла; 
	Иначе
		Если ВключитьОсновное = Истина Тогда
			Представление = Строка(ЭтаФорма.ВладелецФормы.ОбъектБД);
			Представление = ?(ПустаяСтрока(Представление),"< . . . >",Представление);
			СписокФорм.Добавить(ЭтаФорма.ВладелецФормы,Представление);
		КонецЕсли; 
		ЭтаФорма.ВладелецФормы.спСвязанныеОкнаПроверитьДобавить(Неопределено,УдалитьЗакрытые<>Истина);
		Для каждого ФормаС Из ЭтаФорма.ВладелецФормы.спСвязанныеОкна Цикл
			Представление = Строка(ФормаС.Значение.ОбъектБД);
			Представление = ?(ПустаяСтрока(Представление),"< . . . >",Представление);
			СписокФорм.Добавить(ФормаС.Значение,Представление);
		КонецЦикла; 
	КонецЕсли;
	
	Меню = Новый СписокЗначений;
	КартинкаНулл = Новый Картинка;
	Для каждого ФормаС Из СписокФорм Цикл
		ФормаМ = Меню.Добавить();
		ФормаМ.Значение = СписокФорм.Индекс(ФормаС);
		ФормаМ.Представление = "" + ФормаМ.Значение + ": " + ФормаС.Представление;
		ФормаМ.Картинка = ФормаС.Картинка;
		Если ФормаС.Значение = ЭтаФорма Тогда
			ФормаМ.Картинка = БиблиотекаКартинок.Вперед;
			ФормаТ = ФормаМ;
		ИначеЕсли ЭтоСвязанноеОкно = Истина И ФормаС.Значение = ЭтаФорма.ВладелецФормы Тогда
			ФормаМ.Картинка = БиблиотекаКартинок.ВводНаОсновании;
		ИначеЕсли ФормаС.Значение.Открыта() = Ложь Тогда
			ФормаМ.Картинка = БиблиотекаКартинок.Удалить;
		Иначе
			ФормаМ.Картинка = КартинкаНулл;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат Меню;
	
КонецФункции

Функция НайтиОбъектВСвязанныхОкнах(Знач ОбъектСсылка,ВключаяОсновноеОкно,ЭтоСвязанноеОкно)
	
	Если ЗначениеЗаполнено(ОбъектСсылка) = Ложь Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если ТипЗнч(ЭтоСвязанноеОкно) <> Тип("Булево") Тогда
		ЭтоСвязанноеОкно = ЭтоСвязанноеОкноОбработки(Неопределено);
	КонецЕсли; 
	ФормаОбработки = Неопределено;
	Если ЭтоСвязанноеОкно = Ложь Тогда
		ОсновноеОкно = ЭтаФорма;
	Иначе
		ОсновноеОкно = ЭтаФорма.ВладелецФормы;
	КонецЕсли;
	Если ВключаяОсновноеОкно = Истина И ОсновноеОкно.ОбработкаОбъект.ОбъектБД = ОбъектСсылка Тогда
		Возврат ОсновноеОкно;
	КонецЕсли; 
	
	СписокФорм = ОсновноеОкно.спСвязанныеОкна;
	Если ТипЗнч(СписокФорм) = Тип("СписокЗначений") Тогда
		Для Каждого ФормаС ИЗ СписокФорм Цикл
			Если ТипЗнч(ФормаС.Значение) = ТипЗнч(ЭтаФорма) И ФормаС.Значение.ОбработкаОбъект.ОбъектБД = ОбъектСсылка Тогда
				ФормаОбработки = ФормаС.Значение;
				Прервать;
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;
	
	Возврат ФормаОбработки;
	
КонецФункции

Процедура НовоеОкноАдминистатора1С(ОткрытьСвязанноеОкно, ОбъектСсылка) Экспорт
	
	ИмяФормыОбработки = Настройки.ИмяФормыОбработки;
	Если ИмяФормыОбработки = Неопределено Тогда
		ПредупреждениеСообщение(,"Форма обработки ""Обычная"" не найдена.");
		Возврат;
	КонецЕсли;
	
	ХранилищеНастроекДанныхФорм.Сохранить(ИмяФормы, "ОбъектБД.СписокВыбора", ЭлементыФормы.ОбъектБД.СписокВыбора.ВыгрузитьЗначения());
	
	ЭтоСвязанноеОкно = ЭтоСвязанноеОкноОбработки(Неопределено);
	
	ФормаОбработки = Неопределено;
	Если ОткрытьСвязанноеОкно = Истина И ЗначениеЗаполнено(ОбъектСсылка) Тогда
		// Не дадим один и тот же объект открыть несколько раз в разных связанных окнах.
		ФормаОбработки = НайтиОбъектВСвязанныхОкнах(ОбъектСсылка,Ложь,ЭтоСвязанноеОкно);
	КонецЕсли; 
	
	Если ФормаОбработки = Неопределено Тогда
		Если ЗначениеЗаполнено(ОбъектСсылка) Тогда
			стПараметры = Новый Структура("ОбъектБД", ОбъектСсылка);
		Иначе
			стПараметры = Новый Структура("ОбъектБД", ОбъектБД);
		КонецЕсли;
		Если ОткрытьСвязанноеОкно = Истина Тогда
			ФормаОбработкиВладелец = ?(ЭтоСвязанноеОкно = Ложь, ЭтаФорма, ЭтаФорма.ВладелецФормы);
		Иначе
			ФормаОбработкиВладелец = Неопределено;
		КонецЕсли; 
		Попытка
			ОбработкаОбъект1 = Новый(ТипЗнч(ОбработкаОбъект));
			ОбработкаОбъект1.ОбъектБД = стПараметры.ОбъектБД;
			ФормаОбработки = ОбработкаОбъект1.ПолучитьФорму(ИмяФормыОбработки, ФормаОбработкиВладелец, Новый УникальныйИдентификатор);
		Исключение
			Сообщить(ОписаниеОшибки(),СтатусСообщения.Информация);
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	Если ФормаОбработки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ОткрытьСвязанноеОкно = Истина Тогда
		Если ЭтоСвязанноеОкно = Ложь Тогда
			ЭтаФорма.спСвязанныеОкнаПроверитьДобавить(ФормаОбработки,Истина);
		Иначе
			ЭтаФорма.ВладелецФормы.спСвязанныеОкнаПроверитьДобавить(ФормаОбработки,Истина);
			ЭтаФорма.спСвязанныеОкнаПроверитьДобавить(Неопределено,Истина);
		КонецЕсли; 
	КонецЕсли;

	ФормаОбработки.ЗакрыватьПриЗакрытииВладельца = Истина;
	ФормаОбработки.Открыть();	   
	
КонецПроцедуры
	
Процедура ОсновныеДействияФормыНовоеОкно(Кнопка)
	
	Попытка
		КнопкаИмя = Кнопка.Имя;
	Исключение
		КнопкаИмя = "";
	КонецПопытки;
	ОткрытьСвязанноеОкно = (КнопкаИмя = "НовоеСвязанноеОкно");
	
	НовоеОкноАдминистатора1С(ОткрытьСвязанноеОкно,Неопределено);
	
КонецПроцедуры

Процедура ОсновныеДействияФормыПерейтиВСвязанноеОкно(Кнопка)
	Перем Оповещение;
	Перем ПараметрыОповещенияОЗавершении;
	Перем СписокФорм, ФормаТ;
	
	Меню = СписокСвязанныхФормПолучить(СписокФорм,ФормаТ,Истина,Ложь);
	Если Меню.Количество() <= 0 Тогда
		КнопкиМеню = ЭлементыФормы.ОсновныеДействияФормы.Кнопки.МенюОкнаОбработки.Кнопки;
		КнопкиМеню.ПерейтиВСвязанноеОкно.Доступность = Ложь;
		Возврат;
	КонецЕсли;
	
	ТекстЗаголовка = "ПЕРЕХОД В СВЯЗАННОЕ ОКНО ОБРАБОТКИ";
	
	ПараметрыОповещенияОЗавершении = Новый Структура("Кнопка,СписокФорм,ФормаТ",Кнопка,СписокФорм,ФормаТ);
	
	Если ИспользоватьРежимМодальности() Тогда
		// Стандартно в модальном режиме (8.2/8.3) с обработкой результата.
		ФормаМ = Меню.ВыбратьЭлемент(ТекстЗаголовка,ФормаТ);
		ОсновныеДействияФормыПерейтиВСвязанноеОкноЗавершение(ФормаМ, ПараметрыОповещенияОЗавершении);
	Иначе
		// Стандартно в немодальном режиме (8.3) с обработкой результата.
		Оповещение = Вычислить("Новый ОписаниеОповещения(""ОсновныеДействияФормыПерейтиВСвязанноеОкноЗавершение"", ЭтаФорма, ПараметрыОповещенияОЗавершении)");
		Выполнить("Меню.ПоказатьВыборЭлемента(Оповещение, ТекстЗаголовка, ФормаТ)");
	КонецЕсли;
	
КонецПроцедуры
 
Процедура ОсновныеДействияФормыПерейтиВСвязанноеОкноЗавершение(ФормаМ, ПараметрыОповещения) Экспорт
	Перем Кнопка, СписокФорм, ФормаТ;
	
	// Считываем и проверяем значения параметров оповещения о выборе в диалоге.
	Если ТипЗнч(ПараметрыОповещения) = Тип("Структура") Тогда
		ПараметрыОповещения.Свойство("Кнопка",Кнопка);
		ПараметрыОповещения.Свойство("СписокФорм",СписокФорм);
		ПараметрыОповещения.Свойство("ФормаТ",ФормаТ);
	КонецЕсли;
	Если ТипЗнч(Кнопка) <> Тип("КнопкаКоманднойПанели") ИЛИ Кнопка.ТипКнопки <> ТипКнопкиКоманднойПанели.Действие Тогда
		ВызватьИсключение("ОсновныеДействияФормыПерейтиВСвязанноеОкноЗавершение() >>> Не передана ссылка на кнопку командной панели !");
	КонецЕсли; 
	Если ТипЗнч(СписокФорм) <> Тип("СписокЗначений") Тогда
		ВызватьИсключение("ОсновныеДействияФормыПерейтиВСвязанноеОкноЗавершение() >>> Не передан список связанных окон обработки !");
	КонецЕсли; 
	
	// Проверяем ответ диалога выбора значения списка и выполняем действия.
	Если ФормаМ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ФормаТ = Неопределено ИЛИ ФормаТ.Значение <> ФормаМ.Значение Тогда
		СписокФорм[ФормаМ.Значение].Значение.Открыть(); 
	КонецЕсли;
	
КонецПроцедуры

Процедура ОсновныеДействияФормыЗакрытьСвязанныеОкна(Кнопка)
	Перем Оповещение;
	Перем ПараметрыОповещенияОЗавершении;
	Перем СписокФорм;
	
	Меню = СписокСвязанныхФормПолучить(СписокФорм,,Ложь,Ложь);
	Если Меню.Количество() <= 0 Тогда
		КнопкиМеню = ЭлементыФормы.ОсновныеДействияФормы.Кнопки.МенюОкнаОбработки.Кнопки;
		КнопкиМеню.ЗакрытьСвязанныеОкна.Доступность = Ложь;
		Возврат;
	КонецЕсли;
	Меню.ЗаполнитьПометки(Ложь);
	
	ТекстЗаголовка = "ЗАКРЫТИЕ СВЯЗАННЫХ ОКОН ОБРАБОТКИ";
		
	ПараметрыОповещенияОЗавершении = Новый Структура("Кнопка,СписокФорм,Меню",Кнопка,СписокФорм,Меню);
	
	Если ИспользоватьРежимМодальности() Тогда
		// Стандартно в модальном режиме (8.2/8.3) с обработкой результата.
		ВыборОК = Меню.ОтметитьЭлементы(ТекстЗаголовка);
		ОсновныеДействияФормыЗакрытьСвязанныеОкнаЗавершение(ВыборОК, ПараметрыОповещенияОЗавершении);
	Иначе
		// Стандартно в немодальном режиме (8.3) с обработкой результата.
		Оповещение = Вычислить("Новый ОписаниеОповещения(""ОсновныеДействияФормыЗакрытьСвязанныеОкнаЗавершение"", ЭтаФорма, ПараметрыОповещенияОЗавершении)");
		Выполнить("Меню.ПоказатьОтметкуЭлементов(Оповещение, ТекстЗаголовка)");
	КонецЕсли;
		
КонецПроцедуры

Процедура ОсновныеДействияФормыЗакрытьСвязанныеОкнаЗавершение(Ответ, ПараметрыОповещения) Экспорт
	Перем Кнопка, СписокФорм, Меню;
	
	// Считываем и проверяем значения параметров оповещения о выборе в диалоге.
	Если ТипЗнч(ПараметрыОповещения) = Тип("Структура") Тогда
		ПараметрыОповещения.Свойство("Кнопка",Кнопка);
		ПараметрыОповещения.Свойство("СписокФорм",СписокФорм);
		ПараметрыОповещения.Свойство("Меню",Меню);
	КонецЕсли;
	Если ТипЗнч(Кнопка) <> Тип("КнопкаКоманднойПанели") ИЛИ Кнопка.ТипКнопки <> ТипКнопкиКоманднойПанели.Действие Тогда
		ВызватьИсключение("ОсновныеДействияФормыЗакрытьСвязанныеОкнаЗавершение() >>> Не передана ссылка на кнопку командной панели !");
	КонецЕсли; 
	Если ТипЗнч(СписокФорм) <> Тип("СписокЗначений") Тогда
		ВызватьИсключение("ОсновныеДействияФормыЗакрытьСвязанныеОкнаЗавершение() >>> Не передан список связанных окон обработки !");
	КонецЕсли; 
	Если ТипЗнч(Меню) <> Тип("СписокЗначений") Тогда
		ВызватьИсключение("ОсновныеДействияФормыЗакрытьСвязанныеОкнаЗавершение() >>> Не передан список меню выбора связанных окон обработки !");
	КонецЕсли;
	
	// Проверяем ответ диалога отметки значений списка и выполняем действия.
	Если Ответ = Истина Тогда
		// Выбор в модальном диалоге.
		МенюОтметки = Меню;
	ИначеЕсли Ответ = Ложь Тогда
		// Отказ в модальном диалоге.
		Возврат;
	ИначеЕсли  Ответ = Неопределено Тогда
		// Отказ в асинхронном диалоге.
		Возврат;
	Иначе
		// Выбор в асинхронном диалоге.
		МенюОтметки = Ответ;
	КонецЕсли;
	
	Для Каждого ФормаМ ИЗ МенюОтметки Цикл
		Если ФормаМ.Пометка Тогда
			Если СписокФорм[ФормаМ.Значение].Значение.Открыта() Тогда
				СписокФорм[ФормаМ.Значение].Значение.Закрыть(); 
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;
	
	Если ЭтоСвязанноеОкноОбработки(Неопределено) = Ложь Тогда
		ЭтаФорма.спСвязанныеОкнаПроверитьДобавить(Неопределено,Ложь);
	Иначе
		ЭтаФорма.ВладелецФормы.спСвязанныеОкнаПроверитьДобавить(Неопределено,Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура ТаблицыТабличныхЧастейКонтрольВидимости()
	
	ТабИмя = ФормаПолучитьИмяРеквизитаТабличнаяЧасть("");
	ТабИмяДлина = СтрДлина(ТабИмя);
	Для Каждого Элемент ИЗ ЭлементыФормы Цикл
		Если ТипЗнч(Элемент) = Тип("ТабличноеПоле") И Лев(Элемент.Имя,ТабИмяДлина) = ТабИмя Тогда
			// имя панели с таблицами табличных частей - фиксированная
			ПанельИмя = "СтраницыГруппаТЧ";
			ТабЧастьИмя = Сред(Элемент.Имя,ТабИмяДлина+1);
			ПанельСтраница = ЭлементыФормы[ПанельИмя].Страницы[ФормаПолучитьИмяРеквизитаТабличнаяЧасть(ТабЧастьИмя)];
			Если СкрыватьПустыеТабличныеЧасти = Истина Тогда
				Если ПанельСтраница.Видимость = Истина И Элемент.Значение.Количество() = 0 Тогда
					ПанельСтраница.Видимость = Ложь;
				КонецЕсли; 
			Иначе
				Если ПанельСтраница.Видимость = Ложь Тогда
					ПанельСтраница.Видимость = Истина;
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ТаблицыДвиженийРегистровКонтрольВидимости()
	
	ТабИмя = ФормаПолучитьИмяРеквизитаРегистр("");
	ТабИмяДлина = СтрДлина(ТабИмя);
	Для Каждого Элемент ИЗ ЭлементыФормы Цикл
		Если ТипЗнч(Элемент) = Тип("ТабличноеПоле") И Лев(Элемент.Имя,ТабИмяДлина) = ТабИмя Тогда
			// имя панели с таблицей движений храним в подсказке Подменю, выбранного в атрибуте "КонтекстноеМеню"
			ПанельИмя = Элемент.КонтекстноеМеню.Подсказка;
			РегистрИмя = Сред(Элемент.Имя,ТабИмяДлина+1);
			ПанельСтраница = ЭлементыФормы[ПанельИмя].Страницы[ФормаПолучитьИмяРеквизитаРегистр(РегистрИмя)];
			Если СкрыватьПустыеТаблицыДвиженийРегистров = Истина Тогда
				Если ПанельСтраница.Видимость = Истина И Элемент.Значение.Количество() = 0 Тогда
					ПанельСтраница.Видимость = Ложь;
				КонецЕсли; 
			Иначе
				Если ПанельСтраница.Видимость = Ложь Тогда
					ПанельСтраница.Видимость = Истина;
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

Процедура СкрыватьПустыеТабличныеЧастиПриИзменении(Элемент)
	ТаблицыТабличныхЧастейКонтрольВидимости();
КонецПроцедуры

Процедура СкрыватьПустыеТаблицыДвиженийРегистровПриИзменении(Элемент)
	ТаблицыДвиженийРегистровКонтрольВидимости();
КонецПроцедуры

Процедура ТФормаКолонкаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь; // Всегда нестандартная обработка.
	ТекЗначение = Элемент.Значение;
	Если ЗначениеЗаполнено(ТекЗначение) И ЗначениеСсылочногоТипа(ТекЗначение) Тогда
		ТФормаКолонкаОткрытьЗначение(Элемент, СтандартнаяОбработка, ТекЗначение); 
	КонецЕсли;
	
КонецПроцедуры

Процедура ТФормаКолонкаОткрытьЗначение(Элемент, СтандартнаяОбработка, ТекЗначение)
	Перем Оповещение;
	Перем ПараметрыОповещенияОЗавершении;
	
	Если ЗначениеЗаполнено(ТекЗначение) И ОбъектТипа_ЗначениеСсылочногоТипа(ТекЗначение,Истина) Тогда
		СтандартнаяОбработка = Ложь;
		
		Меню = Новый СписокЗначений;
		Меню.Добавить(0, "Открыть в форме объекта"		, , БиблиотекаКартинок.Лупа);
		Меню.Добавить(1, "Открыть в 1С:Администраторе"	, , БиблиотекаКартинок.Изменить);
		
		ПараметрыОповещенияОЗавершении = 
		Новый Структура("Элемент,ТекЗначение", Элемент, ТекЗначение);
		
		Если ИспользоватьРежимМодальности() Тогда
			// Стандартно в модальном режиме (8.2/8.3) с обработкой результата.
			Выбор = ЭтаФорма.ВыбратьИзМеню(Меню, Элемент);
			ТФормаКолонкаОткрытьЗначениеЗавершение(Выбор, ПараметрыОповещенияОЗавершении);
		Иначе
			// Стандартно в немодальном режиме (8.3) с обработкой результата.
			// Нет у обычной формы асинхронного метода ВыбратьИзМеню(), но модальный метод вполне работает!
			Выбор = ЭтаФорма.ВыбратьИзМеню(Меню, Элемент);
			ТФормаКолонкаОткрытьЗначениеЗавершение(Выбор, ПараметрыОповещенияОЗавершении);
			//Оповещение = Вычислить("Новый ОписаниеОповещения(""ТФормаКолонкаОткрытьЗначениеЗавершение"", ЭтаФорма, ПараметрыОповещенияОЗавершении)");
			//Выполнить("ЭтаФорма.ПоказатьВыборИзМеню(Оповещение, Меню, Элемент)");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ТФормаКолонкаОткрытьЗначениеЗавершение(Выбор, ПараметрыОповещения) Экспорт
	Перем Элемент, ТекЗначение;
	
	// Считываем и проверяем значения параметров оповещения о выборе в диалоге.
	Если ТипЗнч(ПараметрыОповещения) = Тип("Структура") Тогда
		ПараметрыОповещения.Свойство("Элемент", Элемент);
		ПараметрыОповещения.Свойство("ТекЗначение", ТекЗначение);
	КонецЕсли;
	
	Если Элемент = Неопределено Тогда
		ВызватьИсключение("ТФормаКолонкаОткрытиеЗавершение() >>> Не передана ссылка на элемент колонки табличного поля формы !");
	КонецЕсли; 
	
	// Проверяем ответ диалога выбора значений списка и выполняем действия.
	Если Выбор = Неопределено Тогда
		Возврат;
	ИначеЕсли Выбор.Значение = 1 Тогда
		НовоеОкноАдминистатора1С(Истина,ТекЗначение);
	Иначе
		Попытка
			// По-возможности используем асинхронный метод.
			Выполнить("ПоказатьЗначение(, ТекЗначение);");
		Исключение
			ОткрытьЗначение(ТекЗначение);
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

Процедура ТФормаТаблицаВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Истина;
	Если Элемент.ТолькоПросмотр = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ТабИмяРГ = ФормаПолучитьИмяРеквизитаРегистр("");
	ТабИмяРГДлина = СтрДлина(ТабИмяРГ);
	ТабИмяТЧ = ФормаПолучитьИмяРеквизитаТабличнаяЧасть("");
	ТабИмяТЧДлина = СтрДлина(ТабИмяТЧ);
	
	Если Лев(Элемент.Имя,ТабИмяРГДлина) = ТабИмяРГ Тогда
		// Таблица движений регистра.
	ИначеЕсли Лев(Элемент.Имя,ТабИмяТЧДлина) = ТабИмяТЧ Тогда
		// Таблица табличной части объекта.
	Иначе
		Возврат;
	КонецЕсли;
	
	ТекЗначение = ВыбраннаяСтрока[Колонка.Имя];
	Если ЗначениеЗаполнено(ТекЗначение) И ОбъектТипа_ЗначениеСсылочногоТипа(ТекЗначение,Ложь) Тогда
		ТФормаКолонкаОткрытьЗначение(Элемент, СтандартнаяОбработка, ТекЗначение); 
	КонецЕсли;
	
КонецПроцедуры

Процедура yuraosИнициализация(ОткрытаЗакрытаяФорма)
	
	Если ФормаИнициализирована = Истина Тогда
		ОткрытаЗакрытаяФорма = Истина;
		Возврат;
	КонецЕсли;
	
	// Добавим скрытую служебную станицу панели формы.
	Панель.РаспределятьПоСтраницам = Истина;
	Страница = Панель.Страницы.Добавить("СлужебнаяСкрытая", "Служебная (скрытая)");
	Панель.ТекущаяСтраница = Страница;
	
	// Добавим командную панель для контекстных меню и разместим ее на скрытой служебной станице панели формы.
	ПанельМеню = ЭлементыФормы.Добавить(Тип("КоманднаяПанель"), "СлужебнаяКонтМеню", Истина, Панель);
	ГруппаМеню0 = ПанельМеню.Кнопки.Добавить("КонтМенюМенюВсе", ТипКнопкиКоманднойПанели.Подменю, "Конт.меню");
	ГруппаМеню1 = ГруппаМеню0.Кнопки.Добавить("КонтМенюТаблицыДвижений", ТипКнопкиКоманднойПанели.Подменю, "Таблицы движений документов");
	Панель.ОтображениеЗакладок = ОтображениеЗакладок.НеИспользовать;
	Страница.Видимость = Ложь;
	Панель.ТекущаяСтраница = Панель.Страницы[0];
	
	// Наведем небольшой фэншуй (не принципиально).
	КнопкиОД = ЭлементыФормы.ОсновныеДействияФормы.Кнопки;
	КнопкиОД.кнЗаписать.КнопкаПоУмолчанию = Истина;
	КнопкиОД.кнНастройки.Картинка = БиблиотекаКартинок.НастройкаСписка;
	
	// Установим/переустановим действия для некоторых элементов формы.
	// 1. "ОбработкаВыбора","Очистка" для поля ввода "ОбъектБД".
	Поле = ЭлементыФормы.ОбъектБД;
	Поле.КнопкаОчистки = Истина;
	Поле.УстановитьДействие("ОбработкаВыбора", Новый Действие("ОбъектБДОбработкаВыбора"));
	Поле.УстановитьДействие("Очистка", Новый Действие("ОбъектБДОчисткаМеню"));
	// 2. "ПриИзменении" для флагов скрытия пустых табличных полей.
	Флаг = ЭлементыФормы.СкрыватьПустыеТабличныеЧасти;
	Флаг.УстановитьДействие("ПриИзменении", Новый Действие("СкрыватьПустыеТабличныеЧастиПриИзменении"));
	Флаг = ЭлементыФормы.СкрыватьПустыеТаблицыДвиженийРегистров;
	Флаг.УстановитьДействие("ПриИзменении", Новый Действие("СкрыватьПустыеТаблицыДвиженийРегистровПриИзменении"));
	
	// Добавим кнопки команд для расширения функциональности.
	Кнопка = КнопкиОД.пмПроведение.Кнопки.Добавить("кнОМЗаписатьИзмененныеНаборыДвижений",ТипКнопкиКоманднойПанели.Действие);
	Кнопка.Действие = Новый Действие("ОбъектБДЗаписатьИзмененныеНД");
	Кнопка.Текст = "Записать измененные наборы движений";
	Кнопка.Подсказка = "Записать измененные наборы движений документа в базу";
	Кнопка.Пояснение = Кнопка.Подсказка;
	Кнопка.Отображение = ОтображениеКнопкиКоманднойПанели.НадписьКартинка; 
	Кнопка.ИзменяетДанные = Ложь;
	Кнопка.Доступность = Ложь; // Изначально таблицы наборов движений не доступны для изменения.
	Кнопка.Картинка = БиблиотекаКартинок.СохранитьЗначения;
		
	Индекс = КнопкиОД.Индекс(КнопкиОД.кнНастройки);
	ГруппаКнопок = КнопкиОД.Вставить(Индекс + 1, "МенюОкнаОбработки", ТипКнопкиКоманднойПанели.Подменю, "Окна обработки");
	ГруппаКнопок.Пояснение = "Действия с окнами обработки";
	ГруппаКнопок.Подсказка = ГруппаКнопок.Пояснение;
	ГруппаКнопок.Картинка = БиблиотекаКартинок.ВводНаОсновании;
	ГруппаКнопок.Отображение = ОтображениеКнопкиКоманднойПанели.НадписьКартинка;
	
	Кнопка = ГруппаКнопок.Кнопки.Добавить("НовоеСвязанноеОкно", ТипКнопкиКоманднойПанели.Действие, "Открыть новое связанное окно");
	Кнопка.Действие = Новый Действие("ОсновныеДействияФормыНовоеОкно");
	Кнопка.Пояснение = "Открыть новое связанное окно обработки";
	Кнопка.Подсказка = Кнопка.Пояснение;
	Кнопка.Картинка = БиблиотекаКартинок.ВводНаОсновании;
	Кнопка.Отображение = ОтображениеКнопкиКоманднойПанели.НадписьКартинка;
	
	Кнопка = ГруппаКнопок.Кнопки.Добавить("ПерейтиВСвязанноеОкно", ТипКнопкиКоманднойПанели.Действие, "Перейти в связанное окно");
	Кнопка.Действие = Новый Действие("ОсновныеДействияФормыПерейтиВСвязанноеОкно");
	Кнопка.Пояснение = "Перейти в связанное окно обработки";
	Кнопка.Подсказка = Кнопка.Пояснение;
	Кнопка.Картинка = БиблиотекаКартинок.Вперед;
	Кнопка.Отображение = ОтображениеКнопкиКоманднойПанели.НадписьКартинка;
	
	Кнопка = ГруппаКнопок.Кнопки.Добавить("ЗакрытьСвязанныеОкна", ТипКнопкиКоманднойПанели.Действие, "Закрыть связанные окна");
	Кнопка.Действие = Новый Действие("ОсновныеДействияФормыЗакрытьСвязанныеОкна");
	Кнопка.Пояснение = "Закрыть связанные окна обработки";
	Кнопка.Подсказка = Кнопка.Пояснение;
	Кнопка.Картинка = БиблиотекаКартинок.Закрыть;
	Кнопка.Отображение = ОтображениеКнопкиКоманднойПанели.НадписьКартинка;
	
	Кнопка = ГруппаКнопок.Кнопки.Добавить("НовоеОкноРазделитель", ТипКнопкиКоманднойПанели.Разделитель, );
	Кнопка = ГруппаКнопок.Кнопки.Добавить("НовоеОкно", ТипКнопкиКоманднойПанели.Действие, "Открыть новое независимое окно");
	Кнопка.Действие = Новый Действие("ОсновныеДействияФормыНовоеОкно");
	Кнопка.Пояснение = "Открыть новое независимое окно обработки";
	Кнопка.Подсказка = Кнопка.Пояснение;
	Кнопка.Картинка = БиблиотекаКартинок.НовоеОкно;
	Кнопка.Отображение = ОтображениеКнопкиКоманднойПанели.НадписьКартинка;
	
	ФормаИнициализирована = Истина;
	
КонецПроцедуры

ИмяФормы = ЭтотОбъект.Метаданные().ПолноеИмя() + ".Форма.Обычная";
//+yuraos, 10.09.2015

СтрокаРавно = "================================================================================================================================================================";

НовыйТипОбъектаБД				= Истина;
СчетчикОбновленийФормы			= 0;
СчетчикСообщенийПриОбновлении	= 0;

ПоказыватьСообщения 			= Ложь;
ВыполнятьВТранзакции 			= Истина;
ЭтаФормаЗаголовок				= ЭтаФорма.Заголовок;
