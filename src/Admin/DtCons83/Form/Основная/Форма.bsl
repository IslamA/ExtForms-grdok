
#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если ЗначениеЗаполнено(Объект.ПолноеИмяФайла) Тогда
		Попытка
			ПрочитатьИзФайла(Объект.ПолноеИмяФайла);
		Исключение
			Объект.ПолноеИмяФайла = "";
		КонецПопытки;
	КонецЕсли;
	УстановитьСтраницуКода(?(ЗначениеЗаполнено(СтраницаКода), СтраницаКода, "КодЗапроса"));
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	Если Не ЗакрытиеФормы И Модифицированность Тогда
		Оповещение = Новый ОписаниеОповещения("СохранитьИОбработатьФорму", ЭтаФорма, "ЗАКРЫТЬ");
		ПоказатьВопрос(Оповещение, НСтр("ru='Сохранить изменения алгоритмов?'"), РежимДиалогаВопрос.ДаНетОтмена);
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	Сообщения = Новый Массив;
	
	Шаблон = "Задайте имя алгоритму";
	Для Каждого Алгоритм Из ЭтотОбъект.Алгоритмы Цикл
		Если Не ЗначениеЗаполнено(Алгоритм.Имя) Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = Шаблон;
			Сообщение.Поле = "Алгоритмы[" + Алгоритм.ПолучитьИдентификатор() + "].Имя";
			Сообщения.Добавить(Сообщение);
		КонецЕсли;
	КонецЦикла;
	
	Шаблон = "Задайте имя значению параметров данных";
	Для Каждого Значение Из ЭтотОбъект.Значения Цикл
		Если Не ЗначениеЗаполнено(Значение.Имя) Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = Шаблон;
			Сообщение.Поле = "Значения[" + Значение.ПолучитьИдентификатор() + "].Имя";
			Сообщения.Добавить(Сообщение);
		КонецЕсли;
	КонецЦикла;
	
	Отказ = Сообщения.Количество() > 0;
	Для Каждого Сообщение Из Сообщения Цикл
		Сообщение.Сообщить();
	КонецЦикла;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиТаблицыАлгоритмы

&НаКлиенте
Процедура АлгоритмыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.УИД = Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
	УстановитьОтборЗначений();
КонецПроцедуры

&НаКлиенте
Процедура АлгоритмыПриИзменении(Элемент)
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	АлгоритмыОбновитьФлагиСтроки(Элемент.ТекущиеДанные);
	УстановитьЗаголовокФормы();
КонецПроцедуры

&НаКлиенте
Процедура АлгоритмыКодПриИзменении(Элемент)
	Если Элементы.Алгоритмы.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	АлгоритмыОбновитьФлагиСтроки(Элементы.Алгоритмы.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура АлгоритмыПриАктивизацииСтроки(Элемент)
	УстановитьЗаголовокФормы();
	УстановитьОтборЗначений();
КонецПроцедуры

&НаКлиенте
Процедура АлгоритмыПриАктивизацииЯчейки(Элемент)
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Поле = Элемент.ТекущийЭлемент;
	Если Поле = Элементы.АлгоритмыЕстьКодЗапроса Или Поле = Элементы.АлгоритмыКодЗапроса Тогда
		УстановитьСтраницуКода("КодЗапроса");
	ИначеЕсли Поле = Элементы.АлгоритмыЕстьКодКлиента1С Или Поле = Элементы.АлгоритмыКодКлиента1С Тогда
		УстановитьСтраницуКода("КодКлиента1С");
	ИначеЕсли Поле = Элементы.АлгоритмыЕстьКодСервера1С Или Поле = Элементы.АлгоритмыКодСервера1С Тогда
		УстановитьСтраницуКода("КодСервера1С");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АлгоритмыПередУдалением(Элемент, Отказ)
	УИДы = Новый Соответствие;
	Строки = Элемент.ВыделенныеСтроки;
	Для Каждого Строка Из Строки Цикл
		УИД = ЭтотОбъект.Алгоритмы.НайтиПоИдентификатору(Строка).УИД;
		УИДы.Вставить(УИД, УИД);
	КонецЦикла;
	
	Удаляемые = Новый Массив;
	Для Счетчик = -(ЭтотОбъект.Значения.Количество() - 1) По 0 Цикл
		Значение = ЭтотОбъект.Значения[-Счетчик];
		Если УИДы[Значение.АлгоритмУИД] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Удаляемые.Добавить(Значение);
	КонецЦикла;
	
	Для Каждого Удаляемое Из Удаляемые Цикл
		ЭтотОбъект.Значения.Удалить(Удаляемое);
	КонецЦикла;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура АлгоритмыОбновитьФлагиСтроки(СтрокаАлгоритма)
	СтрокаАлгоритма.ЕстьКодЗапроса = ЗначениеЗаполнено(СтрокаАлгоритма.КодЗапроса);
	СтрокаАлгоритма.ЕстьКодКлиента1С = ЗначениеЗаполнено(СтрокаАлгоритма.КодКлиента1С);
	СтрокаАлгоритма.ЕстьКодСервера1С = ЗначениеЗаполнено(СтрокаАлгоритма.КодСервера1С);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура АлгоритмыОбновитьВсеФлаги(Алгоритмы)
	Для Каждого Алгоритм Из Алгоритмы Цикл
		АлгоритмыОбновитьФлагиСтроки(Алгоритм);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СтраницыКодаПриСменеСтраницы(Элемент, ТекущаяСтраница)
	УстановитьСтраницуКода(ТекущаяСтраница.Имя);
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиТаблицыВыгрузка

&НаКлиенте
Процедура ВыгрузкаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Данные = Элемент.ДанныеСтроки(ВыбраннаяСтрока);
	ИмяПоля = СтрЗаменить(Поле.Имя, Элемент.Имя, "");
	ПоказатьЗначение(, Данные[ИмяПоля]);
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузкаОчистить(Команда)
	Выгрузка.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ЯчейкаТипЗначения(Команда)
	Элемент = Элементы.Выгрузка;
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ИмяПоля = СтрЗаменить(Элемент.ТекущийЭлемент.Имя, Элемент.Имя, "");
	Сообщить(ИмяПоля + ": " + ТипЗнч(Элемент.ТекущиеДанные[ИмяПоля]));
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиТаблицыЗначения

&НаКлиенте
Процедура ЗначенияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Алгоритм = Элементы.Алгоритмы.ТекущиеДанные;
	Если НоваяСтрока И Не Копирование И Алгоритм <> Неопределено Тогда
		Элемент.ТекущиеДанные.АлгоритмУИД = Алгоритм.УИД;
	КонецЕсли;
	Элементы.ЗначенияЗначение.ВыбиратьТип = (Элемент.ТекущиеДанные.Значение = Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если НоваяСтрока И Не ОтменаРедактирования Тогда
		Если Не ЗначениеЗаполнено(Элемент.ТекущиеДанные.Имя) Тогда
			Элемент.ТекущиеДанные.Имя = "Значение" + Формат(Элемент.ТекущаяСтрока, "ЧГ=; ЧН=0");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияЗначениеОчистка(Элемент, СтандартнаяОбработка)
	Значение = Элементы.Значения.ТекущиеДанные;
	Если Значение <> Неопределено Тогда
		Значение.Значение = Неопределено;
		Элемент.ВыбиратьТип = Истина;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область КомандыОбработкиКода

&НаКлиенте
Функция ТекущийРедактор()
	ТР = ЭтотОбъект.ТекущийЭлемент;
	Возврат ?(ТР = Элементы.ПолеКодЗапроса Или ТР = Элементы.ПолеКодКлиента1С Или ТР = Элементы.ПолеКодСервера1С, ТР, Неопределено);
КонецФункции

&НаКлиенте
Процедура КодЗакомментировать(Команда)
	Редактор = ТекущийРедактор();
	СтрокиДобавитьПрефикс(Редактор.ВыделенныйТекст, "//");
КонецПроцедуры

&НаКлиенте
Процедура КодРаскомментировать(Команда)
	Редактор = ТекущийРедактор();
	Если Редактор.ВыделенныйТекст = "" Тогда
		НачалоСтроки = 0;
		НачалоКолонки = 0;
		КонецСтроки = 0;
		КонецКолонки = 0;
		Редактор.ПолучитьГраницыВыделения(НачалоСтроки, НачалоКолонки, КонецСтроки, КонецКолонки);
		Редактор.УстановитьГраницыВыделения(НачалоСтроки, 1, КонецСтроки + 1, 1);
	КонецЕсли;
	СтрокиУдалитьПрефикс(Редактор.ВыделенныйТекст, "//");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКонструкторЗапроса(Команда)
	Алгоритм = Элементы.Алгоритмы.ТекущиеДанные;
	Если Алгоритм = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Конструктор = Новый КонструкторЗапроса();
	Конструктор.Текст = Алгоритм.КодЗапроса;
	
	Оповещение = Новый ОписаниеОповещения("УстановитьТекстЗапроса", ЭтотОбъект, Элементы.Алгоритмы.ТекущаяСтрока);
	Конструктор.Показать(Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекстЗапроса(Текст, ТекущаяСтрока) Экспорт 
	Если Текст = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Алгоритм = ЭтотОбъект.Алгоритмы.НайтиПоИдентификатору(ТекущаяСтрока);
	Алгоритм.КодЗапроса = Текст;
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьПараметрыЗапроса(Команда)
	Алгоритм = Элементы.Алгоритмы.ТекущиеДанные;
	Если Алгоритм = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КодЗапроса = Алгоритм.КодЗапроса;
	ПараметрыЗапроса = ПараметрыЗапроса(КодЗапроса);
	
	Пропуски = Новый Соответствие;
	Для Каждого Значение Из Значения.НайтиСтроки(Новый Структура("АлгоритмУИД", Алгоритм.УИД)) Цикл
		ПараметрЗапроса = ПараметрыЗапроса[Значение.Имя];
		Если ПараметрЗапроса <> Неопределено Тогда
			Пропуски.Вставить(Значение.Имя, Значение.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ПараметрЗапроса Из ПараметрыЗапроса Цикл
		Пропуск = Пропуски[ПараметрЗапроса.Ключ];
		Если Пропуск <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Значение = ЭтотОбъект.Значения.Добавить();
		Значение.Имя = ПараметрЗапроса.Ключ;
		Значение.Значение = ПараметрЗапроса.Значение.ПривестиЗначение(Неопределено);
		Значение.АлгоритмУИД = Алгоритм.УИД;
	КонецЦикла;
	УстановитьОтборЗначений();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыЗапроса(КодЗапроса)
	Запрос = Новый Запрос(КодЗапроса);
	НайденныеПараметры = Запрос.НайтиПараметры();
	
	ПараметрыЗапроса = Новый Соответствие;
	Для Каждого Найденыш Из НайденныеПараметры Цикл
		ПараметрыЗапроса.Вставить(Найденыш.Имя, Найденыш.ТипЗначения);
	КонецЦикла;
	
	Возврат ПараметрыЗапроса;
КонецФункции

#КонецОбласти


#Область ВыполнениеКода

&НаКлиенте
Процедура ВыполнитьТекущийКод(Команда)
	Алгоритм = Элементы.Алгоритмы.ТекущиеДанные;
	Если Алгоритм = Неопределено Тогда
		Возврат;
	ИначеЕсли СтраницаКода = "КодЗапроса" Тогда
		Выгрузка.Очистить();
		ВыгрузитьДанныеНаСервере(Алгоритм[СтраницаКода], ЗначенияАлгоритма(ЭтотОбъект.Алгоритмы, Алгоритм.Имя, ЭтотОбъект.Значения));
	ИначеЕсли СтраницаКода = "КодКлиента1С" Тогда
		Выполнить(Алгоритм[СтраницаКода]);
	ИначеЕсли СтраницаКода = "КодСервера1С" Тогда
		ВыполнитьКод1СНаСервере(Алгоритм[СтраницаКода]);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьДанныеНаСервере(КодЗапроса, ПараметрыЗапроса = Неопределено)
	Запрос = Новый Запрос(КодЗапроса);
	Если ПараметрыЗапроса <> Неопределено Тогда
		Для Каждого ПараметрЗапроса Из ПараметрыЗапроса Цикл
			Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Результат = Запрос.Выполнить();

	ИмяТаблицыРезультата = "Выгрузка";
	ПодготовитьКолонкиТаблицы(ИмяТаблицыРезультата, Результат.Колонки);

	Выгрузка.Загрузить(Результат.Выгрузить());
	Счетчик = 1;
	Для Каждого Стр Из Выгрузка Цикл
		Стр._К = Счетчик;
		Счетчик = Счетчик + 1;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ВыполнитьКод1СНаСервере(КодСервера1С, ПараметрыКода = Неопределено)
	Результат = Неопределено;
	Выполнить(КодСервера1С);
	Возврат Результат;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЗначенияАлгоритма(Алгоритмы, ИмяАлгоритма, Значения)
	Отбор = Новый Структура("Имя", ИмяАлгоритма);
	
	Строки = Алгоритмы.НайтиСтроки(Отбор);
	Если Строки.Количество() = 0 Тогда
		Возврат Новый Соответствие;
	КонецЕсли;
	
	ЗначенияАлгоритма = Новый Соответствие;
	Для Каждого Значение Из Значения.НайтиСтроки(Новый Структура("АлгоритмУИД", Строки[0].УИД)) Цикл
		ЗначенияАлгоритма.Вставить(Значение.Имя, Значение.Значение);
	КонецЦикла;
	Возврат ЗначенияАлгоритма;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КодАлгоритма(Алгоритмы, ИмяАлгоритма, СтраницаКода)
	Отбор = Новый Структура("Имя", ИмяАлгоритма);
	
	Строки = Алгоритмы.НайтиСтроки(Отбор);
	Если Строки.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	КодАлгоритма = Строки[0][СтраницаКода];
	Если Не ЗначениеЗаполнено(КодАлгоритма) Тогда
		Возврат "";
	КонецЕсли;

	Возврат КодАлгоритма;
КонецФункции

#КонецОбласти


#Область РедактированиеКода

&НаКлиентеНаСервереБезКонтекста
Процедура СтрокиДобавитьПрефикс(Блок, Префикс)
	БлочныйПрефикс = Символы.ПС + Префикс;

	ЧислоСтрок = СтрЧислоСтрок(Блок);
	Если ЧислоСтрок > 1 Тогда
		ДобавлятьПС = (Прав(Блок, 1) = Символы.ПС);
		Блок = Префикс + СтрЗаменить(СокрП(Блок), Символы.ПС, БлочныйПрефикс);
		Если ДобавлятьПС Тогда
			Блок = Блок + Символы.ПС;
		КонецЕсли;
	ИначеЕсли ЧислоСтрок = 1 Тогда
		Блок = Префикс + Блок;
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СтрокиУдалитьПрефикс(Блок, Префикс)
	ПереводСтроки = ?(Прав(Блок, 1) = Символы.ПС, Символы.ПС, "");
	
	ЧислоСтрок = СтрЧислоСтрок(Блок);
	Если ЧислоСтрок > 1 Тогда
		НовыйБлок = "";
		Для ИндексСтроки = 1 По ЧислоСтрок Цикл
			СтрокаБлока = СтрПолучитьСтроку(Блок, ИндексСтроки);
			
			НачалоПрефикса = Найти(СтрокаБлока, Префикс);
			СтрокаДоПрефикса = Лев(СтрокаБлока, НачалоПрефикса - 1);
			Если Не ЗначениеЗаполнено(СтрокаДоПрефикса) И НачалоПрефикса > 0 Тогда
				СтрокаБлока = СтрокаДоПрефикса + Сред(СтрокаБлока, НачалоПрефикса + 2);
			КонецЕсли;
			
			Если ИндексСтроки < ЧислоСтрок Тогда
				НовыйБлок = НовыйБлок + СтрокаБлока + Символы.ПС;
			Иначе
				НовыйБлок = НовыйБлок + СтрокаБлока + ПереводСтроки;
			КонецЕсли;
		КонецЦикла;
		Блок = НовыйБлок;
	ИначеЕсли ЧислоСтрок = 1 Тогда
		СтрокаБлока = Блок;
		
		НачалоПрефикса = Найти(СтрокаБлока, Префикс);
		СтрокаДоПрефикса = Лев(СтрокаБлока, НачалоПрефикса - 1);
		Если Не ЗначениеЗаполнено(СтрокаДоПрефикса) И НачалоПрефикса > 0 Тогда
			СтрокаБлока = СтрокаДоПрефикса + Сред(СтрокаБлока, НачалоПрефикса + 2);
		КонецЕсли;
		
		Блок = СтрокаБлока;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФайлов

&НаКлиенте
Процедура СохранитьИОбработатьФорму(Результат, КомандаОповещения) Экспорт
	Если Результат <> КодВозвратаДиалога.Нет И Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	Если Результат = КодВозвратаДиалога.Да Тогда
		СохранитьФайлАлгоритмов();
	КонецЕсли;
	
	Если КомандаОповещения = "ЗАКРЫТЬ" Тогда
		ЗакрытиеФормы = Истина;
		ЭтотОбъект.Закрыть();
	ИначеЕсли КомандаОповещения = "ОЧИСТИТЬ" Тогда
		НовыйФайлАлгоритмов();
	ИначеЕсли КомандаОповещения = "ОТКРЫТЬ" Тогда
		ОткрытьФайлАлгоритмов();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НовыйФайлАлгоритмов()
	ЭтотОбъект.Алгоритмы.Очистить();
	Алгоритм = Неопределено;
	Объект.ПолноеИмяФайла = "";
	ЭтотОбъект.Модифицированность = Ложь;
	УстановитьСтраницуКода(СтраницаКода);
КонецПроцедуры

&НаКлиенте
Процедура СохранитьФайлАлгоритмов(РежимСохранитьКак = Ложь)
	Если (Не Модифицированность И Не РежимСохранитьКак) Или Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Записать = Ложь;
	Если РежимСохранитьКак Или Не ЗначениеЗаполнено(Объект.ПолноеИмяФайла) Тогда
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		Диалог.ПолноеИмяФайла = Объект.ПолноеИмяФайла;
		Диалог.Фильтр = НСтр("ru = 'Алгоритмы 1С (*.a1c)|*.a1c'");
		Если Диалог.Выбрать() Тогда
			Объект.ПолноеИмяФайла = Диалог.ПолноеИмяФайла;
			Записать = Истина;
		КонецЕсли;
	Иначе
		Записать = Истина;
	КонецЕсли;
	Если Записать Тогда
		ЗаписатьВФайл(Объект.ПолноеИмяФайла);
		ЭтотОбъект.Модифицированность = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлАлгоритмов()
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.ПолноеИмяФайла = Объект.ПолноеИмяФайла;
	Диалог.Фильтр = НСтр("ru = 'Алгоритмы 1С (*.a1c)|*.a1c'");
	Если Диалог.Выбрать() Тогда
		Объект.ПолноеИмяФайла = Диалог.ПолноеИмяФайла;
		ПрочитатьИзФайла(Объект.ПолноеИмяФайла);
		ЭтотОбъект.Модифицированность = Ложь;
	КонецЕсли;
	
	УстановитьСтраницуКода(СтраницаКода);
КонецПроцедуры

&НаКлиенте
Процедура ФайлНовый(Команда)
	Если Модифицированность Тогда
		Оповещение = Новый ОписаниеОповещения("СохранитьИОбработатьФорму", ЭтаФорма, "ОЧИСТИТЬ");
		ПоказатьВопрос(Оповещение, НСтр("ru='Сохранить изменения алгоритмов?'"), РежимДиалогаВопрос.ДаНетОтмена);
	Иначе
		НовыйФайлАлгоритмов();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ФайлСохранить(Команда)
	СохранитьФайлАлгоритмов(Команда = Команды.ФайлСохранитьКак);
КонецПроцедуры

&НаКлиенте
Процедура ФайлОткрыть(Команда)
	Если Модифицированность Тогда
		Оповещение = Новый ОписаниеОповещения("СохранитьИОбработатьФорму", ЭтаФорма, "ОТКРЫТЬ");
		ПоказатьВопрос(Оповещение, НСтр("ru='Сохранить изменения алгоритмов?'"), РежимДиалогаВопрос.ДаНетОтмена);
	Иначе
		ОткрытьФайлАлгоритмов();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьВФайл(ПолноеИмяФайла)
	Сериализатор = Новый СериализаторXDTO(Новый ФабрикаXDTO);
	
	Поток = Новый ЗаписьXML;
	Поток.ОткрытьФайл(ПолноеИмяФайла, "UTF-8");
	Поток.ЗаписатьОбъявлениеXML();
	Поток.ЗаписатьНачалоЭлемента("DTCONS83");
	
	Поток.ЗаписатьНачалоЭлемента("Алгоритмы");
	Для Каждого Алгоритм Из ЭтотОбъект.Алгоритмы Цикл
		Поток.ЗаписатьНачалоЭлемента("Алгоритм");
		Поток.ЗаписатьАтрибут("Имя", Алгоритм.Имя);
		Поток.ЗаписатьАтрибут("УИД", Алгоритм.УИД);
		
		Поток.ЗаписатьНачалоЭлемента("КодЗапроса");
		Поток.ЗаписатьТекст(Алгоритм.КодЗапроса);
		Поток.ЗаписатьКонецЭлемента();
		
		Поток.ЗаписатьНачалоЭлемента("КодКлиента1С");
		Поток.ЗаписатьТекст(Алгоритм.КодКлиента1С);
		Поток.ЗаписатьКонецЭлемента();
		
		Поток.ЗаписатьНачалоЭлемента("КодСервера1С");
		Поток.ЗаписатьТекст(Алгоритм.КодСервера1С);
		Поток.ЗаписатьКонецЭлемента();
		
		Поток.ЗаписатьКонецЭлемента();
	КонецЦикла;
	Поток.ЗаписатьКонецЭлемента();
	
	Поток.ЗаписатьНачалоЭлемента("Значения");
	Для Каждого Значение Из ЭтотОбъект.Значения Цикл
		Поток.ЗаписатьНачалоЭлемента("Значение");
		Поток.ЗаписатьАтрибут("Имя", Значение.Имя);
		Поток.ЗаписатьАтрибут("АлгоритмУИД", Значение.АлгоритмУИД);
		
		ЗаписатьТипЗначения(Поток, Значение.Значение, Сериализатор);
		Если ТипЗнч(Значение.Значение) = Тип("СписокЗначений") Тогда
			Для Каждого ЭлементСписка Из Значение.Значение Цикл
				Поток.ЗаписатьНачалоЭлемента("Элемент");
				ЗаписатьТипЗначения(Поток, ЭлементСписка.Значение, Сериализатор);
				ЗаписатьЗначение(Поток, ЭлементСписка.Значение, Сериализатор);
				Поток.ЗаписатьКонецЭлемента();
			КонецЦикла;
		Иначе
			ЗаписатьЗначение(Поток, Значение.Значение, Сериализатор);
		КонецЕсли;
		Поток.ЗаписатьКонецЭлемента();
	КонецЦикла;
	Поток.ЗаписатьКонецЭлемента();
	
	Поток.ЗаписатьКонецЭлемента();
	Поток.Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьТипЗначения(Поток, Значение, Сериализатор)
	Поток.ЗаписатьАтрибут("Тип",
		?(ТипЗнч(Значение) = Тип("СписокЗначений"), "СписокЗначений",
		?(Значение = Неопределено, "Неопределено",
		Сериализатор.XMLСтрока(ТипЗнч(Значение)))));
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьЗначение(Поток, Значение, Сериализатор)
	Поток.ЗаписатьТекст(?(Значение = Неопределено, "Неопределено", Сериализатор.XMLСтрока(Значение)));
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьИзФайла(ПолноеИмяФайла)
	ЭтотОбъект.Алгоритмы.Очистить();
	ЭтотОбъект.Значения.Очистить();
	
	Поток = Новый ЧтениеXML;
	Поток.ОткрытьФайл(ПолноеИмяФайла);

	Алгоритм = Неопределено;
	АлгоритмИмя = "";
	АлгоритмУИД = "";
	АлгоритмТип = "";
	Значение = Неопределено;
	ЗначениеИмя = "";
	ЗначениеАлгоритмУИД = "";
	ЗначениеТип = Неопределено;
	
	Сериализатор = Новый СериализаторXDTO(Новый ФабрикаXDTO);
	Пока Поток.Прочитать() Цикл
		Если Поток.Имя = "Алгоритм" Тогда
			АлгоритмИмя = Строка(Поток.ПолучитьАтрибут("Имя"));
			АлгоритмУИД = Строка(Поток.ПолучитьАтрибут("УИД"));
			АлгоритмТип = "";
			Если Алгоритм = Неопределено Или Алгоритм.Имя <> АлгоритмИмя Или Алгоритм.УИД <> АлгоритмУИД Тогда
				Алгоритм = ЭтотОбъект.Алгоритмы.Добавить();
				Алгоритм.Имя = АлгоритмИмя;
				Алгоритм.УИД = АлгоритмУИД;
			КонецЕсли;
		КонецЕсли;
		
		Если Поток.Имя = "КодЗапроса" Или Поток.Имя = "КодКлиента1С" Или Поток.Имя = "КодСервера1С" Тогда
			АлгоритмТип = Поток.Имя;
		КонецЕсли;
		Если Поток.Имя = "#text" И ЗначениеЗаполнено(АлгоритмТип) Тогда
			Алгоритм[АлгоритмТип] = Поток.Значение;
			АлгоритмТип = "";
		КонецЕсли;
		
		Если Поток.Имя = "Значение" Тогда
			ЗначениеИмя = Строка(Поток.ПолучитьАтрибут("Имя"));
			ЗначениеАлгоритмУИД = Строка(Поток.ПолучитьАтрибут("АлгоритмУИД"));
			ЗначениеТип = Поток.ПолучитьАтрибут("Тип");
			ЗначениеТип = 
				?(ЗначениеТип = "СписокЗначений", Тип("СписокЗначений"),
				?(ЗначениеТип = "Неопределено", Тип("Неопределено"),
				Сериализатор.XMLЗначение(Тип("Тип"), ЗначениеТип)));
			
			Если Значение = Неопределено Или Значение.Имя <> ЗначениеИмя Или Значение.АлгоритмУИД <> ЗначениеАлгоритмУИД Тогда
				Значение = ЭтотОбъект.Значения.Добавить();
				Значение.Имя = ЗначениеИмя;
				Значение.АлгоритмУИД = ЗначениеАлгоритмУИД;
				
				Поток.Прочитать();
				Если ЗначениеТип = Тип("СписокЗначений") Тогда
					Значение.Значение = Новый СписокЗначений;
					Пока Поток.Имя = "Элемент" Цикл
						ЭлементТип = Поток.ПолучитьАтрибут("Тип");
						ЭлементТип = ?(ЭлементТип = "Неопределено", Тип("Неопределено"), Сериализатор.XMLЗначение(Тип("Тип"), ЭлементТип));
						Поток.Прочитать();
						Элемент = ?(ЭлементТип = Тип("Неопределено"), Неопределено, Сериализатор.XMLЗначение(ЭлементТип, Поток.Значение));
						Значение.Значение.Добавить(Элемент);
						Поток.Прочитать();
						Поток.Прочитать();
					КонецЦикла;
				Иначе
					Значение.Значение = ?(ЗначениеТип = Тип("Неопределено"), Неопределено, Сериализатор.XMLЗначение(ЗначениеТип, Поток.Значение));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Поток.Закрыть();
	
	Для Каждого Алгоритм Из ЭтотОбъект.Алгоритмы Цикл
		Если Не ЗначениеЗаполнено(Алгоритм.УИД) Тогда
			Алгоритм.УИД = Строка(Новый УникальныйИдентификатор);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти


#Область ПодготовкаВыгрузки

&НаСервере
Процедура ПодготовитьКолонкиТаблицы(ИмяКорневогоРеквизита, Колонки)
	// Определим ТипВсеСсылки для колонок с типом от значения Неопределено
	ОбъектXDTO = СериализаторXDTO.ЗаписатьXDTO(Новый ОписаниеТипов("Строка"));
	ОбъектXDTO.TypeSet.Добавить(Новый РасширенноеИмяXML("http://v8.1c.ru/8.1/data/enterprise/current-config", "AnyRef"));
	ТипВсеСсылки = СериализаторXDTO.ПрочитатьXDTO(ОбъектXDTO);
	// подготовим массив удаляемых реквизитов
	УдаляемыеРеквизиты = Новый Массив;
	ИмеющиесяРеквизиты = ПолучитьРеквизиты(ИмяКорневогоРеквизита);
	Для Каждого Реквизит Из ИмеющиесяРеквизиты Цикл
		Если Реквизит.Имя = "_К" Или Реквизит.Имя = "_П" Тогда
			Продолжить;
		КонецЕсли;
		УдаляемыеРеквизиты.Добавить(ИмяКорневогоРеквизита + "." + Реквизит.Имя);
	КонецЦикла;
	// типы колонок, которые не отображаются на клиенте
	ТипТаблица = Тип("РезультатЗапроса");
	ТипХранилище = Тип("ХранилищеЗначения");
	ТипТип = Тип("Тип");
	ТипNull = Тип("Null");
	// подготовим массив добавляемых реквизитов
	НовыеРеквизиты = Новый Массив;
	Для Каждого Колонка Из Колонки Цикл
		ТипРеквизита = ?(ЗначениеЗаполнено(Колонка.ТипЗначения), Колонка.ТипЗначения, ТипВсеСсылки);
		Если ТипРеквизита.СодержитТип(ТипТаблица) Или ТипРеквизита.СодержитТип(ТипХранилище) Или ТипРеквизита.СодержитТип(ТипТип)
		Тогда
			Продолжить;
		КонецЕсли;
		НовыйРеквизит = Новый РеквизитФормы(Колонка.Имя, ТипРеквизита, ИмяКорневогоРеквизита);
		НовыеРеквизиты.Добавить(НовыйРеквизит);
	КонецЦикла;
	// Удалим элементы формы
	Элемент_К = Элементы[ИмяКорневогоРеквизита + "_К"];
	Элемент_П = Элементы[ИмяКорневогоРеквизита + "_П"];
	УдаляемыеЭлементы = Новый Массив;
	Для Каждого Элемент Из Элементы[ИмяКорневогоРеквизита].ПодчиненныеЭлементы Цикл
		Если Элемент = Элемент_К Или Элемент = Элемент_П Тогда
			Продолжить;
		КонецЕсли;
		УдаляемыеЭлементы.Добавить(Элемент);
	КонецЦикла; 
	Для Каждого Элемент Из УдаляемыеЭлементы Цикл
		УдалитьОформлениеЭлемента(Элемент.Имя);
		Элементы.Удалить(Элемент);
	КонецЦикла;
	//Если УдаляемыеЭлементы.Количество() = 0 Тогда
	//	Элемент_К.Ширина = 5;
	//КонецЕсли;
	// создадим реквизиты и элементы
	ИзменитьРеквизиты(НовыеРеквизиты, УдаляемыеРеквизиты);
	Для Каждого Колонка Из Колонки Цикл 
		ТипРеквизита = ?(ЗначениеЗаполнено(Колонка.ТипЗначения), Колонка.ТипЗначения, ТипВсеСсылки);
		Если ТипРеквизита.СодержитТип(ТипТаблица) Или ТипРеквизита.СодержитТип(ТипХранилище) Или ТипРеквизита.СодержитТип(ТипТип)
		Тогда
			Продолжить;
		КонецЕсли;
		Элемент = Элементы.Добавить(ИмяКорневогоРеквизита + Колонка.Имя, Тип("ПолеФормы"), Элементы[ИмяКорневогоРеквизита]);
		Элемент.Вид = ВидПоляФормы.ПолеВвода;
		Элемент.ПутьКДанным = ИмяКорневогоРеквизита + "." + Колонка.Имя;
		Элементы.Переместить(Элемент, Элементы[ИмяКорневогоРеквизита], Элемент_П);
		УстановитьОформлениеЭлемента(Элемент.Имя, Элемент.ПутьКДанным);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеЭлемента(ИмяЭлемента, ИмяРеквизита)
	Сравнения = ВидСравненияКомпоновкиДанных;
	Накопление = ВидДвиженияНакопления;
	ДтКт = ВидДвиженияБухгалтерии;
	ЦветСерый = WebЦвета.Серый;
	ЦветМинуса = WebЦвета.Красный;
	ЦветПоля = WebЦвета.Черный;
	ПустаяСсылка = "{00000000-0000-0000-0000-000000000000}";
	ПустаяДата = '00010101';
	
	ВидыОформления = Новый Массив;
	ДобавитьВидОформления(ВидыОформления, "ПУСТАЯДАТА", Сравнения.Равно, ПустаяДата, НСтр("ru='без даты'"), ЦветСерый);
	ДобавитьВидОформления(ВидыОформления, "ПУСТАЯСТРОКА", Сравнения.Равно, "", НСтр("ru='пустая строка'"), ЦветСерый);
	ДобавитьВидОформления(ВидыОформления, "NULL", Сравнения.Равно, Null, "<<NULL>>", ЦветСерый);
	ДобавитьВидОформления(ВидыОформления, "НОЛЬ", Сравнения.Равно, 0, "0.0", ЦветСерый);
	ДобавитьВидОформления(ВидыОформления, "ПРИХОД", Сравнения.Равно, Накопление.Приход, Накопление.Приход, ЦветПоля);
	ДобавитьВидОформления(ВидыОформления, "РАСХОД", Сравнения.Равно, Накопление.Расход, Накопление.Расход, ЦветМинуса);
	ДобавитьВидОформления(ВидыОформления, "ДЕБЕТ", Сравнения.Равно, ДтКт.Дебет, ДтКт.Дебет, ЦветПоля);
	ДобавитьВидОформления(ВидыОформления, "КРЕДИТ", Сравнения.Равно, ДтКт.Кредит, ДтКт.Кредит, ЦветПоля);
	ДобавитьВидОформления(ВидыОформления, "МЕНЬШЕНУЛЯ", Сравнения.Меньше, 0., Неопределено, ЦветМинуса);
	ДобавитьВидОформления(ВидыОформления, "НЕОПРЕДЕЛЕНО", Сравнения.Равно, Неопределено, НСтр("ru='<<НЕОПРЕДЕЛЕНО>>'"), ЦветСерый);
	ДобавитьВидОформления(ВидыОформления, "ЛОЖЬ", Сравнения.Равно, Ложь, Ложь, ЦветСерый);
	ДобавитьВидОформления(ВидыОформления, "ИСТИНА", Сравнения.Равно, Истина, Истина, ЦветПоля);
	//ДобавитьВидОформления(ВидыОформления, "НЕЗАПОЛНЕНО", Сравнения.НеЗаполнено, "", ПустаяСсылка, ЦветСерый);
	
	Для Каждого ВидОформления Из ВидыОформления Цикл
		ОписаниеОформления = ЭтаФорма.УсловноеОформление.Элементы.Добавить(); 
		ОписаниеОформления.Использование = Истина;
		ОписаниеОформления.ИдентификаторПользовательскойНастройки = ИмяЭлемента + " = " + ВидОформления.Имя;
		
		Отбор = ОписаниеОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Отбор.Использование = Истина;
		Отбор.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяРеквизита);
		Отбор.ВидСравнения   = ВидОформления.ВидСравнения;
		Отбор.ПравоеЗначение = ВидОформления.ПравоеЗначение;
		
		Поле = ОписаниеОформления.Поля.Элементы.Добавить(); 
		Поле.Использование = Истина;
		Поле.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлемента);
		
		Оформление = ОписаниеОформления.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ЦветТекста")); 
		Оформление.Использование = Истина;
		Оформление.Значение = ВидОформления.ЦветТекста;
		Если Неопределено <> ВидОформления.Текст Тогда
			Оформление = ОписаниеОформления.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Текст"));
			Оформление.Использование = Истина;
			Оформление.Значение = ВидОформления.Текст;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ДобавитьВидОформления(ВидыОформления, ИмяОформления, ВидСравнения, ПравоеЗначение, Текст, ЦветТекста)
	Ключи = "Имя, ВидСравнения, ПравоеЗначение, Текст, ЦветТекста";
	ВидыОформления.Добавить(Новый Структура(Ключи, ИмяОформления, ВидСравнения, ПравоеЗначение, Текст, ЦветТекста));
КонецПроцедуры

&НаСервере
Процедура УдалитьОформлениеЭлемента(ИмяЭлемента)
	УдаляемыеОписания = Новый Массив;
	Для Каждого ОписаниеОформления Из ЭтаФорма.УсловноеОформление.Элементы Цикл
		Если Найти(ОписаниеОформления.ИдентификаторПользовательскойНастройки, ИмяЭлемента) > 0 Тогда
			УдаляемыеОписания.Добавить(ОписаниеОформления);
		КонецЕсли;
	КонецЦикла;
	Для Каждого УдаляемоеОписание Из УдаляемыеОписания Цикл
		ЭтаФорма.УсловноеОформление.Элементы.Удалить(УдаляемоеОписание);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти


#Область СлужебныеМетодыФормы

&НаКлиенте
Процедура УстановитьСтраницуКода(СтраницаКодаНовая)
	Если СтраницаКода <> СтраницаКодаНовая Тогда
		СтраницаКода = СтраницаКодаНовая;
		Элементы.СтраницыКода.ТекущаяСтраница = Элементы[СтраницаКода];
	КонецЕсли;
	
	АлгоритмыОбновитьВсеФлаги(ЭтотОбъект.Алгоритмы);
	УстановитьЗаголовокФормы();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗаголовокФормы()
	СтраницаКодаПредставление =
		?(СтраницаКода = "КодЗапроса", "(Код запроса)",
		?(СтраницаКода = "КодКлиента1С", "(Код 1С на клиенте)",
		?(СтраницаКода = "КодСервера1С", "(Код 1С на сервере)",
		"")));
	АлгоритмыПредставление = ?(Элементы.Алгоритмы.ТекущиеДанные = Неопределено, "Алгоритмы", Элементы.Алгоритмы.ТекущиеДанные.Имя);
	
	Заголовок = СокрЛП(
		АлгоритмыПредставление + " "
		+ СтраницаКодаПредставление + " "
		+ "[" + Объект.ПолноеИмяФайла + "]");
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборЗначений()
	Алгоритм = Элементы.Алгоритмы.ТекущиеДанные;
	УИД = ?(Алгоритм = Неопределено, "", Алгоритм.УИД);
	Элементы.Значения.ОтборСтрок = Новый ФиксированнаяСтруктура("АлгоритмУИД", УИД);
КонецПроцедуры

#КонецОбласти
