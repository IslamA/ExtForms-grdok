Перем Connection, RS;

Функция СтрокВТЧ(мОбъект, Запрос, Тип)
	Колво = 0;
	Для Каждого мТЧ ИЗ мОбъект.ТабличныеЧасти Цикл
		Запрос.Текст = "ВЫБРАТЬ КОЛИЧЕСТВО(*) ИЗ " + Тип + "." + мОбъект.Имя + "." + мТЧ.Имя;
		Колво = Колво + Запрос.Выполнить().Выгрузить()[0][0]; 
	КонецЦикла;	
	
	Возврат Колво;
КонецФункции	

Функция ДокументовВДень(мОбъект, Запрос)
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(СРЕДНЕЕ(Количество) КАК Число(5, 0)) КАК Среднее,
	|	МАКСИМУМ(Количество) КАК Максимум
	|ИЗ
	|(ВЫБРАТЬ
	|	НачалоПериода(Дата) КАК Дата,
	|	Количество(Ссылка) КАК Количество
	|ИЗ
	|	Документ." + мОбъект.Имя + "
	|ГДЕ
	|	Дата МЕЖДУ &НачДата И &КонДата
	|СГРУППИРОВАТЬ ПО
	|	НачалоПериода(Дата)) КАК Выборка";
	
	Запрос.УстановитьПараметр("НачДата", НачПериода);
	Запрос.УстановитьПараметр("КонДата", КонецДня(КонПериода));
	Возврат Запрос.Выполнить().Выгрузить()[0];
КонецФункции	

Процедура КнопкаВыполнитьНажатие(Кнопка)
	Таб = ЭлементыФормы.ПолеТабличногоДокумента;
	Таб.Очистить();
	Запрос = Новый Запрос;
	
	Макет = ПолучитьМакет("Макет");
	Область = Макет.ПолучитьОбласть("Заголовок");
	Область.Параметры.СтрокаПодключения = ПараметрыСоединения.Строка;
	Область.Параметры.ОписаниеКонфигурации = Метаданные.КраткаяИнформация + ", версия: " + Метаданные.Версия;
	Таб.Вывести(Область);
	
	Если ПараметрыСоединения.Тип = "Сервер" Тогда
		ВывестиИнформациюОSQLБазе(ПараметрыСоединения, Макет, Таб);
	КонецЕсли;	
	
	СтруктураБД = ПолучитьСтруктуруХраненияБазыДанных();
	           	
	// Справочники
	Область = Макет.ПолучитьОбласть("ТипСправочники");
	Таб.Вывести(Область);
	
	Таб.НачатьГруппуСтрок("Справочники", Ложь);
	Область = Макет.ПолучитьОбласть("ВидСправочник");
	
	ТЗ = ТаблицаСправочников(СтруктураБД);
	ТЗ.Сортировать(Сортировать);
	Для Каждого Стр ИЗ ТЗ Цикл
		Область.Параметры.Заполнить(Стр);
		Область.Параметры.Вид = Стр.Представление;
		Область.Параметры.Ном = ТЗ.Индекс(Стр) + 1;
		Область.Параметры.Расшифровка = Стр.мОбъект;
		Область.Параметры.РасшифровкаРазмера = Стр.ТаблицаРасшифровки;
		
		Если НеПоказыватьПустые И Стр.Колво = 0 Тогда
		Иначе	
			Таб.Вывести(Область);
		КонецЕсли;	
	КонецЦикла;	
	Таб.ЗакончитьГруппуСтрок();
	
	Область = Макет.ПолучитьОбласть("ИтогоСправочники");
	Область.Параметры.Колво = ТЗ.Итог("Колво");
	Область.Параметры.КолвоГрупп = ТЗ.Итог("КолвоГрупп");
	Область.Параметры.КолвоПомеченных = ТЗ.Итог("КолвоПомеченных");
	Область.Параметры.КолвоСтрокВТЧ = ТЗ.Итог("КолвоСтрокВТЧ");
	Область.Параметры.РазмерТаблицы = ТЗ.Итог("РазмерТаблицы");
	Область.Параметры.РазмерИндекса = ТЗ.Итог("РазмерИндекса");
	Таб.Вывести(Область);
	
	// Документы
	Область = Макет.ПолучитьОбласть("ТипДокументы");
	Таб.Вывести(Область);
	
	Таб.НачатьГруппуСтрок("Документы", Ложь);
	Область = Макет.ПолучитьОбласть("ВидДокумент");
	
	ТЗ = ТаблицаДокументов(СтруктураБД);
	ТЗ.Сортировать(Сортировать);
	Для Каждого Стр ИЗ ТЗ Цикл
		Область.Параметры.Заполнить(Стр);
		Область.Параметры.Вид = Стр.Представление;
		Область.Параметры.Ном = ТЗ.Индекс(Стр) + 1;
		Область.Параметры.Расшифровка = Стр.мОбъект;
		Область.Параметры.РасшифровкаРазмера = Стр.ТаблицаРасшифровки;
		
		Если НеПоказыватьПустые И Стр.Колво = 0 Тогда
		Иначе	
			Таб.Вывести(Область);
		КонецЕсли;	
	КонецЦикла;	
	Таб.ЗакончитьГруппуСтрок();
	
	Область = Макет.ПолучитьОбласть("ИтогоДокументы");
	Область.Параметры.Колво = ТЗ.Итог("Колво");
	Область.Параметры.КолвоПроведенных = ТЗ.Итог("КолвоПроведенных");
	Область.Параметры.КолвоПомеченных = ТЗ.Итог("КолвоПомеченных");
	Область.Параметры.КолвоСтрокВТЧ = ТЗ.Итог("КолвоСтрокВТЧ");
	Область.Параметры.РазмерТаблицы = ТЗ.Итог("РазмерТаблицы");
	Область.Параметры.РазмерИндекса = ТЗ.Итог("РазмерИндекса");
	Если ТЗ.Итог("Колво") > 0 Тогда
		Область.Параметры.СтрокВТЧНа1Документ = Окр(ТЗ.Итог("КолвоСтрокВТЧ") / ТЗ.Итог("Колво"));
	Иначе	
		Область.Параметры.СтрокВТЧНа1Документ = 0;
	КонецЕсли;	
	Таб.Вывести(Область);
	
	// РегистрыСведений
	Область = Макет.ПолучитьОбласть("ТипРегистрыСведений");
	Таб.Вывести(Область);
	
	Таб.НачатьГруппуСтрок("РегистрыСведений", Ложь);
	Область = Макет.ПолучитьОбласть("ВидРегистрыСведений");	
	
	ТЗ = ТаблицаРегистровСведений(СтруктураБД);
	
	ТЗ.Сортировать(Сортировать);
	Для Каждого Стр ИЗ ТЗ Цикл
		Область.Параметры.Заполнить(Стр);
		Область.Параметры.Вид = Стр.Представление;
		Область.Параметры.Ном = ТЗ.Индекс(Стр) + 1;
		Область.Параметры.РасшифровкаРазмера = Стр.ТаблицаРасшифровки;
		
		Если НеПоказыватьПустые И Стр.Колво = 0 Тогда
		Иначе	
			Таб.Вывести(Область);
		КонецЕсли;	
	КонецЦикла;	
	Таб.ЗакончитьГруппуСтрок();
	
	Область = Макет.ПолучитьОбласть("ИтогоРегистрыСведений");
	Область.Параметры.Колво 		= ТЗ.Итог("Колво");
	Область.Параметры.РазмерТаблицы = ТЗ.Итог("РазмерТаблицы");
	Область.Параметры.РазмерИндекса = ТЗ.Итог("РазмерИндекса");
	
	Таб.Вывести(Область);
	
	// РегистрыНакопления
	Область = Макет.ПолучитьОбласть("ТипРегистрыНакопления");
	Таб.Вывести(Область);
	
	Таб.НачатьГруппуСтрок("РегистрыНакопления", Ложь);
	Область = Макет.ПолучитьОбласть("ВидРегистрыНакопления");
	
	ТЗ = ТаблицаРегистровНакопления(СтруктураБД);
	
	ТЗ.Сортировать(Сортировать);
	Для Каждого Стр ИЗ ТЗ Цикл
		Область.Параметры.Заполнить(Стр);
		Область.Параметры.Вид = Стр.Представление;
		Область.Параметры.Ном = ТЗ.Индекс(Стр) + 1;
		Область.Параметры.РасшифровкаРазмера = Стр.ТаблицаРасшифровки;
		
		Если НеПоказыватьПустые И Стр.Колво = 0 Тогда
		Иначе	
			Таб.Вывести(Область);
		КонецЕсли;	
	КонецЦикла;	
	Таб.ЗакончитьГруппуСтрок();
	
	Область = Макет.ПолучитьОбласть("ИтогоРегистрыНакопления");
	Область.Параметры.Колво 		= ТЗ.Итог("Колво");
	Область.Параметры.КолвоИтогов 	= ТЗ.Итог("КолвоИтогов");
	Область.Параметры.РазмерТаблицы = ТЗ.Итог("РазмерТаблицы");
	Область.Параметры.РазмерИндекса = ТЗ.Итог("РазмерИндекса");
	
	Таб.Вывести(Область);
			
	// РегистрыБухгалтерии
	Область = Макет.ПолучитьОбласть("ТипРегистрыБухгалтерии");
	Таб.Вывести(Область);
	
	Таб.НачатьГруппуСтрок("РегистрыБухгалтерии", Ложь);
	Область = Макет.ПолучитьОбласть("ВидРегистрыБухгалтерии");
	
	ТЗ = ТаблицаРегистровБухгалтерии(СтруктураБД);
	
	ТЗ.Сортировать(Сортировать);
	Для Каждого Стр ИЗ ТЗ Цикл
		Область.Параметры.Заполнить(Стр);
		Область.Параметры.Вид = Стр.Представление;
		Область.Параметры.Ном = ТЗ.Индекс(Стр) + 1;
		Область.Параметры.РасшифровкаРазмера = Стр.ТаблицаРасшифровки;
		
		Если НеПоказыватьПустые И Стр.Колво = 0 Тогда
		Иначе	
			Таб.Вывести(Область);
		КонецЕсли;	
	КонецЦикла;	
	Таб.ЗакончитьГруппуСтрок();
	
	Область = Макет.ПолучитьОбласть("ИтогоРегистрыБухгалтерии");
	Область.Параметры.Колво 		= ТЗ.Итог("Колво");
	Область.Параметры.РазмерТаблицы = ТЗ.Итог("РазмерТаблицы");
	Область.Параметры.РазмерИндекса = ТЗ.Итог("РазмерИндекса");
	
	Таб.Вывести(Область);
	
	// РегистрыРасчета
	Область = Макет.ПолучитьОбласть("ТипРегистрыРасчета");
	Таб.Вывести(Область);
	
	Таб.НачатьГруппуСтрок("РегистрыРасчета", Ложь);
	Область = Макет.ПолучитьОбласть("ВидРегистрыРасчета");
	
	ТЗ = ТаблицаРегистровРасчета(СтруктураБД);
	
	ТЗ.Сортировать(Сортировать);
	Для Каждого Стр ИЗ ТЗ Цикл
		Область.Параметры.Заполнить(Стр);
		Область.Параметры.Вид = Стр.Представление;
		Область.Параметры.Ном = ТЗ.Индекс(Стр) + 1;
		Область.Параметры.РасшифровкаРазмера = Стр.ТаблицаРасшифровки;
		
		Если НеПоказыватьПустые И Стр.Колво = 0 Тогда
		Иначе	
			Таб.Вывести(Область);
		КонецЕсли;	
	КонецЦикла;	
	Таб.ЗакончитьГруппуСтрок();
	
	Область = Макет.ПолучитьОбласть("ИтогоРегистрыРасчета");
	Область.Параметры.Колво 		= ТЗ.Итог("Колво");
	Область.Параметры.РазмерТаблицы = ТЗ.Итог("РазмерТаблицы");
	Область.Параметры.РазмерИндекса = ТЗ.Итог("РазмерИндекса");
	
	Таб.Вывести(Область);
	
	Попытка
		Connection.Close();
	Исключение
	КонецПопытки;	
КонецПроцедуры

Процедура КоманднаяПанельНастройка(Кнопка)
	Форма = ПолучитьФорму("Настройка");
	Форма.Открыть();
КонецПроцедуры

Процедура ВыбПериодНажатие(Элемент)
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.УстановитьПериод(НачПериода, ?(КонПериода='0001-01-01', КонПериода, КонецДня(КонПериода)));
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	НастройкаПериода.Редактировать();
	НачПериода = НастройкаПериода.ПолучитьДатуНачала();
	КонПериода = НастройкаПериода.ПолучитьДатуОкончания();
КонецПроцедуры

Процедура ПолеТабличногоДокументаОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(Расшифровка) = Тип("ТаблицаЗначений") Тогда
		
		ТабДок = Новый ТабличныйДокумент;
		
		Макет = ПолучитьМакет("Макет");
		
		Область = Макет.ПолучитьОбласть("РасшифровкаШапка");
		ТабДок.Вывести(Область);
		
		Область = Макет.ПолучитьОбласть("РасшифровкаСтрока");
		
		Для каждого Стр Из Расшифровка Цикл
			Область.Параметры.Заполнить(Стр);
			ТабДок.Вывести(Область);
		КонецЦикла;
		
		Область = Макет.ПолучитьОбласть("РасшифровкаИтого");
		Область.Параметры.РазмерТаблицы = Расшифровка.Итог("РазмерТаблицы");
		Область.Параметры.РазмерИндекса = Расшифровка.Итог("РазмерИндекса");
		
		ТабДок.Вывести(Область);
		
		ТабДок.Показать();
		
	Иначе
		
		Список = Новый СписокЗначений;
		Список.Добавить("Открыть форму списка");
		
		Если Метаданные.Документы.Содержит(Расшифровка) Тогда
			
			СтрСписка = ВыбратьИзМеню(Список);
			Если СтрСписка = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			Если СтрСписка.Значение = "Открыть форму списка" Тогда
				Документы[Расшифровка.Имя].ПолучитьФормуСписка().Открыть();
			КонецЕсли;	
		ИначеЕсли Метаданные.Справочники.Содержит(Расшифровка) Тогда
			СтрСписка = ВыбратьИзМеню(Список);
			Если СтрСписка = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			Если СтрСписка.Значение = "Открыть форму списка" Тогда
				Справочники[Расшифровка.Имя].ПолучитьФормуСписка().Открыть();
			КонецЕсли;	
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

Функция ПолучитьПараметрыСоединения()
	Структура = Новый Структура("Тип, Сервер, База, Файл, Строка");
	
	СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
	Структура.Строка = СтрокаСоединения;
	
	СтрокаСоединения = СтрЗаменить(СтрокаСоединения, ";", Символы.ПС);
	
	Стр1 = СтрПолучитьСтроку(СтрокаСоединения, 1);
	Стр2 = СтрПолучитьСтроку(СтрокаСоединения, 2);
	
	Если Лев(Стр1, 4) = "Srvr" Тогда
		Структура.Тип = "Сервер";
		Структура.Сервер = Сред(Стр1, 7, СтрДлина(Стр1) - 7);
		Структура.База = Сред(СтрПолучитьСтроку(СтрокаСоединения, 2), 6, СтрДлина(Стр2) - 6);
	Иначе
		Структура.Тип = "Файл";
		Структура.Файл = Сред(Стр1, 6, СтрДлина(Стр1) - 6);
	КонецЕсли;	
	
	Возврат Структура;
КонецФункции	

Функция ТаблицаСправочников(СтруктураБД)
	Тип = Новый ОписаниеТипов("Число");
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("мОбъект");
	ТЗ.Колонки.Добавить("Представление");
	ТЗ.Колонки.Добавить("Колво", Тип);
	ТЗ.Колонки.Добавить("КолвоГрупп", Тип);
	ТЗ.Колонки.Добавить("КолвоПомеченных", Тип);
	ТЗ.Колонки.Добавить("КолвоСтрокВТЧ", Тип);
	ТЗ.Колонки.Добавить("РазмерТаблицы", Тип);
	ТЗ.Колонки.Добавить("РазмерИндекса", Тип);
	ТЗ.Колонки.Добавить("ТаблицаРасшифровки");
	
	ТаблицаРасшифровки = Новый ТаблицаЗначений;
	ТаблицаРасшифровки.Колонки.Добавить("Назначение");
	ТаблицаРасшифровки.Колонки.Добавить("РазмерТаблицы");
	ТаблицаРасшифровки.Колонки.Добавить("РазмерИндекса");
	
	Запрос = Новый Запрос;
	
	Для Каждого мОбъект ИЗ Метаданные.Справочники Цикл
		Если ВыбранныеМетаданные.НайтиПоЗначению("Справочники." + мОбъект.Имя) = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		ОбработкаПрерыванияПользователя();
		Состояние("Справочник: " + мОбъект.Представление());
		
		ТаблицаРасшифровки.Очистить();
		
		СтрТЗ = ТЗ.Добавить();
		СтрТЗ.мОбъект = мОбъект;
		СтрТЗ.Представление = мОбъект.Представление();
		
		Запрос.Текст = "ВЫБРАТЬ КОЛИЧЕСТВО(*) ИЗ Справочник." + мОбъект.Имя;
		СтрТЗ.Колво = Запрос.Выполнить().Выгрузить()[0][0];
		
		Если мОбъект.Иерархический И мОбъект.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
			Запрос.Текст = "ВЫБРАТЬ КОЛИЧЕСТВО(*) ИЗ Справочник." + мОбъект.Имя + " ГДЕ ЭтоГруппа";
			СтрТЗ.КолвоГрупп = Запрос.Выполнить().Выгрузить()[0][0];
		Иначе	
			СтрТЗ.КолвоГрупп = 0;
		КонецЕсли;	
		
		Запрос.Текст = "ВЫБРАТЬ КОЛИЧЕСТВО(*) ИЗ Справочник." + мОбъект.Имя + " ГДЕ ПометкаУдаления";
		СтрТЗ.КолвоПомеченных = Запрос.Выполнить().Выгрузить()[0][0];
		
		СтрТЗ.КолвоСтрокВТЧ = СтрокВТЧ(мОбъект, Запрос, "Справочник");
		
		Если ПараметрыСоединения.Тип = "Сервер" Тогда
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Метаданные", "Справочник." + мОбъект.имя);
			МассивТаблиц = СтруктураБД.НайтиСтроки(СтруктураПоиска);
			
			Для каждого Эл Из МассивТаблиц Цикл
				Размер = РазмерТаблицыSQL(Эл.ИмяТаблицыХранения);
				
				НоваяСтр = ТаблицаРасшифровки.Добавить();
				НоваяСтр.Назначение 	= Эл.Назначение;
				НоваяСтр.РазмерТаблицы	= Размер.РазмерТаблицы;
				НоваяСтр.РазмерИндекса 	= Размер.РазмерИндекса;
				
			КонецЦикла;
			
			// если у документа есть ТЧ, то надо получить их размер
			Для каждого ТЧ Из мОбъект.ТабличныеЧасти Цикл
				
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("Метаданные", "Справочник." + мОбъект.имя + ".ТабличнаяЧасть." + ТЧ.Имя);
				МассивТаблиц = СтруктураБД.НайтиСтроки(СтруктураПоиска);
				
				Для каждого Эл Из МассивТаблиц Цикл
					ИмяТаблицыХранения = СтрЗаменить(Эл.ИмяТаблицыХранения, ".", "_");
					
					Размер = РазмерТаблицыSQL(ИмяТаблицыХранения);
					
					НоваяСтр = ТаблицаРасшифровки.Добавить();
					НоваяСтр.Назначение 	= Эл.Назначение + ": " + ТЧ.Имя;
					НоваяСтр.РазмерТаблицы	= Размер.РазмерТаблицы;
					НоваяСтр.РазмерИндекса 	= Размер.РазмерИндекса;
					
				КонецЦикла;
				
			КонецЦикла;
			
			РазмерВсего 		= ТаблицаРасшифровки.Итог("РазмерТаблицы");
			РазмерИндексаВсего 	= ТаблицаРасшифровки.Итог("РазмерИндекса");
			
			СтрТЗ.РазмерТаблицы 	 = РазмерВсего;
			СтрТЗ.РазмерИндекса 	 = РазмерИндексаВсего;
			СтрТЗ.ТаблицаРасшифровки = ТаблицаРасшифровки.Скопировать();
						
		КонецЕсли;
		
	КонецЦикла;	
	
	Возврат ТЗ;
КонецФункции

Функция ТаблицаДокументов(СтруктураБД)
	Тип = Новый ОписаниеТипов("Число");
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("мОбъект");
	ТЗ.Колонки.Добавить("Представление");
	ТЗ.Колонки.Добавить("Колво", Тип);
	ТЗ.Колонки.Добавить("КолвоПроведенных", Тип);
	ТЗ.Колонки.Добавить("КолвоПомеченных", Тип);
	ТЗ.Колонки.Добавить("КолвоСтрокВТЧ", Тип);
	ТЗ.Колонки.Добавить("СтрокВТЧНа1Документ", Тип);
	ТЗ.Колонки.Добавить("МаксДокВДень", Тип);
	ТЗ.Колонки.Добавить("СредДокВДень", Тип);
	ТЗ.Колонки.Добавить("РазмерТаблицы", Тип);
	ТЗ.Колонки.Добавить("РазмерИндекса", Тип);
	ТЗ.Колонки.Добавить("ТаблицаРасшифровки");
	
	ТаблицаРасшифровки = Новый ТаблицаЗначений;
	ТаблицаРасшифровки.Колонки.Добавить("Назначение");
	ТаблицаРасшифровки.Колонки.Добавить("РазмерТаблицы");
	ТаблицаРасшифровки.Колонки.Добавить("РазмерИндекса");
	
	Запрос = Новый Запрос;
	
	Для Каждого мОбъект ИЗ Метаданные.Документы Цикл
		Если ВыбранныеМетаданные.НайтиПоЗначению("Документы." + мОбъект.Имя) = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		ОбработкаПрерыванияПользователя();
		Состояние("Документ: " + мОбъект.Представление());
		
		ТаблицаРасшифровки.Очистить();
		
		СтрТЗ = ТЗ.Добавить();
		
		СтрТЗ.мОбъект = мОбъект;
		СтрТЗ.Представление = мОбъект.Представление();
		Запрос.Текст = "ВЫБРАТЬ КОЛИЧЕСТВО(*) ИЗ Документ." + мОбъект.Имя;
		СтрТЗ.Колво = Запрос.Выполнить().Выгрузить()[0][0];
		
		Запрос.Текст = "ВЫБРАТЬ КОЛИЧЕСТВО(*) ИЗ Документ." + мОбъект.Имя + " ГДЕ Проведен";
		СтрТЗ.КолвоПроведенных = Запрос.Выполнить().Выгрузить()[0][0];
		
		Запрос.Текст = "ВЫБРАТЬ КОЛИЧЕСТВО(*) ИЗ Документ." + мОбъект.Имя + " ГДЕ ПометкаУдаления";
		СтрТЗ.КолвоПомеченных = Запрос.Выполнить().Выгрузить()[0][0];
		
		СтрТЗ.КолвоСтрокВТЧ = СтрокВТЧ(мОбъект, Запрос, "Документ");
		
		ДокументовВДень = ДокументовВДень(мОбъект, Запрос);
		СтрТЗ.МаксДокВДень = ДокументовВДень.Максимум;
		СтрТЗ.СредДокВДень = ДокументовВДень.Среднее;
		
		Если СтрТЗ.Колво > 0 Тогда
			СтрТЗ.СтрокВТЧНа1Документ = Окр(СтрТЗ.КолвоСтрокВТЧ / СтрТЗ.Колво);
		Иначе	
			СтрТЗ.СтрокВТЧНа1Документ = 0;
		КонецЕсли;
		
		Если ПараметрыСоединения.Тип = "Сервер" Тогда
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Метаданные", "Документ." + мОбъект.имя);
			МассивТаблиц = СтруктураБД.НайтиСтроки(СтруктураПоиска);
			
			Для каждого Эл Из МассивТаблиц Цикл
				Размер = РазмерТаблицыSQL(Эл.ИмяТаблицыХранения);
				
				НоваяСтр = ТаблицаРасшифровки.Добавить();
				НоваяСтр.Назначение 	= Эл.Назначение;
				НоваяСтр.РазмерТаблицы	= Размер.РазмерТаблицы;
				НоваяСтр.РазмерИндекса 	= Размер.РазмерИндекса;
				
			КонецЦикла;
			
			// если у документа есть ТЧ, то надо получить их размер
			Для каждого ТЧ Из мОбъект.ТабличныеЧасти Цикл
				
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("Метаданные", "Документ." + мОбъект.имя + ".ТабличнаяЧасть." + ТЧ.Имя);
				МассивТаблиц = СтруктураБД.НайтиСтроки(СтруктураПоиска);
				
				Для каждого Эл Из МассивТаблиц Цикл
					ИмяТаблицыХранения = СтрЗаменить(Эл.ИмяТаблицыХранения, ".", "_");
					
					Размер = РазмерТаблицыSQL(ИмяТаблицыХранения);
					
					НоваяСтр = ТаблицаРасшифровки.Добавить();
					НоваяСтр.Назначение 	= Эл.Назначение + ": " + ТЧ.Имя;
					НоваяСтр.РазмерТаблицы	= Размер.РазмерТаблицы;
					НоваяСтр.РазмерИндекса 	= Размер.РазмерИндекса;
					
				КонецЦикла;
				
			КонецЦикла; 
			
			РазмерВсего 		= ТаблицаРасшифровки.Итог("РазмерТаблицы");
			РазмерИндексаВсего 	= ТаблицаРасшифровки.Итог("РазмерИндекса");
			
			СтрТЗ.РазмерТаблицы 	 = РазмерВсего;
			СтрТЗ.РазмерИндекса 	 = РазмерИндексаВсего;
			СтрТЗ.ТаблицаРасшифровки = ТаблицаРасшифровки.Скопировать();			
			
		КонецЕсли;		
			
	КонецЦикла;	
	
	Возврат ТЗ;
КонецФункции	

Функция ТаблицаРегистровСведений(СтруктураБД)
	
	Запрос = Новый Запрос;
	
	Тип = Новый ОписаниеТипов("Число");
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("мОбъект");
	ТЗ.Колонки.Добавить("Представление");
	ТЗ.Колонки.Добавить("Колво", Тип);
	ТЗ.Колонки.Добавить("РазмерТаблицы", Тип);
	ТЗ.Колонки.Добавить("РазмерИндекса", Тип);
	ТЗ.Колонки.Добавить("ТаблицаРасшифровки");
	
	ТаблицаРасшифровки = Новый ТаблицаЗначений;
	ТаблицаРасшифровки.Колонки.Добавить("Назначение");
	ТаблицаРасшифровки.Колонки.Добавить("РазмерТаблицы");
	ТаблицаРасшифровки.Колонки.Добавить("РазмерИндекса");
	
	Для Каждого мОбъект ИЗ Метаданные.РегистрыСведений Цикл
		
		ОбработкаПрерыванияПользователя();
		
		Если ВыбранныеМетаданные.НайтиПоЗначению("РегистрыСведений." + мОбъект.Имя) = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		
		Состояние("Регистр сведений: " + мОбъект.Представление());
		
		ТаблицаРасшифровки.Очистить();
		
		СтрТЗ = ТЗ.Добавить();
		СтрТЗ.мОбъект = мОбъект;
		СтрТЗ.Представление = мОбъект.Представление();
		
		Запрос.Текст = "ВЫБРАТЬ КОЛИЧЕСТВО(*) ИЗ РегистрСведений." + мОбъект.Имя;
		Колво = Запрос.Выполнить().Выгрузить()[0][0];
		
		СтрТЗ.Колво = Колво;
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Метаданные", "РегистрСведений." + мОбъект.имя);
		МассивТаблиц = СтруктураБД.НайтиСтроки(СтруктураПоиска);
		
		Для каждого Эл Из МассивТаблиц Цикл
			Размер = РазмерТаблицыSQL(Эл.ИмяТаблицыХранения);
			
			НоваяСтр = ТаблицаРасшифровки.Добавить();
			НоваяСтр.Назначение 	= Эл.Назначение;
			НоваяСтр.РазмерТаблицы	= Размер.РазмерТаблицы;
			НоваяСтр.РазмерИндекса 	= Размер.РазмерИндекса;
						
		КонецЦикла;
		
		РазмерВсего 		= ТаблицаРасшифровки.Итог("РазмерТаблицы");
		РазмерИндексаВсего 	= ТаблицаРасшифровки.Итог("РазмерИндекса");
		
		СтрТЗ.РазмерТаблицы 	 = РазмерВсего;
		СтрТЗ.РазмерИндекса 	 = РазмерИндексаВсего;
		СтрТЗ.ТаблицаРасшифровки = ТаблицаРасшифровки.Скопировать(); 		
			
	КонецЦикла;	
	
	Возврат ТЗ;

КонецФункции

Функция ТаблицаРегистровНакопления(СтруктураБД)
	
	Запрос = Новый Запрос;
	
	Тип = Новый ОписаниеТипов("Число");
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("мОбъект");
	ТЗ.Колонки.Добавить("Представление");
	ТЗ.Колонки.Добавить("Колво", 		 Тип);
	ТЗ.Колонки.Добавить("КолвоИтогов", 	 Тип);
	ТЗ.Колонки.Добавить("РазмерТаблицы", Тип);
	ТЗ.Колонки.Добавить("РазмерИндекса", Тип);
	ТЗ.Колонки.Добавить("ТаблицаРасшифровки");
	
	ТаблицаРасшифровки = Новый ТаблицаЗначений;
	ТаблицаРасшифровки.Колонки.Добавить("Назначение");
	ТаблицаРасшифровки.Колонки.Добавить("РазмерТаблицы");
	ТаблицаРасшифровки.Колонки.Добавить("РазмерИндекса");
	
	Для Каждого мОбъект ИЗ Метаданные.РегистрыНакопления Цикл
		
		ОбработкаПрерыванияПользователя();
		
		Если ВыбранныеМетаданные.НайтиПоЗначению("РегистрыНакопления." + мОбъект.Имя) = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		
		Состояние("Регистр накопления: " + мОбъект.Представление());
		
		ТаблицаРасшифровки.Очистить();
		
		СтрТЗ = ТЗ.Добавить();
		СтрТЗ.мОбъект = мОбъект;
		СтрТЗ.Представление = мОбъект.Представление();
		
		Запрос.Текст = "ВЫБРАТЬ КОЛИЧЕСТВО(*) ИЗ РегистрНакопления." + мОбъект.Имя;
		Колво = Запрос.Выполнить().Выгрузить()[0][0];
		
		Если мОбъект.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки Тогда
			Запрос.Текст = 
			"ВЫБРАТЬ 
			|	КОЛИЧЕСТВО(*) 
			|ИЗ 
			|(ВЫБРАТЬ";
			
			Для Каждого мИзмерение ИЗ мОбъект.Измерения Цикл
				Запрос.Текст = Запрос.Текст + "
				|" + мИзмерение.Имя + ",";
			КонецЦикла;
			Запрос.Текст = Сред(Запрос.Текст, 1, СтрДлина(Запрос.Текст) - 1);
			
			Запрос.Текст = Запрос.Текст + "
			|ИЗ
			|	РегистрНакопления." + мОбъект.Имя + ".Остатки) КАК Выборка";
			КолвоИтогов = Запрос.Выполнить().Выгрузить()[0][0];
		Иначе	
			КолвоИтогов = 0;
		КонецЕсли;
		
		СтрТЗ.Колво 		= Колво;
		СтрТЗ.КолвоИтогов 	= КолвоИтогов;
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Метаданные", "РегистрНакопления." + мОбъект.имя);
		МассивТаблиц = СтруктураБД.НайтиСтроки(СтруктураПоиска);
		
		Для каждого Эл Из МассивТаблиц Цикл
			Размер = РазмерТаблицыSQL(Эл.ИмяТаблицыХранения);
			
			НоваяСтр = ТаблицаРасшифровки.Добавить();
			НоваяСтр.Назначение 	= Эл.Назначение;
			НоваяСтр.РазмерТаблицы	= Размер.РазмерТаблицы;
			НоваяСтр.РазмерИндекса 	= Размер.РазмерИндекса;
						
		КонецЦикла;
		
		РазмерВсего 		= ТаблицаРасшифровки.Итог("РазмерТаблицы");
		РазмерИндексаВсего 	= ТаблицаРасшифровки.Итог("РазмерИндекса");
		
		СтрТЗ.РазмерТаблицы 	 = РазмерВсего;
		СтрТЗ.РазмерИндекса 	 = РазмерИндексаВсего;
		СтрТЗ.ТаблицаРасшифровки = ТаблицаРасшифровки.Скопировать(); 		
			
	КонецЦикла;	
	
	Возврат ТЗ;

КонецФункции  

Функция ТаблицаРегистровБухгалтерии(СтруктураБД)
	
	Запрос = Новый Запрос;
	
	Тип = Новый ОписаниеТипов("Число");
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("мОбъект");
	ТЗ.Колонки.Добавить("Представление");
	ТЗ.Колонки.Добавить("Колво", 		 Тип);
	ТЗ.Колонки.Добавить("РазмерТаблицы", Тип);
	ТЗ.Колонки.Добавить("РазмерИндекса", Тип);
	ТЗ.Колонки.Добавить("ТаблицаРасшифровки");
	
	ТаблицаРасшифровки = Новый ТаблицаЗначений;
	ТаблицаРасшифровки.Колонки.Добавить("Назначение");
	ТаблицаРасшифровки.Колонки.Добавить("РазмерТаблицы");
	ТаблицаРасшифровки.Колонки.Добавить("РазмерИндекса");
	
	Для Каждого мОбъект ИЗ Метаданные.РегистрыБухгалтерии Цикл
		
		ОбработкаПрерыванияПользователя();
		
		Если ВыбранныеМетаданные.НайтиПоЗначению("РегистрыБухгалтерии." + мОбъект.Имя) = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		
		Состояние("Регистр бухгалтерии: " + мОбъект.Представление());
		
		ТаблицаРасшифровки.Очистить();
		
		СтрТЗ = ТЗ.Добавить();
		СтрТЗ.мОбъект = мОбъект;
		СтрТЗ.Представление = мОбъект.Представление();
		
		Запрос.Текст = "ВЫБРАТЬ КОЛИЧЕСТВО(*) ИЗ РегистрБухгалтерии." + мОбъект.Имя;
		Колво = Запрос.Выполнить().Выгрузить()[0][0];
		
		СтрТЗ.Колво = Колво;
				
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Метаданные", "РегистрБухгалтерии." + мОбъект.имя);
		МассивТаблиц = СтруктураБД.НайтиСтроки(СтруктураПоиска);
		
		Для каждого Эл Из МассивТаблиц Цикл
			Размер = РазмерТаблицыSQL(Эл.ИмяТаблицыХранения);
			
			НоваяСтр = ТаблицаРасшифровки.Добавить();
			НоваяСтр.Назначение 	= Эл.Назначение;
			НоваяСтр.РазмерТаблицы	= Размер.РазмерТаблицы;
			НоваяСтр.РазмерИндекса 	= Размер.РазмерИндекса;
						
		КонецЦикла;
		
		РазмерВсего 		= ТаблицаРасшифровки.Итог("РазмерТаблицы");
		РазмерИндексаВсего 	= ТаблицаРасшифровки.Итог("РазмерИндекса");
		
		СтрТЗ.РазмерТаблицы 	 = РазмерВсего;
		СтрТЗ.РазмерИндекса 	 = РазмерИндексаВсего;
		СтрТЗ.ТаблицаРасшифровки = ТаблицаРасшифровки.Скопировать(); 		
			
	КонецЦикла;	
	
	Возврат ТЗ;

КонецФункции

Функция ТаблицаРегистровРасчета(СтруктураБД)
	
	Запрос = Новый Запрос;
	
	Тип = Новый ОписаниеТипов("Число");
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("мОбъект");
	ТЗ.Колонки.Добавить("Представление");
	ТЗ.Колонки.Добавить("Колво", 		 Тип);
	ТЗ.Колонки.Добавить("РазмерТаблицы", Тип);
	ТЗ.Колонки.Добавить("РазмерИндекса", Тип);
	ТЗ.Колонки.Добавить("ТаблицаРасшифровки");
	
	ТаблицаРасшифровки = Новый ТаблицаЗначений;
	ТаблицаРасшифровки.Колонки.Добавить("Назначение");
	ТаблицаРасшифровки.Колонки.Добавить("РазмерТаблицы");
	ТаблицаРасшифровки.Колонки.Добавить("РазмерИндекса");
	
	Для Каждого мОбъект ИЗ Метаданные.РегистрыРасчета Цикл
		
		ОбработкаПрерыванияПользователя();
		
		Если ВыбранныеМетаданные.НайтиПоЗначению("РегистрыРасчета." + мОбъект.Имя) = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		
		Состояние("Регистр расчета: " + мОбъект.Представление());
		
		ТаблицаРасшифровки.Очистить();
		
		СтрТЗ = ТЗ.Добавить();
		СтрТЗ.мОбъект = мОбъект;
		СтрТЗ.Представление = мОбъект.Представление();
		
		Запрос.Текст = "ВЫБРАТЬ КОЛИЧЕСТВО(*) ИЗ РегистрРасчета." + мОбъект.Имя;
		Колво = Запрос.Выполнить().Выгрузить()[0][0];
		
		СтрТЗ.Колво = Колво;
				
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Метаданные", "РегистрРасчета." + мОбъект.имя);
		МассивТаблиц = СтруктураБД.НайтиСтроки(СтруктураПоиска);
		
		Для каждого Эл Из МассивТаблиц Цикл
			Размер = РазмерТаблицыSQL(Эл.ИмяТаблицыХранения);
			
			НоваяСтр = ТаблицаРасшифровки.Добавить();
			НоваяСтр.Назначение 	= Эл.Назначение;
			НоваяСтр.РазмерТаблицы	= Размер.РазмерТаблицы;
			НоваяСтр.РазмерИндекса 	= Размер.РазмерИндекса;
						
		КонецЦикла;
		
		РазмерВсего 		= ТаблицаРасшифровки.Итог("РазмерТаблицы");
		РазмерИндексаВсего 	= ТаблицаРасшифровки.Итог("РазмерИндекса");
		
		СтрТЗ.РазмерТаблицы 	 = РазмерВсего;
		СтрТЗ.РазмерИндекса 	 = РазмерИндексаВсего;
		СтрТЗ.ТаблицаРасшифровки = ТаблицаРасшифровки.Скопировать(); 		
			
	КонецЦикла;	
	
	Возврат ТЗ;

КонецФункции

Процедура ВывестиИнформациюОSQLБазе(ПараметрыСоединения, Макет, Таб)
	
	стрПодключения = "Driver={SQL Server};Server=" + SQLСервер + ";Uid=" + SQLАдминистратор + ";Pwd=" + SQLПарольАдминистратора + ";DataBase=" + ПараметрыСоединения.База + ";";
	Connection = Новый COMОбъект("ADODB.Connection");
	Connection.Open(стрПодключения);
	
	RS = Новый COMОбъект("ADODB.RecordSet");
	
	RS.Open("sp_helpdb '" + ПараметрыСоединения.База + "'", Connection);
	
	Пока RS.EOF() = 0 Цикл
		ДатаСоздания = RS.Fields("created").Value;
		
		RS.MoveNext();
	КонецЦикла;
	RS.Close();
	
	RS.Open("sp_spaceused", Connection);
	Пока RS.EOF() = 0 Цикл
		РазмерБазы = RS.Fields("database_size").Value;
		Неиспользованно = RS.Fields("unallocated space").Value;
		
		RS.MoveNext();
	КонецЦикла;
	RS.Close();
	
	Область = Макет.ПолучитьОбласть("ИнформацияОSQLБазе");
	Область.Параметры.Размер = РазмерБазы;
	Область.Параметры.Неиспользованно = Неиспользованно;
	Область.Параметры.ДатаСоздания = ДатаСоздания;
	
	Таб.Вывести(Область);
КонецПроцедуры	

Функция РазмерТаблицыSQL(ИмяТаблицы)
	ИтРазмерТаблицы = 0;
	ИтРазмерИндекса = 0;
	RS1 = Новый COMОбъект("ADODB.RecordSet");
	
	RS.Open("SELECT name FROM sysobjects WHERE name = '_" + ИмяТаблицы + "' OR name LIKE '[_]" + ИмяТаблицы + "[_]%'", Connection);
	Пока RS.EOF() = 0 Цикл
		RS1.Open("sp_spaceused '" + RS.Fields("Name").Value + "'", Connection);
		Пока RS1.EOF() = 0 Цикл
			РазмерТаблицы = RS1.Fields("Data").Value;
			РазмерТаблицы = Сред(РазмерТаблицы, 1, СтрДлина(РазмерТаблицы) - 3);
			
			ИтРазмерТаблицы = ИтРазмерТаблицы + Число(РазмерТаблицы);
			
			РазмерИндекса = RS1.Fields("index_size").Value;
			РазмерИндекса = Сред(РазмерИндекса, 1, СтрДлина(РазмерИндекса) - 3);
			
			ИтРазмерИндекса = ИтРазмерИндекса + Число(РазмерИндекса);
			RS1.MoveNext();
		КонецЦикла;
		RS1.Close();
		
		RS.MoveNext();
	КонецЦикла;
	RS.Close();
	
	Возврат Новый Структура("РазмерТаблицы, РазмерИндекса", ИтРазмерТаблицы, ИтРазмерИндекса);
КонецФункции	
  
Процедура ПриОткрытии()
	ПараметрыСоединения = ПолучитьПараметрыСоединения();
КонецПроцедуры
