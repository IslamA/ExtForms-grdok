
#Область ОбработчикиСобытийФормыЭлементов

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ВариантЗаполнения = "ОстаткиОбороты";
	ИмяНабораДанных   = "ДанныеРегистра";
				
	Если ВладелецФормы = Неопределено Тогда
		ПоказатьПредупреждение(,"Обработку заполнения документа корректировки можно открыть только из формы документа!", 10);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ЭтоФормаСписка = Найти(ВладелецФормы.ИмяФормы, "ФормаСписка") > 0;
		
	Если ЭтоФормаСписка Тогда
		ПоказатьОповещениеПользователя("Команда предназначена для вызова из формы документа!");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ОбъектФормыДокумента  = ВладелецФормы.Объект;
	ДокументКорректировки = ОбъектФормыДокумента.Ссылка;
	
	ПараметрОстатки.Дата = ОбъектФормыДокумента.Дата;
	ПараметрОбороты = Новый СтандартныйПериод(ВариантСтандартногоПериода.ЭтотМесяц); 
	
	СписокРегистров = ПолучитьСписокРегистровДляВыбора(ОбъектФормыДокумента.ТаблицаРегистров);
	
	Если СписокРегистров.Количество() = 0 Тогда
		
		ПоказатьПредупреждение(,"В документе не выбрано ни одного регистра накопления для корректировки!", 10);
		Отказ = Истина;
		Возврат;
		
	ИначеЕсли СписокРегистров.Количество() > 1 Тогда
		
		Доступность = Ложь;
		ОписаниеВыбораРегистра = Новый ОписаниеОповещения("ВыборРегистраЗавершение", ЭтаФорма);
		СписокРегистров.ПоказатьВыборЭлемента(ОписаниеВыбораРегистра, "Выберите регистр накопления");
		
	Иначе
		
		ИмяРегистра = СписокРегистров[0].Значение;
		
		ИнициализироватьСхемуКомпоновкиДанных();
		ИнициализироватьКомпоновщикНастроек();
		
		Элементы.ГруппаПараметрыЗаполнения.ТекущаяСтраница = ?(ЭтоРегистрОстатков, Элементы.ГруппаОстатки, Элементы.ГруппаОбороты);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если НЕ СхемаКомпоновкиРедактировалась Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	ОписаниеПередЗакрытием = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтаФорма);
	ПоказатьВопрос(ОписаниеПередЗакрытием, "Схема компоновки не сохранена и будет потеряна!
	|Продолжить?", РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ПоместитьВоВременноеХранилище(ВыбранноеЗначение, АдресСхемыКомпоновки);
	ИнициализироватьКомпоновщикНастроек();
		
КонецПроцедуры

&НаКлиенте
Процедура ВариантЗаполненияПриИзменении(Элемент)
	
	ПроизвольноеЗаполнение = ВариантЗаполнения = "Произвольно";
		
	Если ПроизвольноеЗаполнение Тогда
		
	    Элементы.ГруппаПараметрыЗаполнения.ТекущаяСтраница = Элементы.ГруппаКонструктор;
		
	ИначеЕсли СхемаКомпоновкиРедактировалась Тогда 	
				
		ПоказатьВопрос(Новый ОписаниеОповещения("ВариантЗаполненияПриИзмененииЗавершение", ЭтаФорма), 
		"Текущая схема компоновки данных будет заменена на стандартную схему.
		|Продолжить?", РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		Элементы.ГруппаПараметрыЗаполнения.ТекущаяСтраница = ?(ЭтоРегистрОстатков, Элементы.ГруппаОстатки, Элементы.ГруппаОбороты);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПараметрОстаткиПриИзменении(Элемент)
	УстановитьПараметрыДанныхКомпоновщика();
КонецПроцедуры

&НаКлиенте
Процедура ПараметрОборотыПриИзменении(Элемент)
	УстановитьПараметрыДанныхКомпоновщика();
КонецПроцедуры

&НаКлиенте
Процедура ДокументКорректировкиСсылкаНажатие(Элемент, СтандартнаяОбработка)
	ПоказатьЗначение(Неопределено, ДокументКорректировки);
КонецПроцедуры

&НаКлиенте
Процедура НадписьРегистрНажатие(Элемент)
		
	НастройкиКомпоновщикаКопия = ПолучитьКопиюНастроекКомпоновщика();
	
	// установим дополнительный отбор по периоду записей регистра
	Если ВариантЗаполнения = "ОстаткиОбороты" Тогда
		
		Отборы = НастройкиКомпоновщикаКопия.Отбор.Элементы;
		
		Если ЭтоРегистрОстатков Тогда
		
			ЭлементОтбора = Отборы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Период");
			ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
			ЭлементОтбора.ПравоеЗначение = ПараметрОстатки.Дата;
			ЭлементОтбора.Использование  = Истина;
			
		Иначе	
			
			ГруппаОтбора = Отборы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаОтбора.ТипГруппы      = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
			ГруппаОтбора.Использование  = Истина;
			
			ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Период");
			ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
			ЭлементОтбора.ПравоеЗначение = ПараметрОбороты.ДатаНачала;
			ЭлементОтбора.Использование  = Истина;
			
			ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Период");
			ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
			ЭлементОтбора.ПравоеЗначение = ПараметрОбороты.ДатаОкончания;
			ЭлементОтбора.Использование  = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФиксированныеНастройки", НастройкиКомпоновщикаКопия);
	
	// откроем список регистра в соответствии с отборами, установленными в форме
	ОткрытьФорму("РегистрНакопления." + ИмяРегистра + ".ФормаСписка", ПараметрыФормы, ЭтаФорма);
		
КонецПроцедуры

#КонецОбласти

#Область КомандыФормы

&НаКлиенте
Процедура ПоказатьРезультат(Команда)
	
	СформироватьРезультатКомпоновкиДанных();
	
	Элементы.ГруппаРезультат.Заголовок  = "Результат компоновки (" + ТаблицаРезультат.Количество() + " записей)";	
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКонструкторСхемыКомпоновки(Команда)
	
	#Если ТолстыйКлиентОбычноеПриложение ИЛИ ТолстыйКлиентУправляемоеПриложение Тогда
		СхемаКомпоновки = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновки);
		КонструкторСхемы = Новый КонструкторСхемыКомпоновкиДанных(СхемаКомпоновки);
		КонструкторСхемы.Редактировать(ЭтаФорма);
		СхемаКомпоновкиРедактировалась = Истина;
	#Иначе
		ПоказатьПредупреждение(, НСтр("ru='Конструктор схемы компоновки данных можно открыть только в толстом клиенте!'"));
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВДокумент(Команда)
	
	Если ТаблицаРезультат.Количество() = 0 Тогда
		ПоказатьПредупреждение(,"Таблица с результатом компоновки пуста!", 10);
		Возврат;
	КонецЕсли;
	
	Если ВладелецФормы = Неопределено Тогда
		ПоказатьПредупреждение(,"Форма документа корректировки была закрыта!", 10);
		Возврат;
	КонецЕсли;
	
	ОбъектФормыДокумента = ВладелецФормы.Объект;
	ДвиженияРегистра     = ОбъектФормыДокумента.Движения[ИмяРегистра];
	
	Если ДвиженияРегистра.Количество() > 0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ПеренестиВДокументЗавершение", ЭтаФорма, 
		Новый Структура("ДвиженияРегистра, ОбъектФормыДокумента", ДвиженияРегистра, ОбъектФормыДокумента)), 
		"Очистить имеющиеся в документе движения по регистру?", РежимДиалогаВопрос.ДаНетОтмена);
        Возврат;
	КонецЕсли;
		
	ЗаполнитьДвиженияДокумента(ДвиженияРегистра, ОбъектФормыДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнтернетПубликацию(Команда)
	НачатьЗапускПриложения(Новый ОписаниеОповещения("ОткрытьИнтернетПубликациюЗавершение", ЭтаФорма), "http://infostart.ru/public/377369/");
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьАлгоритм(Команда)
	
	Если ПустаяСтрока(СтрокаАлгоритмаОбработки) Тогда
		
		СтрокаКолонок = "//Колонки таблицы:" + Символы.ПС;
		Для каждого КолонкаТаблицы Из Элементы.ТаблицаРезультат.ПодчиненныеЭлементы Цикл
			СтрокаКолонок = СтрокаКолонок + "//" + КолонкаТаблицы.Имя + Символы.ПС;
		КонецЦикла;
		
		СтрокаАлгоритма = СтрокаКолонок + "
		|// обход строк таблицы результата
		|Для каждого СтрокаРезультат Из ТаблицаРезультат Цикл
		|
		|
		|
		|КонецЦикла;";
		
	Иначе
		
		СтрокаАлгоритма = СтрокаАлгоритмаОбработки;
		
	КонецЕсли;
	
	ОписаниеОповещенияВводаАлгоритма = Новый ОписаниеОповещения("ВыполнитьАлгоритмЗавершение", ЭтаФорма);
	ПоказатьВводСтроки(ОписаниеОповещенияВводаАлгоритма, СтрокаАлгоритма, "Обработка строк таблицы результата",,Истина); 
	
КонецПроцедуры

#КонецОбласти

#Область ОсновныеПроцедуры

&НаСервере
Процедура ИнициализироватьСхемуКомпоновкиДанных()
	
	СхемаКомпоновки = Новый СхемаКомпоновкиДанных;
	
	НастройкиСхемыКомпоновки = СхемаКомпоновки.НастройкиПоУмолчанию;
	
	// добавим источник данных
	СхемаКомпоновки.ИсточникиДанных.Очистить();
	ИсточникДанных = СхемаКомпоновки.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя                = "ИсточникДанных1";
	ИсточникДанных.ТипИсточникаДанных = "Local";
	
	// добавим набор данных источника
	СхемаКомпоновки.НаборыДанных.Очистить();		
	НаборДанных = СхемаКомпоновки.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Имя            = ИмяНабораДанных;
	НаборДанных.ИсточникДанных = ИсточникДанных.Имя;	

	// выводить итоговую строку не требуется
	ПараметрВыводаИтогов = НастройкиСхемыКомпоновки.ПараметрыВывода.Элементы[7];
	ПараметрВыводаИтогов.Значение = РасположениеИтоговКомпоновкиДанных.Нет;
	ПараметрВыводаИтогов.Использование = Истина;
	
	// добавим одну группировку с детальными записями
	СтруктураОтчета = НастройкиСхемыКомпоновки.Структура;
	ГруппировкаДетальныеЗаписи = СтруктураОтчета.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ГруппировкаДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	
	АдресСхемыКомпоновки = ПоместитьВоВременноеХранилище(СхемаКомпоновки, УникальныйИдентификатор); 
		
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьКомпоновщикНастроек()
			
	Если НЕ ЭтоАдресВременногоХранилища(АдресСхемыКомпоновки) Тогда
		Возврат;
	КонецЕсли;
	
	СхемаКомпоновки = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновки);	
	НастройкиСхемыКомпоновки = СхемаКомпоновки.НастройкиПоУмолчанию;
	
	Если ВариантЗаполнения = "ОстаткиОбороты" Тогда // стандартное заполнение
				
		НаборДанныхСхемы = СхемаКомпоновки.НаборыДанных[ИмяНабораДанных];
		ПоляВыбораСхемы  = НастройкиСхемыКомпоновки.Выбор.Элементы;
		ПоляНабораСхемы  = НаборДанныхСхемы.Поля;
		
		// получим свойства регистра
		МетаданныеРегистра = Метаданные.РегистрыНакопления[ИмяРегистра];
		ЭтоРегистрОстатков = МетаданныеРегистра.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки;
		ИмяВиртуальнойТаблицы = ?(ЭтоРегистрОстатков, "Остатки", "Обороты");
		ПостфиксРесурса       = ?(ЭтоРегистрОстатков, "Остаток", "Оборот");
		
		Элементы.НадписьРегистр.Заголовок = "Регистр: " + МетаданныеРегистра.Синоним;
		Элементы.ВариантЗаполнения.СписокВыбора[0].Представление = ?(ЭтоРегистрОстатков, "Остатки", "Обороты");
		
		Если ЭтоРегистрОстатков Тогда
			
			// стандартное поле набора
			ПолеНабораСхемы = ПоляНабораСхемы.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
			ПолеНабораСхемы.Поле        = "ВидДвижения"; 
			ПолеНабораСхемы.ПутьКДанным = "ВидДвижения"; 
			ПолеНабораСхемы.Заголовок   = "Вид движения";
			ПолеНабораСхемы.ТипЗначения = Новый ОписаниеТипов("ВидДвиженияНакопления");
			
			// выбранные поля
			ПолеВыбораСхемы = ПоляВыбораСхемы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ПолеВыбораСхемы.Поле = Новый ПолеКомпоновкиДанных("ВидДвижения"); 
			
		КонецЕсли;
		
		// работа с измерениями
		СтрокаИзмерений = "";
		Для каждого Измерение Из МетаданныеРегистра.Измерения Цикл
			
			ИмяИзмерения = Измерение.Имя;
			
			СтрокаИзмерений = СтрокаИзмерений + "ТаблицаРегистра." + ИмяИзмерения + "," + Символы.ПС;
			
			// поля набора данных схемы
			ПолеНабораСхемы = ПоляНабораСхемы.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
			ПолеНабораСхемы.Поле        = ИмяИзмерения; 
			ПолеНабораСхемы.ПутьКДанным = ИмяИзмерения; 
			ПолеНабораСхемы.Заголовок   = Измерение.Синоним;
			ПолеНабораСхемы.ТипЗначения = Измерение.Тип;
			
			// выбранные поля
			ПолеВыбораСхемы = ПоляВыбораСхемы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ПолеВыбораСхемы.Поле = Новый ПолеКомпоновкиДанных(ИмяИзмерения); 
			
		КонецЦикла;                              
		
		// работа с ресурсами
		СтрокаРесурсов = "";
		Для каждого Ресурс Из МетаданныеРегистра.Ресурсы Цикл
			
			ИмяРесурса = Ресурс.Имя;
			ИмяРесурсаЗапроса = "ТаблицаРегистра." + ИмяРесурса + ПостфиксРесурса;
			
			Если ЭтоРегистрОстатков Тогда
			    СтрокаРесурсов = СтрокаРесурсов + ИмяРесурсаЗапроса + " КАК " + ИмяРесурса + "," + Символы.ПС;
			Иначе	
			    СтрокаРесурсов = СтрокаРесурсов + "ВЫБОР 
				|  КОГДА " + ИмяРесурсаЗапроса + " > 0 
				|    ТОГДА -" + ИмяРесурсаЗапроса + "  
			    |  ИНАЧЕ " + ИмяРесурсаЗапроса + "
				|КОНЕЦ КАК " + ИмяРесурса + "," + Символы.ПС;
			КонецЕсли;
			
			// поля набора данных схемы
			ПолеНабораСхемы = ПоляНабораСхемы.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
			ПолеНабораСхемы.Поле        = ИмяРесурса; 
			ПолеНабораСхемы.ПутьКДанным = ИмяРесурса; 
			ПолеНабораСхемы.Заголовок   = Ресурс.Синоним + " (" + НРег(ПостфиксРесурса) + ")";
			ПолеНабораСхемы.ТипЗначения = Ресурс.Тип;
			
			// поля ресурсов
			ПолеРесурсаСхемы = СхемаКомпоновки.ПоляИтога.Добавить();
			ПолеРесурсаСхемы.ПутьКДанным = ИмяРесурса;
			ПолеРесурсаСхемы.Выражение   = "Сумма(" + ИмяРесурса + ")";
			
			// выбранные поля
			ПолеВыбораСхемы = ПоляВыбораСхемы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ПолеВыбораСхемы.Поле = Новый ПолеКомпоновкиДанных(ИмяРесурса); 
			
		КонецЦикла;
		
		// уберем последнюю запятую в строке
		СтрокаРесурсов = Лев(СтрокаРесурсов, СтрДлина(СтрокаРесурсов) - 2); 
		
		// составим текст запроса по остаткам / оборотам регистра
		НаборДанныхСхемы.Запрос = "
		| // Можете задать произвольный запрос
		| // Менять структуру отчета нельзя - всегда должна присутствовать только одна группировка 'Детальные записи'
		| // Выводимые в форму поля указываются на закладке 'Настройки' - 'Выбранные поля'
		|ВЫБРАТЬ 
		|" + ?(ЭтоРегистрОстатков, 
		"ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,", "") + " 
		| // измерения регистра
		|" + СтрокаИзмерений + "
		| // ресурсы регистра
		|" + СтрокаРесурсов + " 
		|ИЗ
		|	РегистрНакопления." + ИмяРегистра + "." + ИмяВиртуальнойТаблицы + " КАК ТаблицаРегистра";
			
		ПоместитьВоВременноеХранилище(СхемаКомпоновки, АдресСхемыКомпоновки); 
		
	КонецЕсли;
	
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновки));
	КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиСхемыКомпоновки);	
	
	// заполним параметры данных
	УстановитьПараметрыДанныхКомпоновщика();
	
КонецПроцедуры

&НаСервере
Процедура СформироватьРезультатКомпоновкиДанных()
	
	Если НЕ ЭтоАдресВременногоХранилища(АдресСхемыКомпоновки) Тогда
		Возврат;
	КонецЕсли;
	
	// выполним компоновку данных
	СхемаКомпоновки = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновки);
	
	ТаблицаЗначенийРезультат = Новый ТаблицаЗначений;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки   = КомпоновщикМакета.Выполнить(СхемаКомпоновки, КомпоновщикНастроек.Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки); 
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений; 
	ПроцессорВывода.УстановитьОбъект(ТаблицаЗначенийРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	// добавим в форму реквизиты таблицы, содержащей результат компоновки		
	
	// реквизиты таблицы для добавления
	РеквизитыТаблицыДобавить = Новый Массив;
	Для каждого СтрокаТаблицыРезультат Из ТаблицаЗначенийРезультат.Колонки Цикл
		ОписаниеТипаКолонки = Новый ОписаниеТипов(СтрокаТаблицыРезультат.ТипЗначения,,"NULL");
		РеквизитКолонка  = Новый РеквизитФормы(СтрокаТаблицыРезультат.Имя, ОписаниеТипаКолонки, "ТаблицаРезультат", СтрокаТаблицыРезультат.Заголовок); 	
		РеквизитыТаблицыДобавить.Добавить(РеквизитКолонка);
	КонецЦикла;
	
	// реквизиты таблицы для удаления
	РеквизитыТаблицыУдалить = Новый Массив;
	Для каждого РеквизитКолонка Из ПолучитьРеквизиты("ТаблицаРезультат") Цикл
		РеквизитыТаблицыУдалить.Добавить(РеквизитКолонка.Путь + "." + РеквизитКолонка.Имя);
	КонецЦикла;
	
	ИзменитьРеквизиты(РеквизитыТаблицыДобавить, РеквизитыТаблицыУдалить);
	
	// удаление колонок таблицы формы
	Для каждого РеквизитТаблицы Из РеквизитыТаблицыУдалить Цикл
		ИмяКолонки = СтрЗаменить(РеквизитТаблицы, "ТаблицаРезультат.", "");
		Элементы.Удалить(Элементы[ИмяКолонки]);
	КонецЦикла;
	
	// добавление колонок таблицы формы
	Для каждого РеквизитТаблицы Из РеквизитыТаблицыДобавить Цикл
		КолонкаРезультата = Элементы.Добавить(РеквизитТаблицы.Имя, Тип("ПолеФормы"), Элементы.ТаблицаРезультат);
		КолонкаРезультата.Вид             = ВидПоляФормы.ПолеВвода;
		КолонкаРезультата.ПутьКДанным     = РеквизитТаблицы.Путь + "." + РеквизитТаблицы.Имя;
		КолонкаРезультата.Заголовок       = РеквизитТаблицы.Заголовок;
		КолонкаРезультата.ОграничениеТипа = РеквизитТаблицы.ТипЗначения;
		Если СхемаКомпоновки.ПоляИтога.Найти(РеквизитТаблицы.Имя) <> Неопределено Тогда
			КолонкаРезультата.КартинкаШапки = БиблиотекаКартинок.Ресурс;
		Иначе
			КолонкаРезультата.КартинкаШапки = БиблиотекаКартинок.Измерение;
		КонецЕсли;
	КонецЦикла;
		
	ТаблицаРезультат.Загрузить(ТаблицаЗначенийРезультат);
		
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыДанныхКомпоновщика()
	
	Если ВариантЗаполнения = "Произвольно" Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыДанных = КомпоновщикНастроек.Настройки.ПараметрыДанных;
		
	Если ЭтоРегистрОстатков Тогда
		ПараметрыДанных.УстановитьЗначениеПараметра("Период", ПараметрОстатки.Дата);
	Иначе
		ПараметрыДанных.УстановитьЗначениеПараметра("НачалоПериода", ПараметрОбороты.ДатаНачала);
		ПараметрыДанных.УстановитьЗначениеПараметра("КонецПериода",  ПараметрОбороты.ДатаОкончания);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокРегистровДляВыбора(Знач ТаблицаРегистровДокумента)
	
	СписокРегистров = Новый СписокЗначений;
	
	Для каждого СтрокаРегистров Из ТаблицаРегистровДокумента Цикл
		
		ИмяРегистраНакопления = СтрокаРегистров.Имя;
		МетаданныеРегистра = Метаданные.РегистрыНакопления.Найти(ИмяРегистраНакопления);
		Если МетаданныеРегистра <> Неопределено Тогда
			СписокРегистров.Добавить(МетаданныеРегистра.Имя, МетаданныеРегистра.Синоним);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СписокРегистров;
	
КонецФункции 

&НаКлиенте
Процедура ЗаполнитьДвиженияДокумента(Знач ДвиженияРегистра, Знач ОбъектФормыДокумента)
     
    Для каждого СтрокаТаблицыРезультат Из ТаблицаРезультат Цикл
        ДвижениеРегистра = ДвиженияРегистра.Добавить();
        ЗаполнитьЗначенияСвойств(ДвижениеРегистра, СтрокаТаблицыРезультат); 
        ДвижениеРегистра.Период     = ОбъектФормыДокумента.Дата;
        ДвижениеРегистра.Активность = Истина;
    КонецЦикла;
	
	ПоказатьОповещениеПользователя("Данные перенесены в документ.",,,БиблиотекаКартинок.Успешно);

КонецПроцедуры

&НаСервере
Функция ПолучитьКопиюНастроекКомпоновщика()
	Возврат КомпоновщикНастроек.ПолучитьНастройки();
КонецФункции

#КонецОбласти

#Область ПроцедурыОбработчикиОповещений

&НаКлиенте
Процедура ПеренестиВДокументЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ДвиженияРегистра     = ДополнительныеПараметры.ДвиженияРегистра;
    ОбъектФормыДокумента = ДополнительныеПараметры.ОбъектФормыДокумента;   
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
        ДвиженияРегистра.Очистить();
    ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
        Возврат;
    КонецЕсли;
    
    ЗаполнитьДвиженияДокумента(ДвиженияРегистра, ОбъектФормыДокумента);

КонецПроцедуры

&НаКлиенте
Процедура ВариантЗаполненияПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
        
        ИнициализироватьСхемуКомпоновкиДанных();
        ИнициализироватьКомпоновщикНастроек();
		
        СхемаКомпоновкиРедактировалась = Ложь;	
        Элементы.ГруппаПараметрыЗаполнения.ТекущаяСтраница = ?(ЭтоРегистрОстатков, Элементы.ГруппаОстатки, Элементы.ГруппаОбороты);
        
    Иначе
        
        ВариантЗаполнения = "Произвольно";
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнтернетПубликациюЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
    // пустышка
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(ОтветНаВопрос, ПараметрыОповещения) Экспорт
	
	Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
		СхемаКомпоновкиРедактировалась = Ложь;
		Закрыть();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыборРегистраЗавершение(ВыбранныйРегистр, Параметры) Экспорт
	
	Если ВыбранныйРегистр = Неопределено Тогда
		Если Открыта() Тогда
			Закрыть();
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Доступность = Истина;
	ИмяРегистра = ВыбранныйРегистр.Значение;
	
	ИнициализироватьСхемуКомпоновкиДанных();
	ИнициализироватьКомпоновщикНастроек();
	
	Элементы.ГруппаПараметрыЗаполнения.ТекущаяСтраница = ?(ЭтоРегистрОстатков, Элементы.ГруппаОстатки, Элементы.ГруппаОбороты);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьАлгоритмЗавершение(СтрокаАлгоритма, ДополнительныеПараметры) Экспорт
	
	Если СтрокаАлгоритма = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаАлгоритмаОбработки = СтрокаАлгоритма;
	
	Попытка
		Выполнить(СтрокаАлгоритма);
	Исключение
	    Сообщить(ОписаниеОшибки(), СтатусСообщения.Внимание);
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

