
// Сервисная экспортная функция. Вызывается в основной программе при регистрации обработки в информационной базе
// Возвращает структуру с параметрами регистрации
//
// Возвращаемое значение:
//		Структура с полями:
//			Вид - строка, вид обработки, один из возможных: "ДополнительнаяОбработка", "ДополнительныйОтчет", 
//					"ЗаполнениеОбъекта", "Отчет", "ПечатнаяФорма", "СозданиеСвязанныхОбъектов"
//			Назначение - Массив строк имен объектов метаданных в формате: 
//					<ИмяКлассаОбъектаМетаданного>.[ * | <ИмяОбъектаМетаданных>]. 
//					Например, "Документ.СчетЗаказ" или "Справочник.*". Параметр имеет смысл только для назначаемых обработок, для глобальных может не задаваться.
//			Наименование - строка - Наименование обработки, которым будет заполнено наименование элемента справочника по умолчанию.
//			Информация  - строка - Краткая информация или описание по обработке.
//			Версия - строка - Версия обработки в формате “<старший номер>.<младший номер>” используется при загрузке обработок в информационную базу.
//			БезопасныйРежим - булево - Принимает значение Истина или Ложь, в зависимости от того, требуется ли устанавливать или отключать безопасный режим 
//							исполнения обработок. Если истина, обработка будет запущена в безопасном режиме. 
//
//
Функция СведенияОВнешнейОбработке() Экспорт
	
	//Инициализируем структуру с параметрами регистрации
	
	//Определяем список объектов, вызывающих обработку
	ОбъектыНазначенияФормы = Новый Массив;
	ОбъектыНазначенияФормы.Добавить("Документ.СведенияОЗастрахованныхЛицахСЗВ_М");
	
	ПараметрыРегистрации = ПолучитьПараметрыРегистрации(ОбъектыНазначенияФормы);
	
	//Определяем команды для печати формы
	
	ТаблицаКоманд = ПолучитьТаблицуКоманд();
	
	МетаданныеОбъекта = Метаданные();
	
	ДобавитьКоманду(ТаблицаКоманд,
		МетаданныеОбъекта.Представление(), // Представление команды в пользовательском интерфейсе
		МетаданныеОбъекта.Имя,	           // Уникальный идентификатор команды
		"ОткрытиеФормы"
		);
	
	ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

// Формирует структуру с параметрами регистрации регистрации обработки в информационной базе
//
// Параметры:
//	ОбъектыНазначенияФормы - Массив - Массив строк имен объектов метаданных в формате: 
//					<ИмяКлассаОбъектаМетаданного>.[ * | <ИмяОбъектаМетаданных>]. 
//					или строка с именем объекта метаданных 
//	НаименованиеОбработки - строка - Наименование обработки, которым будет заполнено наименование элемента справочника по умолчанию.
//							Необязательно, по умолчанию синоним или представление объекта
//	Информация  - строка - Краткая информация или описание обработки.
//							Необязательно, по умолчанию комментарий объекта
//	Версия - строка - Версия обработки в формате “<старший номер>.<младший номер>” используется при загрузке обработок в информационную базу.
//
//
// Возвращаемое значение:
//		Структура
//
Функция ПолучитьПараметрыРегистрации(ОбъектыНазначенияФормы = Неопределено, НаименованиеОбработки = "", Информация = "")
	
	Если ТипЗнч(ОбъектыНазначенияФормы) = Тип("Строка") Тогда
		ОбъектНазначенияФормы = ОбъектыНазначенияФормы;
		ОбъектыНазначенияФормы = Новый Массив;
		ОбъектыНазначенияФормы.Добавить(ОбъектНазначенияФормы);
	КонецЕсли; 
	
	ПараметрыРегистрации = Новый Структура;
	ПараметрыРегистрации.Вставить("Вид",             "ДополнительнаяОбработка");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Истина);
	ПараметрыРегистрации.Вставить("Назначение",      ОбъектыНазначенияФормы);
	
	Если Не ЗначениеЗаполнено(НаименованиеОбработки) Тогда
		НаименованиеОбработки = ЭтотОбъект.Метаданные().Представление();
	КонецЕсли; 
	ПараметрыРегистрации.Вставить("Наименование", НаименованиеОбработки);
	
	ПараметрыРегистрации.Вставить("Информация", Информация);
	ПараметрыРегистрации.Вставить("Версия",     ЭтотОбъект.Метаданные().Комментарий);
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

// Вспомогательная процедура.
//
Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование = "ВызовСерверногоМетода", ПоказыватьОповещение = Ложь, Модификатор = "ПечатьMXL")
	
	НоваяКоманда = ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление = Представление;
	НоваяКоманда.Идентификатор = Идентификатор;
	НоваяКоманда.Использование = Использование;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
	НоваяКоманда.Модификатор = Модификатор;
	
КонецПроцедуры

// Формирует таблицу значений с командами печати
//	
// Возвращаемое значение:
//		ТаблицаЗначений
//
Функция ПолучитьТаблицуКоманд()
	
	Команды = Новый ТаблицаЗначений;
	
	//Представление команды в пользовательском интерфейсе
	Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	
	//Уникальный идентификатор команды или имя макета печати
	Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	
	//Способ вызова команды: "ОткрытиеФормы", "ВызовКлиентскогоМетода", "ВызовСерверногоМетода"
	// "ОткрытиеФормы" - применяется только для отчетов и дополнительных отчетов
	// "ВызовКлиентскогоМетода" - вызов процедуры Печать(), определённой в модуле формы обработки
	// "ВызовСерверногоМетода" - вызов процедуры Печать(), определённой в модуле объекта обработки
	Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	
	//Показывать оповещение.
	//Если Истина, требуется показать оповещение при начале и при завершении работы обработки. 
	//Имеет смысл только при запуске обработки без открытия формы
	Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
	
	//Дополнительный модификатор команды. 
	//Используется для дополнительных обработок печатных форм на основе табличных макетов.
	//Для таких команд должен содержать строку ПечатьMXL
	Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
	
	Возврат Команды;
	
КонецФункции

Функция ВыборкаПоШапкеДокумента(МассивСсылок)	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;	
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	ОписаниеИсточникаДанных = ПерсонифицированныйУчет.ОписаниеИсточникаДанныхДляСоздатьВТСведенияОбОрганизациях();
	ОписаниеИсточникаДанных.ИмяТаблицы = "Документ.СведенияОЗастрахованныхЛицахСЗВ_М";
	ОписаниеИсточникаДанных.ИмяПоляОрганизация = "Организация";
	ОписаниеИсточникаДанных.ИмяПоляПериод = "ОкончаниеОтчетногоПериода";
	ОписаниеИсточникаДанных.СписокСсылок = МассивСсылок;

	ПерсонифицированныйУчет.СоздатьВТСведенияОбОрганизацияхПоОписаниюДокументаИсточникаДанных(Запрос.МенеджерВременныхТаблиц, ОписаниеИсточникаДанных);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СведенияОЗастрахованныхЛицахСЗВ_М.Ссылка,
	|	СведенияОЗастрахованныхЛицахСЗВ_М.Номер,
	|	СведенияОЗастрахованныхЛицахСЗВ_М.Дата,
	|	СведенияОЗастрахованныхЛицахСЗВ_М.Организация,
	|	СведенияОЗастрахованныхЛицахСЗВ_М.ОтчетныйПериод,
	|	СведенияОЗастрахованныхЛицахСЗВ_М.ТипФормы,
	|	СведенияОЗастрахованныхЛицахСЗВ_М.ДокументПринятВПФР,
	|	СведенияОЗастрахованныхЛицахСЗВ_М.ИмяФайлаДляПФР,
	|	СведенияОЗастрахованныхЛицахСЗВ_М.Руководитель,
	|	СведенияОЗастрахованныхЛицахСЗВ_М.ДолжностьРуководителя,
	|	СведенияОЗастрахованныхЛицахСЗВ_М.ФайлСформирован,
	|	СведенияОЗастрахованныхЛицахСЗВ_М.Ответственный,
	|	СведенияОЗастрахованныхЛицахСЗВ_М.ОкончаниеОтчетногоПериода
	|ПОМЕСТИТЬ ВТДанныеДокументов
	|ИЗ
	|	Документ.СведенияОЗастрахованныхЛицахСЗВ_М КАК СведенияОЗастрахованныхЛицахСЗВ_М
	|ГДЕ
	|	СведенияОЗастрахованныхЛицахСЗВ_М.Ссылка В(&МассивСсылок)
	|";
	
	Запрос.Выполнить();
	
	ЗарплатаКадры.СоздатьВТФИООтветственныхЛиц(Запрос.МенеджерВременныхТаблиц, Истина, "Руководитель", "ВТДанныеДокументов");  
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СведенияОЗастрахованныхЛицахСЗВ_М.Дата,
	|	СведенияОЗастрахованныхЛицахСЗВ_М.Номер,
	|	СведенияОЗастрахованныхЛицахСЗВ_М.Организация,
	|	СведенияОбОрганизациях.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	СведенияОбОрганизациях.Наименование,
	|	СведенияОбОрганизациях.НаименованиеПолное,
	|	СведенияОбОрганизациях.ИНН,
	|	СведенияОбОрганизациях.КПП,
	|	СведенияОбОрганизациях.ЮридическоеФизическоеЛицо КАК ЮридическоеФизическоеЛицо,
	|	СведенияОбОрганизациях.ОГРН,
	|	СведенияОЗастрахованныхЛицахСЗВ_М.Ответственный,
	|	СведенияОЗастрахованныхЛицахСЗВ_М.Ссылка КАК Ссылка,
	|	СведенияОбОрганизациях.РегистрационныйНомерПФР КАК РегистрационныйНомерПФР,
	|	СведенияОбОрганизациях.КодПоОКПО,
	|	СведенияОбОрганизациях.НаименованиеОКОПФ,
	|	СведенияОбОрганизациях.НаименованиеСокращенное КАК НаименованиеСокращенное,
	|	СведенияОЗастрахованныхЛицахСЗВ_М.ИмяФайлаДляПФР,
	|	СведенияОЗастрахованныхЛицахСЗВ_М.ТипФормы,
	|	СведенияОЗастрахованныхЛицахСЗВ_М.ОтчетныйПериод,
	|	ЕСТЬNULL(СведенияОЗастрахованныхЛицахСЗВ_М.ДолжностьРуководителя.Наименование, """") КАК РуководительДолжность,
	|	ЕСТЬNULL(ФИООтветственныхЛиц.ФИОПолные, """") КАК Руководитель
	|ИЗ
	|	ВТДанныеДокументов КАК СведенияОЗастрахованныхЛицахСЗВ_М
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСведенияОбОрганизациях КАК СведенияОбОрганизациях
	|		ПО СведенияОЗастрахованныхЛицахСЗВ_М.Организация = СведенияОбОрганизациях.Организация
	|			И СведенияОЗастрахованныхЛицахСЗВ_М.ОкончаниеОтчетногоПериода = СведенияОбОрганизациях.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИООтветственныхЛиц КАК ФИООтветственныхЛиц
	|		ПО СведенияОЗастрахованныхЛицахСЗВ_М.Ссылка = ФИООтветственныхЛиц.Ссылка
	|			И СведенияОЗастрахованныхЛицахСЗВ_М.Руководитель = ФИООтветственныхЛиц.ФизическоеЛицо
	|ГДЕ
	|	СведенияОЗастрахованныхЛицахСЗВ_М.Ссылка В(&МассивСсылок)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";

	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Функция ВыборкаПоСотрудникам(МассивСсылок)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СведенияОЗастрахованныхЛицахСЗВ_М.Ссылка КАК Ссылка,
	|	СведенияОЗастрахованныхЛицахСЗВ_МСотрудники.НомерСтроки КАК НомерСтроки,
	|	СведенияОЗастрахованныхЛицахСЗВ_МСотрудники.Сотрудник,
	|	СведенияОЗастрахованныхЛицахСЗВ_МСотрудники.Фамилия,
	|	СведенияОЗастрахованныхЛицахСЗВ_МСотрудники.Имя,
	|	СведенияОЗастрахованныхЛицахСЗВ_МСотрудники.Отчество,
	|	СведенияОЗастрахованныхЛицахСЗВ_МСотрудники.ИНН,
	|	СведенияОЗастрахованныхЛицахСЗВ_МСотрудники.СтраховойНомерПФР
	|ИЗ
	|	Документ.СведенияОЗастрахованныхЛицахСЗВ_М КАК СведенияОЗастрахованныхЛицахСЗВ_М
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СведенияОЗастрахованныхЛицахСЗВ_М.Сотрудники КАК СведенияОЗастрахованныхЛицахСЗВ_МСотрудники
	|		ПО (СведенияОЗастрахованныхЛицахСЗВ_МСотрудники.Ссылка = СведенияОЗастрахованныхЛицахСЗВ_М.Ссылка)
	|ГДЕ
	|	СведенияОЗастрахованныхЛицахСЗВ_МСотрудники.Ссылка В(&МассивСсылок)
	|	И СведенияОЗастрахованныхЛицахСЗВ_М.Ссылка В(&МассивСсылок)
	|
	|СГРУППИРОВАТЬ ПО
	|	СведенияОЗастрахованныхЛицахСЗВ_М.Ссылка,
	|	СведенияОЗастрахованныхЛицахСЗВ_МСотрудники.НомерСтроки,
	|	СведенияОЗастрахованныхЛицахСЗВ_МСотрудники.Сотрудник,
	|	СведенияОЗастрахованныхЛицахСЗВ_МСотрудники.Фамилия,
	|	СведенияОЗастрахованныхЛицахСЗВ_МСотрудники.Имя,
	|	СведенияОЗастрахованныхЛицахСЗВ_МСотрудники.Отчество,
	|	СведенияОЗастрахованныхЛицахСЗВ_МСотрудники.ИНН,
	|	СведенияОЗастрахованныхЛицахСЗВ_МСотрудники.СтраховойНомерПФР
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки";
	
	Возврат Запрос.Выполнить().Выбрать();	
КонецФункции	

Функция СформироватьВыходнойФайл(Ссылка)
	
	МассивСсылок = Новый Массив;
	МассивСсылок.Добавить(Ссылка);
	
	ВыборкаПоШапкеДокумента = ВыборкаПоШапкеДокумента(МассивСсылок);
	ВыборкаПоШапкеДокумента.Следующий();
		
	ВыборкаПоРаботникиОрганизации =	ВыборкаПоСотрудникам(МассивСсылок);;
	
	// Загружаем формат файла сведений
	ДеревоФорматаXML = ПолучитьМакет("ФорматПФР_2016XML");
	ТекстФорматаXML = ДеревоФорматаXML.ПолучитьТекст();
	
	ДеревоФормата = ЗарплатаКадры.ЗагрузитьXMLВДокументDOM(ТекстФорматаXML);
	
	ФорматСЗВ_М = ЗарплатаКадры.ЗагрузитьФорматНабораЗаписей(ДеревоФормата, "СЗВ_М");
	
	НаборЗаписейДатаЗаполнения = Новый Структура("ДатаЗаполнения", ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(ФорматСЗВ_М.ДатаЗаполнения));
	ФорматСЗВ_М.Удалить("ДатаЗаполнения");
	ФорматЗЛ = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(ФорматСЗВ_М.СписокЗЛ.Значение);
	ФорматСЗВ_М.Удалить("СписокЗЛ");
	
	// Создаем начальное дерево
	ДеревоВыгрузки = ЗарплатаКадры.СоздатьДеревоXML();
	
	Атрибуты = Новый Соответствие;
	Атрибуты.Вставить("xmlns", "http://пф.рф/ВС/СЗВ-М/2017-01-01");
	Атрибуты.Вставить("xmlns:АФ", "http://пф.рф/АФ");
	Атрибуты.Вставить("xmlns:АФ2", "http://пф.рф/АФ/2017-01-01");
	Атрибуты.Вставить("xmlns:УТ", "http://пф.рф/унифицированныеТипы/2014-01-01");
	УзелПФР = ЗарплатаКадры.ДобавитьУзелВДеревоXML(ДеревоВыгрузки, "ЭДПФР", "", Атрибуты);
	
	// Данные формы и страхователя
	Если ВыборкаПоШапкеДокумента.ТипФормы = Перечисления.ТипыСведенийСЗВ_М.Исходная Тогда
		ФорматСЗВ_М.ТипФормы.Значение = 1;	
	ИначеЕсли ВыборкаПоШапкеДокумента.ТипФормы = Перечисления.ТипыСведенийСЗВ_М.Дополняющая Тогда
		ФорматСЗВ_М.ТипФормы.Значение = 2;	
	ИначеЕсли ВыборкаПоШапкеДокумента.ТипФормы = Перечисления.ТипыСведенийСЗВ_М.Отменяющая Тогда
		ФорматСЗВ_М.ТипФормы.Значение = 3;	
	КонецЕсли;	
	НаборЗаписейСтрахователь = ФорматСЗВ_М.Страхователь.Значение;
	НаборЗаписейСтрахователь.РегНомер = ВыборкаПоШапкеДокумента.РегистрационныйНомерПФР;
	НаборЗаписейСтрахователь.НаименованиеКраткое = ВРег(ВыборкаПоШапкеДокумента.НаименованиеСокращенное);
	НаборЗаписейСтрахователь.ИНН = ВыборкаПоШапкеДокумента.ИНН;
	Если ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.КПП) Тогда
		НаборЗаписейСтрахователь.КПП = ВыборкаПоШапкеДокумента.КПП;
	Иначе
		НаборЗаписейСтрахователь.Удалить("КПП");
		
		СтрокаПоляКПП = ФорматСЗВ_М.Страхователь.Поля.Найти("КПП", "ИмяПоля");
		Если СтрокаПоляКПП <> Неопределено Тогда
			ФорматСЗВ_М.Страхователь.Поля.Удалить(СтрокаПоляКПП);
		КонецЕсли;		
	КонецЕсли;
	НаборЗаписейОтчетныйПериод = ФорматСЗВ_М.ОтчетныйПериод.Значение;
	НаборЗаписейОтчетныйПериод.Месяц = Месяц(ВыборкаПоШапкеДокумента.ОтчетныйПериод);
	НаборЗаписейОтчетныйПериод.КалендарныйГод = Год(ВыборкаПоШапкеДокумента.ОтчетныйПериод);
	
	УзелФормы = ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелПФР, "СЗВ-М", "");
	ЗарплатаКадры.ДобавитьИнформациюВДерево(УзелФормы, ФорматСЗВ_М);
	
	// Служебная информация о файле
	НаборЗаписейСлужебнаяИнформация = ЗарплатаКадры.ЗагрузитьФорматНабораЗаписей(ДеревоФормата, "СлужебнаяИнформация");
	Если ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.ИмяФайлаДляПФР) Тогда
		ЧастиИмениФайла = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СокрЛП(ВыборкаПоШапкеДокумента.ИмяФайлаДляПФР),"_");
		НаборЗаписейСлужебнаяИнформация.АФ__GUID.Значение = ЧастиИмениФайла[ЧастиИмениФайла.ВГраница()];
	КонецЕсли;
	НаборЗаписейСлужебнаяИнформация.АФ__ДатаВремя.Значение = ПерсонифицированныйУчет.ПредставлениеДатыВФорматеdateTimeСЧасовымПоясом(ВыборкаПоШапкеДокумента.Дата);
	НаборЗаписейСлужебнаяИнформация.АФ2__ПрограммаПодготовки.Значение = ВРег(РегламентированнаяОтчетность.НазваниеПрограммы());
	ЗарплатаКадры.ДобавитьИнформациюВДерево(ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелПФР, "СлужебнаяИнформация",""), НаборЗаписейСлужебнаяИнформация);
	
	Если ВыборкаПоРаботникиОрганизации.Количество() > 0 Тогда
		
		УзелСпискаЗЛ = ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелФормы, "СписокЗЛ", "");
		
		СписокОбработанныхАнкет = Новый Соответствие;
	
		НомерДокумента = 0;
		Пока ВыборкаПоРаботникиОрганизации.Следующий()	Цикл
			
			НомерДокумента = НомерДокумента + 1;
			
							
			НаборЗаписейЗЛ = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(ФорматЗЛ);
			НаборЗаписейФИО = НаборЗаписейЗЛ.ФИО.Значение;
			НаборЗаписейФИО.УТ__Фамилия = ВРег(ВыборкаПоРаботникиОрганизации.Фамилия);
			НаборЗаписейФИО.УТ__Имя = ВРег(ВыборкаПоРаботникиОрганизации.Имя);
			НаборЗаписейФИО.УТ__Отчество = ВРег(ВыборкаПоРаботникиОрганизации.Отчество);
			
			НаборЗаписейЗЛ.СНИЛС.Значение = ВыборкаПоРаботникиОрганизации.СтраховойНомерПФР;
			Если ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.ИНН) Тогда
				НаборЗаписейЗЛ.ИНН.Значение = ВыборкаПоРаботникиОрганизации.ИНН;
			Иначе
				НаборЗаписейЗЛ.Удалить("ИНН")
			КонецЕсли;
			
			Атрибуты = Новый Соответствие;
			Атрибуты.Вставить("НомерПП", Формат(НомерДокумента, "ЧГ=0"));
			ЗарплатаКадры.ДобавитьИнформациюВДерево(ЗарплатаКадры.ДобавитьУзелВДеревоXML(УзелСпискаЗЛ, "ЗЛ", "", Атрибуты), НаборЗаписейЗЛ);
			
		КонецЦикла;
		
	КонецЕсли;
		
	НаборЗаписейДатаЗаполнения.ДатаЗаполнения.Значение = Формат(ВыборкаПоШапкеДокумента.Дата,"ДФ=yyyy-MM-dd");
	ЗарплатаКадры.ДобавитьИнформациюВДерево(УзелФормы, НаборЗаписейДатаЗаполнения);
	
	// Преобразуем дерево в строковое описание XML
	ПотокВыгрузкиXML = ЗарплатаКадры.СоздатьПотокXML(, "UTF-8");
	ЗарплатаКадры.ЗаписатьУзелДереваXMLВXML(ДеревоВыгрузки, ПотокВыгрузкиXML, "xsi", "http://www.w3.org/2001/XMLSchema-instance", Ложь);
	ТекстФайла = ЗарплатаКадры.ЗаписатьПотокXML(ПотокВыгрузкиXML);
	
	Возврат СтрЗаменить(ТекстФайла, "__", ":");
	
КонецФункции // СформироватьВыходнойФайл()

Функция ОбработкаФормированияФайла() Экспорт	
	ТекстФайла = СформироватьВыходнойФайл(Ссылка);
	Возврат ТекстФайла;
	//ЗарплатаКадры.ЗаписатьФайлВАрхив(Ссылка, Ссылка.ИмяФайлаДляПФР, ТекстФайла, , "UTF-8", Ложь);	
КонецФункции
