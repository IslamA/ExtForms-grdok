#Область ПодпискиМодулей

Процедура ПередДобавлениемКомандСоздатьНаОсновании(ИмяФормы, КомандыСоздатьНаОсновании, СтандартнаяОбработка) Экспорт
	
	Если ИмяФормы = "Документ.ЗаказПоставщику.Форма.ФормаДокумента"
		ИЛИ ИмяФормы = "Документ.ЗаказПоставщику.Форма.ФормаСпискаДокументов" Тогда
		
		Если ПравоДоступа("Добавление", Метаданные.Документы.ПоступлениеУслугПрочихАктивов) Тогда
			
			КомандаСозданияНаОсновании = КомандыСоздатьНаОсновании.Добавить();
			КомандаСозданияНаОсновании.Обработчик = "";
			КомандаСозданияНаОсновании.Идентификатор = Метаданные.Документы.ПоступлениеУслугПрочихАктивов.ПолноеИмя();
			КомандаСозданияНаОсновании.Представление = Метаданные.Документы.ПоступлениеУслугПрочихАктивов.Представление();
			КомандаСозданияНаОсновании.ПроверкаПроведенияПередСозданиемНаОсновании = Истина;
			КомандаСозданияНаОсновании.ФункциональныеОпции = "";
			КомандаСозданияНаОсновании.Порядок = 200;
			
		КонецЕсли;	
		
	ИначеЕсли СтрНачинаетсяС(ИмяФормы, "Документ.ФормированиеСоставаБригады.") Тогда
		
		Если ПравоДоступа("Добавление", Метаданные.Документы.ТабельУчетаРабочегоВремени) Тогда
			
			КомандаСозданияНаОсновании = КомандыСоздатьНаОсновании.Добавить();
			КомандаСозданияНаОсновании.Обработчик = "_ОбщегоНазначенияДопКлиент.СоздатьНаОснованииТабельУчетаРабочегоВремени";
			КомандаСозданияНаОсновании.Идентификатор = Метаданные.Документы.ТабельУчетаРабочегоВремени.ПолноеИмя();
			КомандаСозданияНаОсновании.Представление = Метаданные.Документы.ТабельУчетаРабочегоВремени.Представление();
			КомандаСозданияНаОсновании.ПроверкаПроведенияПередСозданиемНаОсновании = Истина;
			КомандаСозданияНаОсновании.ФункциональныеОпции = "";
			КомандаСозданияНаОсновании.Порядок = 200;
			
		КонецЕсли;	
		
	ИначеЕсли СтрНачинаетсяС(ИмяФормы, "Документ.ЗаявкаНаРасходованиеДенежныхСредств.") Тогда
		
		Если ПравоДоступа("Добавление", Метаданные.Документы.СписаниеБезналичныхДенежныхСредств)
			И ПравоДоступа("Просмотр", Метаданные.Обработки._ГрупповоеСозданиеСписанийБезналичныхДС) Тогда
			
			КомандаСозданияНаОсновании = КомандыСоздатьНаОсновании.Добавить();
			КомандаСозданияНаОсновании.Обработчик = "_ОбщегоНазначенияДопКлиент.СоздатьНаОснованииГрупповоеСозданиеСписанийБезналичныхДС";
			КомандаСозданияНаОсновании.Идентификатор = "ГрупповоеСозданиеСписанийБезналичныхДС";
			КомандаСозданияНаОсновании.Представление = "Групповое создание списаний безналичных ДС";
			КомандаСозданияНаОсновании.ПроверкаПроведенияПередСозданиемНаОсновании = Истина;
			КомандаСозданияНаОсновании.ФункциональныеОпции = "";
			КомандаСозданияНаОсновании.Порядок = 200;
			
		Конецесли;	
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, ОбъектМетаданных) Экспорт
	
	Если ОбъектМетаданных.Имя = "ФормированиеСоставаБригады" Тогда
		
		ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
		
	ИначеЕсли ОбъектМетаданных.Имя = "ТабельУчетаРабочегоВремени" Тогда
		
		ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
		
	КонецЕсли;	
	
КонецПроцедуры	

Процедура ОбработатьТекстЗапросаПартионныйУчет(ИсходныйТекстЗапроса, ИмяПроцедуры) Экспорт
	
	// Вызывается из процедур
	//ДанныеДляПартийНЗП, ДанныеДляТрудозатратНЗП, ДанныеДляПрочихРасходовНЗП
	
	// Долю стоимости определеяем без учета количества выпущенных партий
	Текст1 = "(МаршрутныйЛист.Произведено + МаршрутныйЛист.Брак)";
	Текст2 = "1";
	ИсходныйТекстЗапроса = СтрЗаменить(ИсходныйТекстЗапроса, Текст1, Текст2);
	
	// Ограничим маршрутные листы только текущим периодом
	Текст1 = "ДД.Период >= &НачалоПериода";
	Текст2 = "ДД.Период МЕЖДУ &НачалоПериода И &ОкончаниеПериода";
	ИсходныйТекстЗапроса = СтрЗаменить(ИсходныйТекстЗапроса, Текст1, Текст2);
	
КонецПроцедуры	

#КонецОбласти

#Область Прочее

Функция ДанныеПоНоменклатуре(ДанныеСтроки, РеквизитыЗаказа) Экспорт
	
	ДанныеПоНоменклатуре = Новый Структура;
	
	ДанныеПоНоменклатуре.Вставить("КлючСвязиПродукция",     ДанныеСтроки.КлючСвязи);
	ДанныеПоНоменклатуре.Вставить("Номенклатура",           ДанныеСтроки.Номенклатура);
	ДанныеПоНоменклатуре.Вставить("Характеристика",         ДанныеСтроки.Характеристика);
	ДанныеПоНоменклатуре.Вставить("Склад",                  ДанныеСтроки.Склад);
	ДанныеПоНоменклатуре.Вставить("Подразделение",          ДанныеСтроки.Подразделение);
	ДанныеПоНоменклатуре.Вставить("Спецификация",           ДанныеСтроки.Спецификация);
	ДанныеПоНоменклатуре.Вставить("Количество",             ДанныеСтроки.Количество);
	ДанныеПоНоменклатуре.Вставить("Упаковка",               ДанныеСтроки.Упаковка);
	ДанныеПоНоменклатуре.Вставить("НачалоПроизводства",     ДанныеСтроки.НачатьНеРанее);
	ДанныеПоНоменклатуре.Вставить("ДатаПотребности",        ДанныеСтроки.НачатьНеРанее);
	ДанныеПоНоменклатуре.Вставить("КлючСвязиПолуфабрикат");
	ДанныеПоНоменклатуре.Вставить("КлючСвязиЭтапы");
	
	ДанныеПоНоменклатуре.Вставить("Назначение",             ДанныеСтроки.Назначение);
	ДанныеПоНоменклатуре.Вставить("НазначениеЗаказа",       РеквизитыЗаказа.Назначение);
	
	ДанныеПоНоменклатуре.Вставить("ПодразделениеДиспетчер", РеквизитыЗаказа.Подразделение);
	
	Возврат ДанныеПоНоменклатуре;
	
КонецФункции

#КонецОбласти

Процедура ГрафикПоступленияТоваровПередЗаписью(Источник, Отказ, Замещение) Экспорт
	
	Если Ложь Тогда
		Источник = РегистрыНакопления.ГрафикПоступленияТоваров.СоздатьНаборЗаписей();
	КонецЕсли;	
	
	Если Источник.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Регистратор = Источник.Отбор.Регистратор.Значение;
	Если ТипЗнч(Регистратор) <> Тип("ДокументСсылка.ЗаказНаПроизводство") Тогда
		Возврат;
	КонецЕсли;
	
	Статус = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Регистратор, "Статус");
	Если Статус = Перечисления.СтатусыЗаказовНаПроизводство.Закрыт Тогда
		Источник.Очистить();
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Ссылка", Регистратор);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СУММА(1) КАК КоличествоСтрок,
	|	СУММА(ДокПродукция.Количество) КАК Количество
	|ИЗ
	|	Документ.ЗаказНаПроизводство.Продукция КАК ДокПродукция
	|ГДЕ
	|	ДокПродукция.Ссылка = &Ссылка
	|	И ДокПродукция.Номенклатура = &Номенклатура
	|	И ДокПродукция.Характеристика = &Характеристика";
	
	Для каждого Запись из Источник Цикл
		
		ОбъемПачки  = _ОбщегоНазначенияДоп.ПолучитьДопРеквизит(Запись.Характеристика, "Объем пачки");
		Если НЕ ЗначениеЗаполнено(ОбъемПачки) Тогда
			Продолжить;
		КонецЕсли;
		
		Запрос.Параметры.Вставить("Номенклатура",   Запись.Номенклатура);
		Запрос.Параметры.Вставить("Характеристика", Запись.Характеристика);
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Продолжить;
		КонецЕсли;	
		
		ДанныеДок = Результат.Выгрузить()[0];
		КоличествоСтрок = _ОбщегоНазначенияДоп.ЕстьNULL(ДанныеДок.КоличествоСтрок, 1);
		Количество      = _ОбщегоНазначенияДоп.ЕстьNULL(ДанныеДок.Количество, 0);
		
		Погрешность = 0.1 * КоличествоСтрок;
		
		// Округлим до целых пачек
		КолвоПачек = Окр(Запись.КоличествоИзЗаказов / ОбъемПачки, 0);
		Если _ОбщегоНазначенияДоп.Абс(Запись.КоличествоИзЗаказов - ОбъемПачки * КолвоПачек) < Погрешность Тогда
			
			Запись.КоличествоИзЗаказов  = КолвоПачек * ОбъемПачки;

			КолвоПачек = Окр(Запись.КоличествоПодЗаказ / ОбъемПачки, 0);
			Запись.КоличествоПодЗаказ  = КолвоПачек * ОбъемПачки;
			
			КолвоПачек = Окр(Запись.КоличествоИзЗаказовСНеподтвержденными / ОбъемПачки, 0);
			Запись.КоличествоИзЗаказовСНеподтвержденными  = КолвоПачек * ОбъемПачки;
			
			КолвоПачек = Окр(Запись.КоличествоПодЗаказСНеподтвержденными / ОбъемПачки, 0);
			Запись.КоличествоПодЗаказСНеподтвержденными  = КолвоПачек * ОбъемПачки;
			
		// Если пачек не целое количество, то попробуем привести количество к документу
		ИначеЕсли Количество <> 0 Тогда
			
			Если _ОбщегоНазначенияДоп.Абс(Запись.КоличествоИзЗаказов - Количество) < Погрешность Тогда
				Запись.КоличествоИзЗаказов  = ДанныеДок.Количество;
			КонецЕсли;	
			
			Если _ОбщегоНазначенияДоп.Абс(Запись.КоличествоПодЗаказ - Количество) < Погрешность Тогда
				Запись.КоличествоПодЗаказ  = ДанныеДок.Количество;
			КонецЕсли;	
			
			Если _ОбщегоНазначенияДоп.Абс(Запись.КоличествоИзЗаказовСНеподтвержденными - Количество) < Погрешность Тогда
				Запись.КоличествоИзЗаказовСНеподтвержденными  = Количество;
			КонецЕсли;	
			
			Если _ОбщегоНазначенияДоп.Абс(Запись.КоличествоПодЗаказСНеподтвержденными - Количество) < Погрешность Тогда
				Запись.КоличествоПодЗаказСНеподтвержденными  = Количество;
			КонецЕсли;	
			
		КонецЕсли;	
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ДоговорыКонтрагентовОбработкаПроверкиЗаполнения(Источник, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	ПроверяемыеРеквизиты.Добавить("Подразделение");
	
КонецПроцедуры

Процедура ЗаказКлиентаОбработкаПроверкиЗаполнения(Источник, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	ПроверяемыеРеквизиты.Добавить("Подразделение");
	
КонецПроцедуры

Процедура ЗаказКлиентаПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Ложь Тогда
		Источник = Документы.ЗаказКлиента.СоздатьДокумент();
	КонецЕсли;	
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;	
	
	// У закрытых заказов не должно быть переплаты
	Если Источник.Статус = Перечисления.СтатусыЗаказовКлиентов.Закрыт
		И Источник.Проведен Тогда
		
		ОстатокОплаты = _ЗаказКлиента.ОстатокОплаты(Источник.Ссылка);
		Если ОстатокОплаты < 0 Тогда
			
			Отказ = Истина;
			Сообщить("По заказу обнаружена переплата: " + ОстатокОплаты + ".
			|Закрыть заказ нельзя.");
			
		КонецЕсли;	
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ЗаказКлиентаПриКопировании(Источник, ОбъектКопирования) Экспорт
	
	Если Ложь Тогда
		Источник = Документы.ЗаказКлиента.СоздатьДокумент();
	КонецЕсли;	
	
	// Пересчитаем цены на дату
	Источник.Дата = ТекущаяДатаСеанса();
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Источник);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Источник));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",  СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки",         Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Источник.Товары, СтруктураДействий, Неопределено);
	
КонецПроцедуры

Процедура ЗаказНаПроизводствоПриЗаписи(Источник, Отказ) Экспорт
	
	Если Ложь Тогда
		Источник = Документы.ЗаказНаПроизводство.СоздатьДокумент();
	КонецЕсли;	
	
	Если Источник.Статус = Перечисления.СтатусыЗаказовНаПроизводство.Закрыт Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		НаборЗаписей = РегистрыНакопления.ГрафикПоступленияТоваров.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Источник.Ссылка);
		НаборЗаписей.Записывать = Истина;
		НаборЗаписей.Записать();
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ЗаказНаПроизводствоПриКопировании(Источник, ОбъектКопирования) Экспорт
	
	Если Ложь Тогда
		Источник = Документы.ЗаказНаПроизводство.СоздатьДокумент();
	КонецЕсли;	
	
	Для Каждого СтрокаТЧ Из Источник.Продукция Цикл
		
		СтрокаТЧ.НачатьНеРанее   = ТекущаяДата();
		СтрокаТЧ.ДатаПотребности = КонецМесяца(СтрокаТЧ.НачатьНеРанее);
		
		РеквизитыСпецификации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаТЧ.Спецификация, "Статус, КонецДействия");
		Если РеквизитыСпецификации.Статус = Перечисления.СтатусыСпецификаций.Закрыта
			ИЛИ (ЗначениеЗаполнено(РеквизитыСпецификации.КонецДействия)
				И РеквизитыСпецификации.КонецДействия < ТекущаяДата()) Тогда
				
			СтрокаТЧ.Спецификация    = Неопределено;
				
		КонецЕсли;		
		
	КонецЦикла;
	
	// Перезаполним данные по спецификацииям
	КэшированныеЗначения = Неопределено;
	МассивДанных = Новый Массив;
	Для каждого СтрокаТЧ из Источник.Продукция Цикл
		МассивДанных.Добавить(ДанныеПоНоменклатуре(СтрокаТЧ, Источник));
	КонецЦикла;	
	
	ПланированиеПроизводства.ЗаполнитьДанныеСпецификаций(Источник, МассивДанных, КэшированныеЗначения);
	
	Источник.Ответственный = Пользователи.ТекущийПользователь();
	
КонецПроцедуры

Процедура ЗаявкаНаРасходованиеДенежныхСредствОбработкаПроверкиЗаполнения(Источник, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	Если Ложь Тогда
		Источник = Документы.ЗаявкаНаРасходованиеДенежныхСредств.СоздатьДокумент();
	КонецЕсли;
	
	ПроверяемыеРеквизиты.Добавить("Подразделение");
	
	Если Источник.БанковскийСчетКонтрагента.Закрыт Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Расчетный счет контрагента закрыт.
			|Необходимо выбрать актуальный расчетный счет",
			Источник,
			"БанковскийСчетКонтрагента",,
			Отказ);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Источник.БанковскийСчетКонтрагента.Банк)
		И Источник.БанковскийСчетКонтрагента.Банк.ДеятельностьПрекращена Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Деятельность банка контрагента прекращена.
			|Уточните банковские реквизиты контрагента.",
			Источник,
			"БанковскийСчетКонтрагента",,
			Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаявкаНаРасходованиеДенежныхСредствПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Ложь Тогда
		Источник = Документы.ЗаявкаНаРасходованиеДенежныхСредств.СоздатьДокумент();
	КонецЕсли;
	
КонецПроцедуры

Процедура МаршрутныйЛистПроизводстваПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Ложь Тогда
		Источник = Документы.МаршрутныйЛистПроизводства.СоздатьДокумент();
	КонецЕсли;	
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;	
	
	Если Источник.Статус <> Перечисления.СтатусыМаршрутныхЛистовПроизводства.Выполнен Тогда
		Возврат;
	КонецЕсли;
	
	// Фактическое окончание не должно быть началом дня,
	// иначе возвратные отходы сворачиваются с материалами
	Если Источник.ФактическоеОкончание = НачалоДня(Источник.ФактическоеОкончание) Тогда
		Источник.ФактическоеОкончание = Источник.ФактическоеОкончание + 1;
	КонецЕсли;	
	
	Для каждого СтрокаТЧ из Источник.ВыходныеИзделия Цикл
		СтрокаТЧ.ДоляСтоимости = СтрокаТЧ.КоличествоФакт * 1000;
	КонецЦикла;	
	
КонецПроцедуры

Процедура НДСЗаписиКнигиПокупокПередЗаписью(Источник, Отказ, Замещение) Экспорт
	
	// Ошибка 00-00037644
	// Если зачет аванса выполняется через документ "Взаимозачет задолженности", то пишется не тот вид ценности
	
	Если Ложь Тогда
		Источник = РегистрыНакопления.НДСЗаписиКнигиПокупок.СоздатьНаборЗаписей();
	КонецЕсли;	
	
	Для каждого Запись из Источник Цикл
		
		Если Запись.ВидЦенности = Перечисления.ВидыЦенностей.ВозвратАвансовПолученных
			И Запись.Событие = Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету Тогда
			
			Запись.ВидЦенности = Перечисления.ВидыЦенностей.АвансыПолученные;
			
		КонецЕсли;	
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ПоступлениеУслугПрочихАктивовОбработкаЗаполнения(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);

	Если ТипДанныхЗаполнения = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДокументОснование", ДанныеЗаполнения);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаказПоставщику.Сделка КАК Сделка,
		|	ЗаказПоставщику.Соглашение.РегистрироватьЦеныПоставщика КАК РегистрироватьЦеныПоставщика,
		|	ЗаказПоставщику.Ссылка КАК _ЗаказПоставщику,
		|	ЗаказПоставщику.Партнер КАК Партнер,
		|	ЗаказПоставщику.Контрагент КАК Контрагент,
		|	ЗаказПоставщику.Договор КАК Договор,
		|	ЗаказПоставщику.Организация КАК Организация,
		|	ЗаказПоставщику.Соглашение КАК Соглашение,
		|	ЗаказПоставщику.Валюта КАК Валюта,
		|	ЗаказПоставщику.Валюта КАК ВалютаВзаиморасчетов,
		|	ВЫБОР
		|		КОГДА ЗаказПоставщику.Склад.ЭтоГруппа
		|				И ЗаказПоставщику.Склад.ВыборГруппы = ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|		ИНАЧЕ ЗаказПоставщику.Склад
		|	КОНЕЦ КАК Склад,
		|	ВЫБОР
		|		КОГДА ЗаказПоставщику.Склад.ЭтоГруппа
		|				И ЗаказПоставщику.Склад.ВыборГруппы = ЗНАЧЕНИЕ(Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЗапрещеноВыбиратьГруппуСкладов,
		|	ЗаказПоставщику.ФормаОплаты КАК ФормаОплаты,
		|	ЗаказПоставщику.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
		|	ЗаказПоставщику.НалогообложениеНДС КАК НалогообложениеНДС,
		|	ЗаказПоставщику.ЗакупкаПодДеятельность КАК ЗакупкаПодДеятельность,
		|	ЗаказПоставщику.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	ЗаказПоставщику.Статус КАК СтатусДокумента,
		|	ЗаказПоставщику.Подразделение КАК Подразделение,
		|	ЗаказПоставщику.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
		|	ЗаказПоставщику.ВернутьМногооборотнуюТару КАК ВернутьМногооборотнуюТару,
		|	ЗаказПоставщику.СрокВозвратаМногооборотнойТары КАК СрокВозвратаМногооборотнойТары,
		|	ЗаказПоставщику.ТребуетсяЗалогЗаТару КАК ТребуетсяЗалогЗаТару,
		|	ЕСТЬNULL(ЗаказПоставщику.Соглашение.РассчитыватьДатуВозвратаТарыПоКалендарю, ЛОЖЬ) КАК РассчитыватьДатуВозвратаТарыПоКалендарю,
		|	ЕСТЬNULL(ЗаказПоставщику.Соглашение.КалендарьВозвратаТары, ЗНАЧЕНИЕ(Справочник.ПроизводственныеКалендари.ПустаяСсылка)) КАК КалендарьВозвратаТары,
		|	НЕ ЗаказПоставщику.Проведен КАК ЕстьОшибкиПроведен,
		|	ВЫБОР
		|		КОГДА ЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Подтвержден)
		|				ИЛИ ЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьОшибкиСтатус,
		|	ЗаказПоставщику.БанковскийСчет КАК БанковскийСчетОрганизации,
		|	ЗаказПоставщику.ПорядокРасчетов КАК ПорядокРасчетов,
		|	ЗаказПоставщику.НаправлениеДеятельности КАК НаправлениеДеятельности
		|ИЗ
		|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
		|ГДЕ
		|	ЗаказПоставщику.Ссылка = &ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказПоставщикуТовары.Номенклатура.НаименованиеПолное КАК Содержание,
		|	ЗаказПоставщикуТовары.КоличествоУпаковок КАК Количество,
		|	ЗаказПоставщикуТовары.Цена,
		|	ЗаказПоставщикуТовары.Сумма,
		|	ЗаказПоставщикуТовары.СтавкаНДС,
		|	ЗаказПоставщикуТовары.СуммаНДС,
		|	ЗаказПоставщикуТовары.СуммаСНДС,
		|	ЗаказПоставщикуТовары.СтатьяРасходов,
		|	ЗаказПоставщикуТовары.АналитикаРасходов,
		|	ЗаказПоставщикуТовары.Подразделение
		|ИЗ
		|	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
		|ГДЕ
		|	ЗаказПоставщикуТовары.Ссылка = &ДокументОснование
		|	И ЗаказПоставщикуТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗаказПоставщикуТовары.НомерСтроки";
		
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		
		РеквизитыЗаказа = РезультатЗапроса[0].Выбрать();
		РеквизитыЗаказа.Следующий();
		
		МассивДопустимыхСтатусов = Новый Массив();
		МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовПоставщикам.Подтвержден);
		МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовПоставщикам.Закрыт);
		
		ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
			РеквизитыЗаказа._ЗаказПоставщику,
			РеквизитыЗаказа.СтатусДокумента,
			РеквизитыЗаказа.ЕстьОшибкиПроведен,
			РеквизитыЗаказа.ЕстьОшибкиСтатус,
			МассивДопустимыхСтатусов);
		
		// Заполнение шапки.
		ЗаполнитьЗначенияСвойств(Источник, РеквизитыЗаказа);
		
		Таблица = РезультатЗапроса[1].Выгрузить();
		Источник.Расходы.Загрузить(Таблица);
		
	КонецЕсли;

КонецПроцедуры

Процедура ПоступлениеУслугПрочихАктивовОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	
	Если Отказ = Истина Тогда
		Возврат;
	КонецЕсли;	
	
	_ПоступлениеУслугПрочихАктивов.Подписка_ОбработкаПроведения(Источник.Ссылка, Отказ);
	
КонецПроцедуры

Процедура ПоступлениеУслугПрочихАктивовПриКопировании(Источник, ОбъектКопирования) Экспорт
	
	Если Ложь Тогда
		Источник = Документы.ПоступлениеУслугПрочихАктивов.СоздатьДокумент();
	КонецЕсли;
	
	Источник._ЗаказПоставщику = Неопределено;
	
КонецПроцедуры

Процедура РеализацияТоваровУслугОбработкаЗаполнения(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		_РеализацияТоваровУслуг.ЗаполнитьЕдиницуМест(Источник);
		_РеализацияТоваровУслуг.РассчитатьКоличествоМест(Источник);
	КонецЕсли;
	
КонецПроцедуры

Процедура ТабельУчетаРабочегоВремениОбработкаЗаполнения(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если Ложь Тогда
		Источник = Документы.ТабельУчетаРабочегоВремени.СоздатьДокумент();
	КонецЕсли;	
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ФормированиеСоставаБригады") Тогда
		
		Источник.ПериодВводаДанныхОВремени = Перечисления.ПериодыВводаДанныхОВремени.ПрошлыйПериод;
		Источник.ДатаНачалаПериода    = ДанныеЗаполнения.Дата;
		Источник.ДатаОкончанияПериода = ДанныеЗаполнения.Дата;
		Источник.ПериодРегистрации    = НачалоМесяца(ДанныеЗаполнения.Дата);
		Источник.Организация          = Справочники.Организации.НайтиПоНаименованию("ПЛПК ООО");
		Источник._Основание           = ДанныеЗаполнения;
		
		МассивСотрдуников = Новый Массив;
		Для каждого СтрокаТЧ из ДанныеЗаполнения.Сотрудники Цикл
			
			Сотрудник = _ОбщегоНазначенияДоп.ПолучитьСотрудникаПоФизЛицу(СтрокаТЧ.Сотрудник, Источник.Организация, Источник.ДатаНачалаПериода);
			
			Если ЗначениеЗаполнено(Сотрудник) Тогда
				МассивСотрдуников.Добавить(Сотрудник);
			Иначе
				Сообщить("Не найден сотрудник: " + СтрокаТЧ.Сотрудник);
			КонецЕсли;	
			
		КонецЦикла;	
		
		Запрос = Новый Запрос;
		Запрос.Параметры.Вставить("Дата",              НачалоДня(ДанныеЗаполнения.Дата));
		Запрос.Параметры.Вставить("МассивСотрдуников", МассивСотрдуников);
		
		ВидыУчетаВремени = Новый Массив;
		ВидыУчетаВремени.Добавить(Справочники.ВидыИспользованияРабочегоВремени.Явка);
		ВидыУчетаВремени.Добавить(Справочники.ВидыИспользованияРабочегоВремени.РаботаНочныеЧасы);
		Запрос.Параметры.Вставить("ВидыУчетаВремени",   ВидыУчетаВремени);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Сотрудники.Ссылка КАК Сотрудник,
		|	ГрафикРаботыСотрудниковСрезПоследних.ГрафикРаботы КАК ГрафикРаботы,
		|	ГрафикиРаботыПоВидамВремени.ВидУчетаВремени КАК ВидУчетаВремени,
		|	ГрафикиРаботыПоВидамВремени.ВремяВЧасах КАК ВремяВЧасах,
		|	ГрафикиРаботыПоВидамВремени.ОсновноеЗначение
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикРаботыСотрудников.СрезПоследних(&Дата, Сотрудник В (&МассивСотрдуников)) КАК ГрафикРаботыСотрудниковСрезПоследних
		|		ПО (ГрафикРаботыСотрудниковСрезПоследних.Сотрудник = Сотрудники.Ссылка)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботыПоВидамВремени
		|		ПО (ГрафикРаботыСотрудниковСрезПоследних.ГрафикРаботы = ГрафикиРаботыПоВидамВремени.ГрафикРаботы)
		|			И (ГрафикиРаботыПоВидамВремени.Дата = &Дата)
		|			И (ГрафикиРаботыПоВидамВремени.ВремяВЧасах)
		|			И (ГрафикиРаботыПоВидамВремени.ВидУчетаВремени В (&ВидыУчетаВремени))
		|ГДЕ
		|	Сотрудники.Ссылка В(&МассивСотрдуников)";
		
		ДатаДень = День(ДанныеЗаполнения.Дата);
		
		Таблица = Запрос.Выполнить().Выгрузить();
		Для каждого СтрокаТЗ из Таблица Цикл
			
			НоваяСтрока = Источник.ДанныеОВремени.Добавить();
			НоваяСтрока.Сотрудник = СтрокаТЗ.Сотрудник;
			НоваяСтрока["ВидВремени" + ДатаДень] = СтрокаТЗ.ВидУчетаВремени;
			НоваяСтрока["Часов" + ДатаДень]      = СтрокаТЗ.ОсновноеЗначение;
			
		КонецЦикла;	
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ТаможеннаяДекларацияЭкспортОбработкаЗаполнения(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если Ложь Тогда
		Источник = Документы.ТаможеннаяДекларацияЭкспорт.СоздатьДокумент();
	КонецЕсли;	
	
	Источник.КодОперации = "1011410";
	
КонецПроцедуры

Процедура ТаможеннаяДекларацияЭкспортОбработкаПолученияПредставления(Источник, Данные, Представление, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Представление = СокрЛП(Данные.Номер) + " от " + Формат(Данные.Дата, "ДФ=dd.MM.yyyy");
	
КонецПроцедуры

Процедура ТаможеннаяДекларацияЭкспортОбработкаПроверкиЗаполнения(Источник, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Ссылка", Источник.Ссылка);
	Запрос.Параметры.Вставить("Номер",  Источник.Номер);
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТаможеннаяДекларацияЭкспорт.Ссылка
	|ИЗ
	|	Документ.ТаможеннаяДекларацияЭкспорт КАК ТаможеннаяДекларацияЭкспорт
	|ГДЕ
	|	ТаможеннаяДекларацияЭкспорт.Номер = &Номер
	|	И ТаможеннаяДекларацияЭкспорт.Проведен
	|	И ТаможеннаяДекларацияЭкспорт.Ссылка <> &Ссылка";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Данный номер уже используется",
			Источник,
			"Номер",,
			Отказ);
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ТранспортнаяНакладнаяОбработкаЗаполнения(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если Ложь Тогда
		Источник = Документы.ТранспортнаяНакладная.СоздатьДокумент();
	КонецЕсли;	
	
	Источник._Ответственный = Пользователи.ТекущийПользователь();
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("МассивСсылок", Источник.ДокументыОснования.ВыгрузитьКолонку("ДокументОснование"));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДокТовары.Номенклатура,
	|	ДокТовары.Характеристика,
	|	ДокТовары.Количество,
	|	ДокТовары._КоличествоМест КАК КоличествоМест,
	|	ЕСТЬNULL(ДокТовары._ЕдиницаМест.Вес, 0) КАК ЕдиницаМестВес,
	|	ДокТовары.Номенклатура.ВесЧислитель КАК НоменклатураВес
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК ДокТовары
	|ГДЕ
	|	ДокТовары.Ссылка В(&МассивСсылок)";
	
	ИтогоВесНетто  = 0;
	ИтогоВесБрутто = 0;
	
	Таблица = Запрос.Выполнить().Выгрузить();
	Для каждого СтрокаТЗ из Таблица Цикл
		
		ВесНетто = _ОбщегоНазначенияДоп.ПолучитьДопРеквизит(СтрокаТЗ.Характеристика, "Вес");
		Если НЕ ЗначениеЗаполнено(ВесНетто) Тогда
			ВесНетто = СтрокаТЗ.НоменклатураВес;
		КонецЕсли;	
		
		ВесНетто  = Окр(ВесНетто * СтрокаТЗ.Количество, 3);
		ВесБрутто = ВесНетто + Окр(СтрокаТЗ.ЕдиницаМестВес * СтрокаТЗ.КоличествоМест, 3);
		
		ИтогоВесНетто  = ИтогоВесНетто + ВесНетто;
		ИтогоВесБрутто = ИтогоВесБрутто + ВесБрутто;
		
	КонецЦикла;	
	
	Источник.МассаНетто  = ИтогоВесНетто;
	Источник.МассаБрутто = ИтогоВесБрутто;
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 2
	|	Спр.Ссылка
	|ИЗ
	|	Справочник._ФТСПунктыПерехода КАК Спр
	|ГДЕ
	|	НЕ Спр.ПометкаУдаления";
	
	Таблица = Запрос.Выполнить().Выгрузить();
	Если Таблица.Количество() = 1 Тогда
		Источник._ФТСПунктПерехода = Таблица[0][0];
	КонецЕсли;
	
	Запрос.Параметры.Вставить("Владелец", Источник.Грузополучатель);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 2
	|	Спр.Ссылка
	|ИЗ
	|	Справочник._ТаможняПокупателя КАК Спр
	|ГДЕ
	|	НЕ Спр.ПометкаУдаления
	|	И Спр.Владелец = &Владелец";
	
	Таблица = Запрос.Выполнить().Выгрузить();
	Если Таблица.Количество() = 1 Тогда
		Источник._ТаможняПокупателя = Таблица[0][0];
	КонецЕсли;
	
КонецПроцедуры

Процедура ФормированиеСоставаБригадыОбработкаПроверкиЗаполнения(Источник, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Сотрудники.Сотрудник КАК КоличествоИсполнителейПлан,
	|	Сотрудники._РольИсполнителяРабот КАК РольИсполнителяРабот
	|ПОМЕСТИТЬ ВТ_РолиИсполнителей
	|ИЗ
	|	&Сотрудники КАК Сотрудники
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_РолиИсполнителей.РольИсполнителяРабот,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ_РолиИсполнителей.КоличествоИсполнителейПлан) КАК КоличествоИсполнителейПлан
	|ПОМЕСТИТЬ ВТ_КоличествоИсолнителей
	|ИЗ
	|	ВТ_РолиИсполнителей КАК ВТ_РолиИсполнителей
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_РолиИсполнителей.РольИсполнителяРабот
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ВТ_КоличествоИсолнителей.РольИсполнителяРабот, УС_РаспределениеВыпускаПоУчастникамСрезПоследних.РольИсполнителяРаботНаПеределе) КАК РольИсполнителяРабот,
	|	СУММА(ЕСТЬNULL(ВТ_КоличествоИсолнителей.КоличествоИсполнителейПлан, 0)) КАК КоличествоИсполнителейПлан,
	|	СУММА(ЕСТЬNULL(УС_РаспределениеВыпускаПоУчастникамСрезПоследних.ПлановоеКоличествоИсполнителей, 0)) КАК КоличествоИсполнителейНорма
	|ИЗ
	|	ВТ_КоличествоИсолнителей КАК ВТ_КоличествоИсолнителей
	|		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.УС_РаспределениеВыпускаПоУчастникам.СрезПоследних(&НаДату, Передел = &Передел) КАК УС_РаспределениеВыпускаПоУчастникамСрезПоследних
	|		ПО ВТ_КоличествоИсолнителей.РольИсполнителяРабот = УС_РаспределениеВыпускаПоУчастникамСрезПоследних.РольИсполнителяРаботНаПеределе
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(ВТ_КоличествоИсолнителей.РольИсполнителяРабот, УС_РаспределениеВыпускаПоУчастникамСрезПоследних.РольИсполнителяРаботНаПеределе)";
	
	Запрос.УстановитьПараметр("Сотрудники", Источник.Сотрудники.Выгрузить(, "_РольИсполнителяРабот, Сотрудник"));
	Запрос.УстановитьПараметр("НаДату", ?(ЗначениеЗаполнено(Источник.Дата), Источник.Дата, ТекущаяДата()));
	Запрос.УстановитьПараметр("Передел", Источник.Подразделение);
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	Для каждого ТекСтрока Из ТЗ Цикл
		
		Если ТекСтрока.КоличествоИсполнителейПлан <> ТекСтрока.КоличествоИсполнителейНорма Тогда
		
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
											НСтр("ru = 'Запланированное количество исполнителей по роли %1 [%2] отличается от нормы [%3]!'"),
											ТекСтрока.РольИсполнителяРабот,
											ТекСтрока.КоличествоИсполнителейПлан, 
											ТекСтрока.КоличествоИсполнителейНорма);
											
			Сообщить(ТекстСообщения);
		
		КонецЕсли; 
	
	КонецЦикла;
	
КонецПроцедуры

Процедура ЭкземплярБюджетаПриКопировании(Источник, ОбъектКопирования) Экспорт
	
	Источник.Ответственный = Пользователи.ТекущийПользователь();
	
КонецПроцедуры
