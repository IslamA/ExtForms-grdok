////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ХРАНИЛИЩЕМ ССЫЛОК

&НаСервереБезКонтекста
Функция СоздатьИзбранноеРаботыПользователя(ВерсияХранилища)

	Избранное = Новый Структура;
	
	СписокСсылок = Новый ДеревоЗначений;
	СписокСсылок.Колонки.Добавить("НавигационнаяСсылка",          Новый ОписаниеТипов("Строка"));
	СписокСсылок.Колонки.Добавить("Представление",                Новый ОписаниеТипов("Строка"));
	СписокСсылок.Колонки.Добавить("ЭтоГруппа",                    Новый ОписаниеТипов("Булево"));
	СписокСсылок.Колонки.Добавить("ЭтоВнешнийОбъект",             Новый ОписаниеТипов("Булево"));
	СписокСсылок.Колонки.Добавить("ПоказыватьВОсновномИзбранном", Новый ОписаниеТипов("Булево"));
	СписокСсылок.Колонки.Добавить("ЭтоОбщийОбъект",               Новый ОписаниеТипов("Булево"));
	
	Избранное.Вставить("СписокСсылок", СписокСсылок);
	Избранное.Вставить("ВерсияХранилища", ВерсияХранилища);
	
	Возврат Избранное;
	
КонецФункции

&НаСервереБезКонтекста
Процедура УдалитьИзСистемногоИзбранногоЛишниеСсылки(СистемноеИзбранное, СписокСсылок, СистемноеХранилищеИзменилось = Ложь)
	
	Если СистемноеИзбранное = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивСсылокДляУдаления = Новый Массив;
	Для каждого ЭлКоллекции Из СистемноеИзбранное Цикл
		ЭлементСсылка = СписокСсылок.Строки.Найти(ЭлКоллекции.НавигационнаяСсылка, "НавигационнаяСсылка", Истина);
		Если ЭлементСсылка = Неопределено 
			ИЛИ НЕ ЭлементСсылка.ПоказыватьВОсновномИзбранном Тогда
			// Добавляем в порядке убывания
			МассивСсылокДляУдаления.Вставить(0, СистемноеИзбранное.Индекс(ЭлКоллекции));
		КонецЕсли; 
	КонецЦикла;
	
	// Выполним удаление лишних ссылок из системного избранного
	Для каждого ЭлКоллекции Из МассивСсылокДляУдаления Цикл
		СистемноеИзбранное.Удалить(ЭлКоллекции);
	КонецЦикла;

	Если МассивСсылокДляУдаления.Количество() <> 0 Тогда
		СистемноеХранилищеИзменилось = Истина;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьВИзбранноеНовыеСсылки(ВерсияХранилища, СкрытьНовыеСсылкиИзИзбранного)

	Избранное = ХранилищеОбщихНастроек.Загрузить("ИзбранноеРаботыПользователя");
	Если Избранное = Неопределено Тогда
		Избранное = СоздатьИзбранноеРаботыПользователя(ВерсияХранилища);
	КонецЕсли; 
	
	СистемноеИзбранное = ХранилищеСистемныхНастроек.Загрузить("Общее/ИзбранноеРаботыПользователя");
	Если СистемноеИзбранное <> Неопределено Тогда
		СписокСсылок = Избранное.СписокСсылок;
		
		МассивСсылок = Новый Массив;
		
		Для каждого ЭлКоллекции Из СистемноеИзбранное Цикл
			ЭлементСсылка = СписокСсылок.Строки.Найти(ЭлКоллекции.НавигационнаяСсылка, "НавигационнаяСсылка", Истина);
			Если ЭлементСсылка = Неопределено Тогда
				ЭлементСсылка = СписокСсылок.Строки.Добавить();
				ЭлементСсылка.НавигационнаяСсылка = ЭлКоллекции.НавигационнаяСсылка;
				ЭлементСсылка.ПоказыватьВОсновномИзбранном = НЕ СкрытьНовыеСсылкиИзИзбранного;
				
				МассивСсылок.Добавить(ЭлементСсылка.НавигационнаяСсылка);
			КонецЕсли;
		КонецЦикла;
		
		// Получим представление ссылок
		МассивПредставлений = ПолучитьПредставленияНавигационныхСсылок(МассивСсылок);
		Для каждого ЭлКоллекции Из МассивПредставлений Цикл
			Попытка
				ЭлементСсылка = СписокСсылок.Строки.Найти(ЭлКоллекции.НавигационнаяСсылка, "НавигационнаяСсылка");
				ЭлементСсылка.Представление = ЭлКоллекции.Текст;
			Исключение
			КонецПопытки;	
		КонецЦикла;
		
		УдалитьИзСистемногоИзбранногоЛишниеСсылки(СистемноеИзбранное, СписокСсылок);
		ХранилищеСистемныхНастроек.Сохранить("Общее/ИзбранноеРаботыПользователя",,СистемноеИзбранное);
	КонецЕсли; 
	
	ХранилищеОбщихНастроек.Сохранить("ИзбранноеРаботыПользователя",, Избранное);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСписокВнешнихОбъектов(ПутьКСписку)
	
	СписокВнешнихОбъектов = Новый Массив;
	
	ТД = Новый ТекстовыйДокумент;
	ТД.Прочитать(ПутьКСписку);
	Для Сч = 1 По ТД.КоличествоСтрок() Цикл
		СписокВнешнихОбъектов.Добавить(ТД.ПолучитьСтроку(Сч));
	КонецЦикла; 

	Возврат СписокВнешнихОбъектов;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ДИАЛОГ

&НаКлиенте
Процедура СохранитьИзбранноеВХранилище()

	ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СохранитьИзбранноеВХранилищеЗавершение", ЭтотОбъект);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
	
КонецПроцедуры
 
&НаКлиенте
Процедура СохранитьИзбранноеВХранилищеЗавершение(Ответ, ДопПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		СохранитьИзбранноеВХранилищеСервер();
	КонецЕсли; 
	
	Модифицированность = Ложь;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ДЕРЕВОМ ИЗБРАННОГО

&НаКлиенте
Функция ПолучитьТипВнешнегоФайла(Знач Расширение)

	Расширение = НРег(Расширение);
	
	ТипФайла = Неопределено;
	Если Расширение = ТипыВнешнихФайлов.ВнешняяОбработка Тогда
		ТипФайла = ТипыВнешнихФайлов.ВнешняяОбработка;
	ИначеЕсли Расширение = ТипыВнешнихФайлов.ВнешнийОтчет Тогда
		ТипФайла = ТипыВнешнихФайлов.ВнешнийОтчет;
	ИначеЕсли Расширение = ТипыВнешнихФайлов.ТекстовыйФайл Тогда
		ТипФайла = ТипыВнешнихФайлов.ТекстовыйФайл;
	КонецЕсли;

	Возврат ТипФайла;
	
КонецФункции
 
&НаСервереБезКонтекста
Процедура ЗагрузитьСписокСсылок(Приемник, Источник)

	Для каждого ЭлКоллекции Из Источник.Строки Цикл
		ЭлементСсылка = Приемник.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(ЭлементСсылка, ЭлКоллекции);
		
		ЭлементСсылка.ИндексКартинки = ПолучитьИндексКартинки(ЭлементСсылка.ЭтоГруппа, ЭлементСсылка.ЭтоВнешнийОбъект, ЭлементСсылка.ПоказыватьВОсновномИзбранном);
		
		ЗагрузитьСписокСсылок(ЭлементСсылка, ЭлКоллекции);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Функция ПолучитьТекущуюГруппуСсылок()

	ТекущиеДанные = Элементы.СписокСсылок.ТекущиеДанные;
	ГруппаСсылок = Неопределено;
	
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТекущиеДанные.ЭтоГруппа Тогда
			ГруппаСсылок = ТекущиеДанные;
		Иначе
			ГруппаСсылок = ТекущиеДанные.ПолучитьРодителя();
		КонецЕсли;
	КонецЕсли;
	
 	Если ГруппаСсылок = Неопределено Тогда
		ГруппаСсылок = СписокСсылок;
	КонецЕсли; 
	
	Возврат ГруппаСсылок;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьГруппуВСписок()

	ГруппаСсылок = ПолучитьТекущуюГруппуСсылок();
	ЭлементыРодителя = ГруппаСсылок.ПолучитьЭлементы();
	
	ЭлементСсылка = ЭлементыРодителя.Добавить();
	УстановитьСвойстваГруппы(ЭлементСсылка);
	
    Элементы.СписокСсылок.ТекущаяСтрока = ЭлементСсылка.ПолучитьИдентификатор();
	Элементы.СписокСсылок.ИзменитьСтроку();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьИзбранное()
	
	ВерсияХранилища = 1;
	
	//
	СпискиОбщихВнешнихОбъектов.Очистить();
	СтруктураНастроек = ХранилищеОбщихНастроек.Загрузить("ИзбранноеРаботыПользователя", "Настройки");
	Если СтруктураНастроек <> Неопределено Тогда
		СпискиОбщихВнешнихОбъектов.ЗагрузитьЗначения(СтруктураНастроек.СписокОбщихВнешнихОбъектов);
		СкрытьНовыеСсылкиИзИзбранного = СтруктураНастроек.СкрытьНовыеСсылкиИзИзбранного;
	КонецЕсли; 
	
	//
	ДобавитьВИзбранноеНовыеСсылки(ВерсияХранилища, СкрытьНовыеСсылкиИзИзбранного);
	
	ДеревоСсылок = РеквизитФормыВЗначение("СписокСсылок");
	ДеревоСсылок.Строки.Очистить();
	
	Избранное = ХранилищеОбщихНастроек.Загрузить("ИзбранноеРаботыПользователя");
	
	Если НЕ Избранное.Свойство("ВерсияХранилища") ИЛИ Избранное.ВерсияХранилища < ВерсияХранилища Тогда
		ТекстСообщения = НСтр("ru = 'Невозможно загрузить избранное из старой версии'");
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстСообщения;
		Сообщение.Сообщить(); 
		Возврат;
	КонецЕсли;
	
	ЗагрузитьСписокСсылок(ДеревоСсылок, Избранное.СписокСсылок);
	
	ЗначениеВРеквизитФормы(ДеревоСсылок, "СписокСсылок");
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьИзбранноеВХранилищеСервер()
	
	ДеревоСсылок = РеквизитФормыВЗначение("СписокСсылок");
	
	СистемноеИзбранное = ХранилищеСистемныхНастроек.Загрузить("Общее/ИзбранноеРаботыПользователя");
	
	СистемноеХранилищеИзменилось = Ложь;
	УдалитьИзСистемногоИзбранногоЛишниеСсылки(СистемноеИзбранное, ДеревоСсылок, СистемноеХранилищеИзменилось);
	
	// Добавим в системное избранное новые ссылки
	Если СистемноеИзбранное <> Неопределено Тогда
		
		МассивСсылок = Новый Массив;
		Для каждого ЭлКоллекции Из СистемноеИзбранное Цикл
			МассивСсылок.Добавить(ЭлКоллекции.НавигационнаяСсылка);
		КонецЦикла;
		
		Строки = ДеревоСсылок.Строки.НайтиСтроки(Новый Структура("ПоказыватьВОсновномИзбранном", Истина), Истина);
		Для каждого ЭлКоллекции Из Строки Цикл
			Если МассивСсылок.Найти(ЭлКоллекции.НавигационнаяСсылка) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ЭлементИзбранногоРаботыПользователя = Новый ЭлементИзбранногоРаботыПользователя;
			ЭлементИзбранногоРаботыПользователя.НавигационнаяСсылка = ЭлКоллекции.НавигационнаяСсылка;
			СистемноеИзбранное.Добавить(ЭлементИзбранногоРаботыПользователя);
			
			СистемноеХранилищеИзменилось = Истина;
		КонецЦикла;
	
	КонецЕсли;

	Если СистемноеХранилищеИзменилось Тогда
		ХранилищеСистемныхНастроек.Сохранить("Общее/ИзбранноеРаботыПользователя",, СистемноеИзбранное);
	КонецЕсли; 
	
	// Сохраним избранное пользователя
	Избранное = СоздатьИзбранноеРаботыПользователя(ВерсияХранилища);
	ДеревоСсылок = РеквизитФормыВЗначение("СписокСсылок");
	Избранное.Вставить("СписокСсылок", ДеревоСсылок.Скопировать());
	
	ХранилищеОбщихНастроек.Сохранить("ИзбранноеРаботыПользователя",, Избранное);
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСвойстваГруппы(ЭлементСсылка)

	ЭлементСсылка.ЭтоГруппа = Истина;
	ЭлементСсылка.ИндексКартинки = ПолучитьИндексКартинки(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСвойстваВнешнегоОбъекта(ЭлементСсылка)

	ЭлементСсылка.ЭтоВнешнийОбъект = Истина;
	ЭлементСсылка.ИндексКартинки = ПолучитьИндексКартинки(,Истина);

КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВГруппуДочерниеСсылки(Приемник, Источник)

	ЭлементыИсточника = Источник.ПолучитьЭлементы();
	ЭлементыПриемника = Приемник.ПолучитьЭлементы();
	
	Для каждого ЭлКоллекции Из ЭлементыИсточника Цикл
		ЭлементСсылка = ЭлементыПриемника.Добавить();
		ЗаполнитьЗначенияСвойств(ЭлементСсылка, ЭлКоллекции);
		ПереместитьВГруппуДочерниеСсылки(ЭлементСсылка, ЭлКоллекции);
	КонецЦикла; 

КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВГруппуСсылки(ЭлементыГруппы, ИдентификаторСтрокиИсточника, Действие)

	ДанныеИсточника = СписокСсылок.НайтиПоИдентификатору(ИдентификаторСтрокиИсточника);
	
	ЭлементСсылка = ЭлементыГруппы.Добавить();
	ЗаполнитьЗначенияСвойств(ЭлементСсылка, ДанныеИсточника);
	
	ПереместитьВГруппуДочерниеСсылки(ЭлементСсылка, ДанныеИсточника);
	
	Если Действие = ДействиеПеретаскивания.Перемещение Тогда
		РодительИсточника = ДанныеИсточника.ПолучитьРодителя();
		Если РодительИсточника = Неопределено Тогда
			ЭлементыРодителя = СписокСсылок.ПолучитьЭлементы();
		Иначе
			ЭлементыРодителя = РодительИсточника.ПолучитьЭлементы()
		КонецЕсли; 
		ЭлементыРодителя.Удалить(ДанныеИсточника);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИндексКартинки(ЭтоГруппа = Ложь, ЭтоВнешнийОбъект = Ложь, ПоказыватьВОсновномИзбранном = Ложь)

	Если ЭтоГруппа Тогда
		Возврат 1;
	ИначеЕсли ЭтоВнешнийОбъект Тогда
		Возврат 2;
	ИначеЕсли ПоказыватьВОсновномИзбранном Тогда
		Возврат 3;
	КонецЕсли; 
	
	Возврат 0;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПодключитьВнешнююОбработку(ИмяФайла, ЭтоОтчет);
	
	ДвоичныеДанныеОбработки = Новый ДвоичныеДанные(ИмяФайла);
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеОбработки);
	
	Если ЭтоОтчет Тогда
		Возврат ВнешниеОтчеты.Подключить(АдресВоВременномХранилище,, Ложь);
	Иначе
		Возврат ВнешниеОбработки.Подключить(АдресВоВременномХранилище,, Ложь);
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПодключитьВнешнююОбработкуДД(Знач ДвоичныеДанныеОбработки, Знач ЭтоОтчет);
	
	Если ТипЗнч(ДвоичныеДанныеОбработки) = Тип("ДвоичныеДанные") Тогда
		АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеОбработки);
	Иначе	
		АдресВоВременномХранилище = ДвоичныеДанныеОбработки;
	КонецЕсли;	
	
	Если ЭтоОтчет Тогда
		Возврат ВнешниеОтчеты.Подключить(АдресВоВременномХранилище,, НЕ РольДоступна("ПолныеПрава"));
	Иначе
		Возврат ВнешниеОбработки.Подключить(АдресВоВременномХранилище,, НЕ РольДоступна("ПолныеПрава"));
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьВнешнийОбъект(ПутьКФайлу)

	Файл = Новый Файл(ПутьКФайлу);
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ПутьКФайлу", ПутьКФайлу);
	ДопПараметры.Вставить("Расширение", Файл.Расширение);
	
	Файл.НачатьПроверкуСуществования(Новый ОписаниеОповещения("ОткрытьВнешнийОбъектПроверкаСуществования", ЭтотОбъект, ДопПараметры));
	
КонецПроцедуры

&НаКлиенте
Функция ОткрытьВнешнийОбъектПроверкаСуществования(Существует, ДополнительныеПараметры) Экспорт

	Если НЕ Существует Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Файл не найден.'") ); 
		Возврат Ложь;
	КонецЕсли;
	
	ТипФайла = ПолучитьТипВнешнегоФайла(ДополнительныеПараметры.Расширение);
	
	Если ТипФайла = ТипыВнешнихФайлов.ВнешняяОбработка
		ИЛИ ТипФайла = ТипыВнешнихФайлов.ВнешнийОтчет Тогда
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ТипФайла", ТипФайла);
		
		ПомещаемыеФайлы = Новый Массив;
		ПомещаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ДополнительныеПараметры.ПутьКФайлу));
		
		ПомещениеФайловЗавершение = Новый ОписаниеОповещения("ПомещениеФайловЗавершение", ЭтотОбъект, ДопПараметры);
		НачатьПомещениеФайлов(ПомещениеФайловЗавершение, ПомещаемыеФайлы,, Ложь, ЭтаФорма.УникальныйИдентификатор);
	
	ИначеЕсли ТипФайла = ТипыВнешнихФайлов.ТекстовыйФайл Тогда
		
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.Прочитать(ДополнительныеПараметры.ПутьКФайлу);
		ТекстовыйДокумент.Показать();
		
	Иначе
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗапускПриложенияЗавершение", ЭтотОбъект);
		НачатьЗапускПриложения(ОписаниеОповещения, ДополнительныеПараметры.ПутьКФайлу);
	КонецЕсли; 
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ЗапускПриложенияЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
КонецПроцедуры	

&НаКлиенте
Процедура ПомещениеФайловЗавершение(ПомещенныеФайлы, ДопПараметры) Экспорт
	
	Если ПомещенныеФайлы <> Неопределено И ПомещенныеФайлы.Количество() > 0 Тогда
		
		ОписаниеФайла = ПомещенныеФайлы.Получить(0);
		АдресФайла    = ОписаниеФайла.Хранение;
		
		Если АдресФайла = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если ДопПараметры.ТипФайла = ТипыВнешнихФайлов.ВнешняяОбработка Тогда
			
			ИмяОбработки = ПодключитьВнешнююОбработкуДД(АдресФайла, Ложь);
			ОткрытьФорму("ВнешняяОбработка." + ИмяОбработки + ".Форма");
			
		ИначеЕсли ДопПараметры.ТипФайла = ТипыВнешнихФайлов.ВнешнийОтчет Тогда
			
			ИмяОбработки = ПодключитьВнешнююОбработкуДД(АдресФайла, Истина);
			ОткрытьФорму("ВнешнийОтчет." + ИмяОбработки + ".Форма");
			
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыбор(ДанныеСсылки)

	Если ДанныеСсылки.ЭтоВнешнийОбъект Тогда
		ОткрытьВнешнийОбъект(ДанныеСсылки.НавигационнаяСсылка);
	Иначе
		ПерейтиПоНавигационнойСсылке(ДанныеСсылки.НавигационнаяСсылка);
	КонецЕсли; 
	
КонецПроцедуры
 
&НаКлиенте
Процедура СписокСсылокПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	ТекущиеДанные = СписокСсылок.НайтиПоИдентификатору(Строка);
	
	Если ТекущиеДанные = Неопределено 
		ИЛИ НЕ ТекущиеДанные.ЭтоГруппа Тогда
		
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ЭлементыГруппы = ТекущиеДанные.ПолучитьЭлементы();
	
	МассивЗначений = Новый Массив;
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		МассивЗначений = ПараметрыПеретаскивания.Значение;
	Иначе
		МассивЗначений.Добавить(ПараметрыПеретаскивания.Значение);
	КонецЕсли; 
	
	Для каждого ЗначениеПеретаскивания Из МассивЗначений Цикл
		Если ТипЗнч(ЗначениеПеретаскивания) = Тип("Файл") Тогда
			ЭлементСсылка = ЭлементыГруппы.Добавить();
			УстановитьСсылкуНаВнешнийОбъект(ЗначениеПеретаскивания, ЭлементСсылка);
		Иначе	
			ПереместитьВГруппуСсылки(ЭлементыГруппы, ЗначениеПеретаскивания, ПараметрыПеретаскивания.Действие);
		КонецЕсли; 
	КонецЦикла; 
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСсылокПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	ТипЗначения = ТипЗнч(ПараметрыПеретаскивания.Значение);
	Если ТипЗначения = Тип("Файл") 
		ИЛИ ТипЗначения = Тип("Массив") Тогда
		
		Возврат;
	КонецЕсли; 
	
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСсылокПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.СписокСсылок.ТекущиеДанные;
	Если НоваяСтрока И НЕ Копирование Тогда
		// Пользователь может добавить либо группу, либо скопировать существующую ссылку
		УстановитьСвойстваГруппы(ТекущиеДанные);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСсылокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = СписокСсылок.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если ТекущиеДанные = Неопределено 
		ИЛИ ТекущиеДанные.ЭтоГруппа Тогда
		
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ОбработатьВыбор(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСсылокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Копирование Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.СписокСсылок.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено 
		ИЛИ ТекущиеДанные.ЭтоГруппа Тогда
		
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	ДобавитьГруппуВСписок();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьОбщиеОбъекты(ЭлементыГруппы, СписокВнешнихОбъектов)
	
	ОбъектыДляУдаления = Новый Массив;
	Для каждого ЭлКоллекции Из ЭлементыГруппы Цикл
		ЗарегОбъект = СписокВнешнихОбъектов.НайтиПоЗначению(ЭлКоллекции.НавигационнаяСсылка);
		Если ЗарегОбъект = Неопределено Тогда
			Если ЭлКоллекции.ЭтоОбщийОбъект Тогда
				ОбъектыДляУдаления.Добавить(ЭлКоллекции);
			КонецЕсли; 
		Иначе
			ЗарегОбъект.Пометка = Истина;
		КонецЕсли;
		УдалитьОбщиеОбъекты(ЭлКоллекции.ПолучитьЭлементы(), СписокВнешнихОбъектов);
	КонецЦикла; 

	Для каждого ЭлКоллекции Из ОбъектыДляУдаления Цикл
		ЭлементыГруппы.Удалить(ЭлКоллекции);
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСписокОбщихОбъектов()

	// Получим
	СписокВнешнихОбъектов = Новый СписокЗначений;
	Для каждого ЭлКоллекции Из СпискиОбщихВнешнихОбъектов Цикл
		ВремСписокВнешнихОбъектов = ПолучитьСписокВнешнихОбъектов(ЭлКоллекции.Значение);
		Для каждого ВнешнийОбъект Из ВремСписокВнешнихОбъектов Цикл
			СписокВнешнихОбъектов.Добавить(ВнешнийОбъект);
		КонецЦикла; 
	КонецЦикла;
	
	ЭлементыГруппы = СписокСсылок.ПолучитьЭлементы();
	УдалитьОбщиеОбъекты(ЭлементыГруппы, СписокВнешнихОбъектов);
	Для каждого ЭлКоллекции Из СписокВнешнихОбъектов Цикл
		Если НЕ ЭлКоллекции.Пометка Тогда
			ВнешнийФайл = Новый Файл(ЭлКоллекции.Значение);
			
			ЭлементСсылка = ЭлементыГруппы.Добавить();
			ЭлементСсылка.ЭтоОбщийОбъект = Истина;
			УстановитьСсылкуНаВнешнийОбъект(ВнешнийФайл, ЭлементСсылка)
		КонецЕсли; 
	КонецЦикла; 			

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// КОМАНДЫ ФОРМЫ

&НаКлиенте
Процедура ДобавитьГруппу(Команда)
	
	ДобавитьГруппуВСписок();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписок(Команда)
	
	ЗагрузитьИзбранное();
	ДобавитьСписокОбщихОбъектов();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСсылкуНаВнешнийОбъект(ВнешнийФайл, ЭлементСсылка)

	ЭлементСсылка.НавигационнаяСсылка = ВнешнийФайл.ПолноеИмя;
	
	ЭлементСсылка.Представление = ВнешнийФайл.ИмяБезРасширения;
	УстановитьСвойстваВнешнегоОбъекта(ЭлементСсылка);
	
КонецПроцедуры

&НаКлиенте
Функция ВыбратьВнешнийОбъект(ПолноеИмяФайла = "")

	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Фильтр = ФильтрВнешнихОбъектов;							
	ДиалогВыбораФайла.ПолноеИмяФайла = ПолноеИмяФайла;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	Если НЕ ДиалогВыбораФайла.Выбрать() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВнешнийФайл = Новый Файл(ДиалогВыбораФайла.ПолноеИмяФайла);
	
	Возврат ВнешнийФайл;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьВнешнийОбъект(Команда)
	
	ВнешнийФайл = ВыбратьВнешнийОбъект();
	Если ВнешнийФайл = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ГруппаСсылок = ПолучитьТекущуюГруппуСсылок();
	ЭлементыРодителя = ГруппаСсылок.ПолучитьЭлементы();
	
	ЭлементСсылка = ЭлементыРодителя.Добавить();
	УстановитьСсылкуНаВнешнийОбъект(ВнешнийФайл, ЭлементСсылка);
	
    Элементы.СписокСсылок.ТекущаяСтрока = ЭлементСсылка.ПолучитьИдентификатор();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВИзбранное(Команда)

	Для каждого ВыбраннаяСтрока Из Элементы.СписокСсылок.ВыделенныеСтроки Цикл
		
		ЭлементСсылка = СписокСсылок.НайтиПоИдентификатору(ВыбраннаяСтрока);
		Если ЭлементСсылка.ЭтоГруппа
			ИЛИ ЭлементСсылка.ЭтоВнешнийОбъект Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементСсылка.ПоказыватьВОсновномИзбранном = НЕ ЭлементСсылка.ПоказыватьВОсновномИзбранном;
		ЭлементСсылка.ИндексКартинки = ПолучитьИндексКартинки(,, ЭлементСсылка.ПоказыватьВОсновномИзбранном);
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИзбранное(Команда)
	
	СохранитьИзбранноеВХранилищеСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСведенияОПрограмме(Команда)
	
	ОткрытьФорму(ПутьКОбъектуМетаданных + ".Форма.ОПрограмме");
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВГруппу(Команда)
	
	ТекущиеДанные = Элементы.СписокСсылок.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоГруппа Тогда
		// Нельзя переместить группу в коллекцию своих строк
		ТекущаяГруппаСсылок = ТекущиеДанные.ПолучитьИдентификатор();
	Иначе
		ТекущаяГруппаСсылок = -1;
	КонецЕсли; 
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СписокСсылок", СписокСсылок);
	ПараметрыФормы.Вставить("ТекущаяГруппаСсылок", ТекущаяГруппаСсылок);
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ИдентификаторСтроки", ТекущиеДанные.ПолучитьИдентификатор());
	ДопПараметры.Вставить("СписокСсылок",        СписокСсылок);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПереместитьВГруппуЗавершение", ЭтотОбъект, ДопПараметры);
	
	ОткрытьФорму(ПутьКОбъектуМетаданных + ".Форма.ВыборГруппыСсылок", ПараметрыФормы,,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВГруппуЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат = -1 Тогда
		ЭлементыГруппы = ДопПараметры.СписокСсылок.ПолучитьЭлементы();
	Иначе
		ЭлементыГруппы = ДопПараметры.СписокСсылок.НайтиПоИдентификатору(Результат).ПолучитьЭлементы();
	КонецЕсли; 
	
	ПереместитьВГруппуСсылки(ЭлементыГруппы, ДопПараметры.ИдентификаторСтроки, ДействиеПеретаскивания.Перемещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройки(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФильтрВнешнихОбъектов", ФильтрВнешнихОбъектов);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьНастройкиЗавершение", ЭтотОбъект);
	
	ОткрытьФорму(ПутьКОбъектуМетаданных + ".Форма.Настройки", ПараметрыФормы,,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиЗавершение(РезультатЗакрытия, ДопПараметры) Экспорт
	
	Если РезультатЗакрытия = Истина Тогда
		ЗагрузитьИзбранное();
		ДобавитьСписокОбщихОбъектов();
	КонецЕсли; 
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СОБЫТИЯ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПутьКОбъектуМетаданных = РеквизитФормыВЗначение("Объект").Метаданные().ПолноеИмя();
	
	ЗагрузитьИзбранное();
	
	ТипыВнешнихФайлов = Новый Структура;
	ТипыВнешнихФайлов.Вставить("ВнешняяОбработка", ".epf");
	ТипыВнешнихФайлов.Вставить("ВнешнийОтчет", ".erf");
	ТипыВнешнихФайлов.Вставить("ТекстовыйФайл", ".txt");
	
	ФильтрВнешнихОбъектов = "Все файлы|*.*"
	                        + "|Внешние отчеты и обработки (*.epf;*.erf)|*.epf;*.erf"
							+ "|Документы (*.txt;*.doc;*.pdf;*.htm;*.mxl)|*.txt;*.doc;*.pdf;*.htm;*.mxl";

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ДобавитьСписокОбщихОбъектов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		СохранитьИзбранноеВХранилище();
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВФайл(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СохранитьВФайлЗавершение", ЭтотОбъект);
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВФайлЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	Стр = СохранитьВФайлСервер();
	
	ЗаписьТекста = Новый ЗаписьТекста(ВыбранныеФайлы[0]);
	ЗаписьТекста.ЗаписатьСтроку(Стр);
	ЗаписьТекста.Закрыть();
	
КонецПроцедуры

&НаСервере
Функция СохранитьВФайлСервер()
	
	РеквизитОбъект = РеквизитФормыВЗначение("СписокСсылок");	
	Стр = ЗначениеВСтрокуВнутр(РеквизитОбъект);
	
	Возврат Стр;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьИзФайлаЗавершение", ЭтотОбъект);
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ЧтениеТекста = Новый ЧтениеТекста;
	ЧтениеТекста.Открыть(ВыбранныеФайлы[0]);
	Стр = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();
	
	ЗагрузитьИзФайлаСервер(Стр);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьИзФайлаСервер(Знач Стр)
	
	РеквизитОбъект = ЗначениеИзСтрокиВнутр(Стр);
	ЗначениеВРеквизитФормы(РеквизитОбъект, "СписокСсылок");	
	
КонецПроцедуры

